module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./test/case2/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n  throw new Error('setTimeout has not been defined');\n}\n\nfunction defaultClearTimeout() {\n  throw new Error('clearTimeout has not been defined');\n}\n\n(function () {\n  try {\n    if (typeof setTimeout === 'function') {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n\n  try {\n    if (typeof clearTimeout === 'function') {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\n\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n  } // if setTimeout wasn't available but was latter defined\n\n\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\n\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    //normal enviroments in sane situations\n    return clearTimeout(marker);\n  } // if clearTimeout wasn't available but was latter defined\n\n\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n      return cachedClearTimeout.call(null, marker);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n      // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\n\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n\n  draining = false;\n\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n\n  if (queue.length) {\n    drainQueue();\n  }\n}\n\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n\n    queueIndex = -1;\n    len = queue.length;\n  }\n\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n  var args = new Array(arguments.length - 1);\n\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n\n  queue.push(new Item(fun, args));\n\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n}; // v8 likes predictible objects\n\n\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\n\nItem.prototype.run = function () {\n  this.fun.apply(null, this.array);\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\n\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n  return [];\n};\n\nprocess.binding = function (name) {\n  throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n  return '/';\n};\n\nprocess.chdir = function (dir) {\n  throw new Error('process.chdir is not supported');\n};\n\nprocess.umask = function () {\n  return 0;\n};\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/san-loader/lib/runtime/normalize.js":
/*!**********************************************************!*\
  !*** ./node_modules/san-loader/lib/runtime/normalize.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file normalize.js\n * @author clark-t\n */\n\n/* eslint-disable prefer-rest-params */\nvar defineComponent = __webpack_require__(/*! san */ \"./node_modules/san/dist/san.dev.js\").defineComponent;\n/**\n * 处理 .san 组件 script 与 template 等部分的组合方法\n *\n * @param {Object|Function} script 组件 script 部分\n * @param {string} template 组件 template 部分的文本\n * @param {string} injectStyles 组件需要注入的 style 列表\n * @return {Class} 组件类\n */\n\n\nmodule.exports = function (script, template, injectStyles) {\n  var dfns = componentDefinitions(script);\n\n  for (var i = 0; i < dfns.length; i++) {\n    if (template) {\n      if (typeof template === 'string') {\n        dfns[i].template = template;\n      } else if (template instanceof Array) {\n        dfns[i].aPack = template;\n      } else {\n        dfns[i].aNode = template;\n      }\n    }\n\n    if (injectStyles.length) {\n      injectStylesIntoInitData(dfns[i], injectStyles);\n    }\n  }\n\n  return _typeof(script) === 'object' ? defineComponent(script) : script;\n};\n\nfunction injectStylesIntoInitData(proto, injectStyles) {\n  var style = {};\n\n  for (var i = 0; i < injectStyles.length; i++) {\n    objectAssign(style, injectStyles[i]);\n  }\n\n  var original = proto.initData;\n  proto.initData = original ? function () {\n    return objectAssign({}, original.call(this), {\n      $style: style\n    });\n  } : function () {\n    return {\n      $style: style\n    };\n  };\n}\n\nfunction componentDefinitions(cmpt) {\n  // 当 script 为 Function 时，等价于 class A { static template = 'xxx' }\n  // 可查看 static property 的 babel 编译产物\n  var dfns = [cmpt]; // 对于联合 san-store 的情况，需要同时将 template, inited 等挂到原型链上\n\n  if (typeof cmpt === 'function') {\n    dfns.push(cmpt.prototype);\n\n    if (cmpt.prototype.constructor) {\n      dfns.push(cmpt.prototype.constructor.prototype);\n    }\n  }\n\n  return dfns;\n} // 参考：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\n\n\nfunction objectAssign(target) {\n  'use strict';\n\n  if (target === null || target === undefined) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var to = Object(target);\n\n  for (var index = 1; index < arguments.length; index++) {\n    var nextSource = arguments[index];\n\n    if (nextSource !== null && nextSource !== undefined) {\n      for (var nextKey in nextSource) {\n        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n          to[nextKey] = nextSource[nextKey];\n        }\n      }\n    }\n  }\n\n  return to;\n}\n\n//# sourceURL=webpack:///./node_modules/san-loader/lib/runtime/normalize.js?");

/***/ }),

/***/ "./node_modules/san/dist/san.dev.js":
/*!******************************************!*\
  !*** ./node_modules/san/dist/san.dev.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(setImmediate, module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Baidu Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license.\n * See LICENSE file in the project root for license information.\n *\n * @file San 主文件\n */\n(function (root) {\n  // 人工调整打包代码顺序，通过注释手工写一些依赖\n  //     // require('./util/guid');\n  //     // require('./util/empty');\n  //     // require('./util/extend');\n  //     // require('./util/inherits');\n  //     // require('./util/each');\n  //     // require('./util/contains');\n  //     // require('./util/bind');\n  //     // require('./browser/on');\n  //     // require('./browser/un');\n  //     // require('./browser/svg-tags');\n  //     // require('./browser/create-el');\n  //     // require('./browser/remove-el');\n  //     // require('./util/next-tick');\n  //     // require('./browser/ie');\n  //     // require('./browser/ie-old-than-9');\n  //     // require('./browser/input-event-compatible');\n  //     // require('./browser/auto-close-tags');\n  //     // require('./util/data-types.js');\n  //     // require('./util/create-data-types-checker.js');\n  //     // require('./parser/walker');\n  //     // require('./parser/parse-template');\n  //     // require('./runtime/change-expr-compare');\n  //     // require('./runtime/data-change-type');\n  //     // require('./runtime/default-filters');\n  //     // require('./view/life-cycle');\n  //     // require('./view/node-type');\n  //     // require('./view/get-prop-handler');\n  //     // require('./view/is-data-change-by-element');\n  //     // require('./view/get-event-listener');\n  //     // require('./view/create-node');\n\n  /**\n  * Copyright (c) Baidu Inc. All rights reserved.\n  *\n  * This source code is licensed under the MIT license.\n  * See LICENSE file in the project root for license information.\n  *\n  * @file 唯一id\n  */\n\n  /**\n   * 获取唯一id\n   *\n   * @type {number} 唯一id\n   */\n  var guid = 1; // exports = module.exports = guid;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 空函数\n   */\n\n  /**\n   * 啥都不干\n   */\n\n  function empty() {} // exports = module.exports = empty;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 属性拷贝\n   */\n\n  /**\n   * 对象属性拷贝\n   *\n   * @param {Object} target 目标对象\n   * @param {Object} source 源对象\n   * @return {Object} 返回目标对象\n   */\n\n\n  function extend(target, source) {\n    for (var key in source) {\n      /* istanbul ignore else  */\n      if (source.hasOwnProperty(key)) {\n        var value = source[key];\n\n        if (typeof value !== 'undefined') {\n          target[key] = value;\n        }\n      }\n    }\n\n    return target;\n  } // exports = module.exports = extend;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 构建类之间的继承关系\n   */\n  // var extend = require('./extend');\n\n  /**\n   * 构建类之间的继承关系\n   *\n   * @param {Function} subClass 子类函数\n   * @param {Function} superClass 父类函数\n   */\n\n\n  function inherits(subClass, superClass) {\n    /* jshint -W054 */\n    var subClassProto = subClass.prototype;\n    var F = new Function();\n    F.prototype = superClass.prototype;\n    subClass.prototype = new F();\n    subClass.prototype.constructor = subClass;\n    extend(subClass.prototype, subClassProto);\n    /* jshint +W054 */\n  } // exports = module.exports = inherits;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 遍历数组\n   */\n\n  /**\n   * 遍历数组集合\n   *\n   * @param {Array} array 数组源\n   * @param {function(Any,number):boolean} iterator 遍历函数\n   */\n\n\n  function each(array, iterator) {\n    if (array && array.length > 0) {\n      for (var i = 0, l = array.length; i < l; i++) {\n        if (iterator(array[i], i) === false) {\n          break;\n        }\n      }\n    }\n  } // exports = module.exports = each;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 判断数组中是否包含某项\n   */\n  // var each = require('./each');\n\n  /**\n   * 判断数组中是否包含某项\n   *\n   * @param {Array} array 数组\n   * @param {*} value 包含的项\n   * @return {boolean}\n   */\n\n\n  function contains(array, value) {\n    var result = false;\n    each(array, function (item) {\n      result = item === value;\n      return !result;\n    });\n    return result;\n  } // exports = module.exports = contains;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file bind函数\n   */\n\n  /**\n   * Function.prototype.bind 方法的兼容性封装\n   *\n   * @param {Function} func 要bind的函数\n   * @param {Object} thisArg this指向对象\n   * @param {...*} args 预设的初始参数\n   * @return {Function}\n   */\n\n\n  function bind(func, thisArg) {\n    var nativeBind = Function.prototype.bind;\n    var slice = Array.prototype.slice; // #[begin] allua\n\n    if (nativeBind && func.bind === nativeBind) {\n      // #[end]\n      return nativeBind.apply(func, slice.call(arguments, 1)); // #[begin] allua\n    }\n    /* istanbul ignore next */\n\n\n    var args = slice.call(arguments, 2);\n    /* istanbul ignore next */\n\n    return function () {\n      return func.apply(thisArg, args.concat(slice.call(arguments)));\n    }; // #[end]\n  } // exports = module.exports = bind;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file DOM 事件挂载\n   */\n\n  /**\n   * DOM 事件挂载\n   *\n   * @inner\n   * @param {HTMLElement} el DOM元素\n   * @param {string} eventName 事件名\n   * @param {Function} listener 监听函数\n   * @param {boolean} capture 是否是捕获阶段\n   */\n\n\n  function on(el, eventName, listener, capture) {\n    // #[begin] allua\n\n    /* istanbul ignore else */\n    if (el.addEventListener) {\n      // #[end]\n      el.addEventListener(eventName, listener, capture); // #[begin] allua\n    } else {\n      el.attachEvent('on' + eventName, listener);\n    } // #[end]\n\n  } // exports = module.exports = on;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file DOM 事件卸载\n   */\n\n  /**\n   * DOM 事件卸载\n   *\n   * @inner\n   * @param {HTMLElement} el DOM元素\n   * @param {string} eventName 事件名\n   * @param {Function} listener 监听函数\n   * @param {boolean} capture 是否是捕获阶段\n   */\n\n\n  function un(el, eventName, listener, capture) {\n    // #[begin] allua\n\n    /* istanbul ignore else */\n    if (el.addEventListener) {\n      // #[end]\n      el.removeEventListener(eventName, listener, capture); // #[begin] allua\n    } else {\n      el.detachEvent('on' + eventName, listener);\n    } // #[end]\n\n  } // exports = module.exports = un;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 将字符串逗号切分返回对象\n   */\n  // var each = require('../util/each');\n\n  /**\n   * 将字符串逗号切分返回对象\n   *\n   * @param {string} source 源字符串\n   * @return {Object}\n   */\n\n\n  function splitStr2Obj(source) {\n    var result = {};\n    each(source.split(','), function (key) {\n      result[key] = key;\n    });\n    return result;\n  } // exports = module.exports = splitStr2Obj;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file SVG标签表\n   */\n  // var splitStr2Obj = require('../util/split-str-2-obj');\n\n  /**\n   * svgTags\n   *\n   * @see https://www.w3.org/TR/SVG/svgdtd.html 只取常用\n   * @type {Object}\n   */\n\n\n  var svgTags = splitStr2Obj('' // Animation elements\n  + 'animate,animateMotion,animateTransform,' // Basic shapes\n  + 'circle,ellipse,line,polygon,polyline,rect,' // Container elements\n  + 'defs,g,marker,mask,missing-glyph,pattern,svg,symbol,' // Descriptive elements\n  + 'desc,metadata,' // Font elements\n  + 'font,font-face,' // Gradient elements\n  + 'linearGradient,radialGradient,stop,' // Graphics elements\n  + 'image,path,use,' // Text elements\n  + 'glyph,textPath,text,tref,tspan,' // Others\n  + 'clipPath,cursor,filter,foreignObject,view'); // exports = module.exports = svgTags;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file DOM创建\n   */\n  // var svgTags = require('./svg-tags');\n\n  /**\n   * 创建 DOM 元素\n   *\n   * @param  {string} tagName tagName\n   * @return {HTMLElement}\n   */\n\n  function createEl(tagName) {\n    if (svgTags[tagName] && document.createElementNS) {\n      return document.createElementNS('http://www.w3.org/2000/svg', tagName);\n    }\n\n    return document.createElement(tagName);\n  } // exports = module.exports = createEl;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 移除DOM\n   */\n\n  /**\n   * 将 DOM 从页面中移除\n   *\n   * @param {HTMLElement} el DOM元素\n   */\n\n\n  function removeEl(el) {\n    if (el && el.parentNode) {\n      el.parentNode.removeChild(el);\n    }\n  } // exports = module.exports = removeEl;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 在下一个时间周期运行任务\n   */\n  // 该方法参照了vue2.5.0的实现，感谢vue团队\n  // SEE: https://github.com/vuejs/vue/blob/0948d999f2fddf9f90991956493f976273c5da1f/src/core/util/env.js#L68\n  // var bind = require('./bind');\n\n  /**\n   * 下一个周期要执行的任务列表\n   *\n   * @inner\n   * @type {Array}\n   */\n\n\n  var nextTasks = [];\n  /**\n   * 执行下一个周期任务的函数\n   *\n   * @inner\n   * @type {Function}\n   */\n\n  var _nextHandler;\n  /**\n   * 浏览器是否支持原生Promise\n   * 对Promise做判断，是为了禁用一些不严谨的Promise的polyfill\n   *\n   * @inner\n   * @type {boolean}\n   */\n\n\n  var isNativePromise = typeof Promise === 'function' && /native code/.test(Promise);\n  /**\n   * 在下一个时间周期运行任务\n   *\n   * @inner\n   * @param {Function} fn 要运行的任务函数\n   * @param {Object=} thisArg this指向对象\n   */\n\n  function nextTick(fn, thisArg) {\n    if (thisArg) {\n      fn = bind(fn, thisArg);\n    }\n\n    nextTasks.push(fn);\n\n    if (_nextHandler) {\n      return;\n    }\n\n    _nextHandler = function nextHandler() {\n      var tasks = nextTasks.slice(0);\n      nextTasks = [];\n      _nextHandler = null;\n\n      for (var i = 0, l = tasks.length; i < l; i++) {\n        tasks[i]();\n      }\n    }; // 非标准方法，但是此方法非常吻合要求。\n\n    /* istanbul ignore next */\n\n\n    if (typeof setImmediate === 'function') {\n      setImmediate(_nextHandler);\n    } // 用MessageChannel去做setImmediate的polyfill\n    // 原理是将新的message事件加入到原有的dom events之后\n    else if (typeof MessageChannel === 'function') {\n        var channel = new MessageChannel();\n        var port = channel.port2;\n        channel.port1.onmessage = _nextHandler;\n        port.postMessage(1);\n      } // for native app\n      else if (isNativePromise) {\n          Promise.resolve().then(_nextHandler);\n        } else {\n          setTimeout(_nextHandler, 0);\n        }\n  } // exports = module.exports = nextTick;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file ie版本号\n   */\n  // #[begin] allua\n\n  /**\n   * 从userAgent中ie版本号的匹配信息\n   *\n   * @type {Array}\n   */\n\n\n  var ieVersionMatch = typeof navigator !== 'undefined' && navigator.userAgent.match(/(msie|trident)(\\s*|\\/)([0-9]+)/i);\n  /**\n   * ie版本号，非ie时为0\n   *\n   * @type {number}\n   */\n\n  var ie = ieVersionMatch ?\n  /* istanbul ignore next */\n  ieVersionMatch[3] - 0 : 0;\n\n  if (ie && !/msie/i.test(ieVersionMatch[1])) {\n    ie += 4;\n  } // #[end]\n  // exports = module.exports = ie;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 是否 IE 并且小于 9\n   */\n  // var ie = require('./ie');\n  // HACK:\n  // 1. IE8下，设置innerHTML时如果以html comment开头，comment会被自动滤掉\n  //    为了保证stump存在，需要设置完html后，createComment并appendChild/insertBefore\n  // 2. IE8下，innerHTML还不支持custom element，所以需要用div替代，不用createElement\n  // 3. 虽然IE8已经优化了字符串+连接，碎片化连接性能不再退化\n  //    但是由于上面多个兼容场景都用 < 9 判断，所以字符串连接也沿用\n  //    所以结果是IE8下字符串连接用的是数组join的方式\n  // #[begin] allua\n\n  /**\n   * 是否 IE 并且小于 9\n   */\n\n\n  var ieOldThan9 = ie &&\n  /* istanbul ignore next */\n  ie < 9; // #[end]\n  // exports = module.exports = ieOldThan9;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 触发元素事件\n   */\n\n  /**\n   * 触发元素事件\n   *\n   * @inner\n   * @param {HTMLElement} el DOM元素\n   * @param {string} eventName 事件名\n   */\n\n  function trigger(el, eventName) {\n    var event = document.createEvent('HTMLEvents');\n    event.initEvent(eventName, true, true);\n    el.dispatchEvent(event);\n  } // exports = module.exports = trigger;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 解决 IE9 在表单元素中删除字符时不触发事件的问题\n   */\n  // var ie = require('./ie');\n  // var on = require('./on');\n  // var trigger = require('./trigger');\n  // #[begin] allua\n\n  /* istanbul ignore if */\n\n\n  if (ie === 9) {\n    on(document, 'selectionchange', function () {\n      var el = document.activeElement;\n\n      if (el.tagName === 'TEXTAREA' || el.tagName === 'INPUT') {\n        trigger(el, 'input');\n      }\n    });\n  } // #[end]\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 自闭合标签表\n   */\n  // var splitStr2Obj = require('../util/split-str-2-obj');\n\n  /**\n   * 自闭合标签列表\n   *\n   * @type {Object}\n   */\n\n\n  var autoCloseTags = splitStr2Obj('area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr'); // exports = module.exports = autoCloseTags;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file data types\n   */\n  // var bind = require('./bind');\n  // var empty = require('./empty');\n  // var extend = require('./extend');\n  // #[begin] error\n\n  var ANONYMOUS_CLASS_NAME = '<<anonymous>>';\n  /**\n   * 获取精确的类型\n   *\n   * @NOTE 如果 obj 是一个 DOMElement，我们会返回 `element`；\n   *\n   * @param  {*} obj 目标\n   * @return {string}\n   */\n\n  function getDataType(obj) {\n    // 不支持element了。data应该是纯数据\n    // if (obj && obj.nodeType === 1) {\n    //     return 'element';\n    // }\n    return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();\n  } // #[end]\n\n  /**\n   * 创建链式的数据类型校验器\n   *\n   * @param  {Function} validate 真正的校验器\n   * @return {Function}\n   */\n\n\n  function createChainableChecker(validate) {\n    /* istanbul ignore next */\n    var chainedChecker = function chainedChecker() {};\n\n    chainedChecker.isRequired = empty; // 只在 error 功能启用时才有实际上的 dataTypes 检测\n    // #[begin] error\n\n    validate = validate || empty;\n\n    var checkType = function checkType(isRequired, data, dataName, componentName, fullDataName) {\n      var dataValue = data[dataName];\n      var dataType = getDataType(dataValue);\n      /* istanbul ignore next */\n\n      componentName = componentName || ANONYMOUS_CLASS_NAME; // 如果是 null 或 undefined，那么要提前返回啦\n\n      if (dataValue == null) {\n        // 是 required 就报错\n        if (isRequired) {\n          throw new Error('[SAN ERROR] ' + 'The `' + dataName + '` ' + 'is marked as required in `' + componentName + '`, ' + 'but its value is ' + dataType);\n        } // 不是 required，那就是 ok 的\n\n\n        return;\n      }\n\n      validate(data, dataName, componentName, fullDataName);\n    };\n\n    chainedChecker = bind(checkType, null, false);\n    chainedChecker.isRequired = bind(checkType, null, true); // #[end]\n\n    return chainedChecker;\n  } // #[begin] error\n\n  /**\n   * 生成主要类型数据校验器\n   *\n   * @param  {string} type 主类型\n   * @return {Function}\n   */\n\n\n  function createPrimaryTypeChecker(type) {\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n      var dataValue = data[dataName];\n      var dataType = getDataType(dataValue);\n\n      if (dataType !== type) {\n        throw new Error('[SAN ERROR] ' + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type' + '(' + dataType + ' supplied to ' + componentName + ', ' + 'expected ' + type + ')');\n      }\n    });\n  }\n  /**\n   * 生成 arrayOf 校验器\n   *\n   * @param  {Function} arrayItemChecker 数组中每项数据的校验器\n   * @return {Function}\n   */\n\n\n  function createArrayOfChecker(arrayItemChecker) {\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n      if (typeof arrayItemChecker !== 'function') {\n        throw new Error('[SAN ERROR] ' + 'Data `' + dataName + '` of `' + componentName + '` has invalid ' + 'DataType notation inside `arrayOf`, expected `function`');\n      }\n\n      var dataValue = data[dataName];\n      var dataType = getDataType(dataValue);\n\n      if (dataType !== 'array') {\n        throw new Error('[SAN ERROR] ' + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type' + '(' + dataType + ' supplied to ' + componentName + ', ' + 'expected array)');\n      }\n\n      for (var i = 0, len = dataValue.length; i < len; i++) {\n        arrayItemChecker(dataValue, i, componentName, fullDataName + '[' + i + ']');\n      }\n    });\n  }\n  /**\n   * 生成 instanceOf 检测器\n   *\n   * @param  {Function|Class} expectedClass 期待的类\n   * @return {Function}\n   */\n\n\n  function createInstanceOfChecker(expectedClass) {\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n      var dataValue = data[dataName];\n\n      if (dataValue instanceof expectedClass) {\n        return;\n      }\n\n      var dataValueClassName = dataValue.constructor && dataValue.constructor.name ? dataValue.constructor.name :\n      /* istanbul ignore next */\n      ANONYMOUS_CLASS_NAME;\n      /* istanbul ignore next */\n\n      var expectedClassName = expectedClass.name || ANONYMOUS_CLASS_NAME;\n      throw new Error('[SAN ERROR] ' + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type' + '(' + dataValueClassName + ' supplied to ' + componentName + ', ' + 'expected instance of ' + expectedClassName + ')');\n    });\n  }\n  /**\n   * 生成 shape 校验器\n   *\n   * @param  {Object} shapeTypes shape 校验规则\n   * @return {Function}\n   */\n\n\n  function createShapeChecker(shapeTypes) {\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n      if (getDataType(shapeTypes) !== 'object') {\n        throw new Error('[SAN ERROR] ' + 'Data `' + fullDataName + '` of `' + componentName + '` has invalid ' + 'DataType notation inside `shape`, expected `object`');\n      }\n\n      var dataValue = data[dataName];\n      var dataType = getDataType(dataValue);\n\n      if (dataType !== 'object') {\n        throw new Error('[SAN ERROR] ' + 'Invalid ' + componentName + ' data `' + fullDataName + '` of type' + '(' + dataType + ' supplied to ' + componentName + ', ' + 'expected object)');\n      }\n\n      for (var shapeKeyName in shapeTypes) {\n        /* istanbul ignore else  */\n        if (shapeTypes.hasOwnProperty(shapeKeyName)) {\n          var checker = shapeTypes[shapeKeyName];\n\n          if (typeof checker === 'function') {\n            checker(dataValue, shapeKeyName, componentName, fullDataName + '.' + shapeKeyName);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * 生成 oneOf 校验器\n   *\n   * @param  {Array} expectedEnumValues 期待的枚举值\n   * @return {Function}\n   */\n\n\n  function createOneOfChecker(expectedEnumValues) {\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n      if (getDataType(expectedEnumValues) !== 'array') {\n        throw new Error('[SAN ERROR] ' + 'Data `' + fullDataName + '` of `' + componentName + '` has invalid ' + 'DataType notation inside `oneOf`, array is expected.');\n      }\n\n      var dataValue = data[dataName];\n\n      for (var i = 0, len = expectedEnumValues.length; i < len; i++) {\n        if (dataValue === expectedEnumValues[i]) {\n          return;\n        }\n      }\n\n      throw new Error('[SAN ERROR] ' + 'Invalid ' + componentName + ' data `' + fullDataName + '` of value' + '(`' + dataValue + '` supplied to ' + componentName + ', ' + 'expected one of ' + expectedEnumValues.join(',') + ')');\n    });\n  }\n  /**\n   * 生成 oneOfType 校验器\n   *\n   * @param  {Array<Function>} expectedEnumOfTypeValues 期待的枚举类型\n   * @return {Function}\n   */\n\n\n  function createOneOfTypeChecker(expectedEnumOfTypeValues) {\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n      if (getDataType(expectedEnumOfTypeValues) !== 'array') {\n        throw new Error('[SAN ERROR] ' + 'Data `' + dataName + '` of `' + componentName + '` has invalid ' + 'DataType notation inside `oneOf`, array is expected.');\n      }\n\n      var dataValue = data[dataName];\n\n      for (var i = 0, len = expectedEnumOfTypeValues.length; i < len; i++) {\n        var checker = expectedEnumOfTypeValues[i];\n\n        if (typeof checker !== 'function') {\n          continue;\n        }\n\n        try {\n          checker(data, dataName, componentName, fullDataName); // 如果 checker 完成校验没报错，那就返回了\n\n          return;\n        } catch (e) {// 如果有错误，那么应该把错误吞掉\n        }\n      } // 所有的可接受 type 都失败了，才丢一个异常\n\n\n      throw new Error('[SAN ERROR] ' + 'Invalid ' + componentName + ' data `' + dataName + '` of value' + '(`' + dataValue + '` supplied to ' + componentName + ')');\n    });\n  }\n  /**\n   * 生成 objectOf 校验器\n   *\n   * @param  {Function} typeChecker 对象属性值校验器\n   * @return {Function}\n   */\n\n\n  function createObjectOfChecker(typeChecker) {\n    return createChainableChecker(function (data, dataName, componentName, fullDataName) {\n      if (typeof typeChecker !== 'function') {\n        throw new Error('[SAN ERROR] ' + 'Data `' + dataName + '` of `' + componentName + '` has invalid ' + 'DataType notation inside `objectOf`, expected function');\n      }\n\n      var dataValue = data[dataName];\n      var dataType = getDataType(dataValue);\n\n      if (dataType !== 'object') {\n        throw new Error('[SAN ERROR] ' + 'Invalid ' + componentName + ' data `' + dataName + '` of type' + '(' + dataType + ' supplied to ' + componentName + ', ' + 'expected object)');\n      }\n\n      for (var dataKeyName in dataValue) {\n        /* istanbul ignore else  */\n        if (dataValue.hasOwnProperty(dataKeyName)) {\n          typeChecker(dataValue, dataKeyName, componentName, fullDataName + '.' + dataKeyName);\n        }\n      }\n    });\n  }\n  /**\n   * 生成 exact 校验器\n   *\n   * @param  {Object} shapeTypes object 形态定义\n   * @return {Function}\n   */\n\n\n  function createExactChecker(shapeTypes) {\n    return createChainableChecker(function (data, dataName, componentName, fullDataName, secret) {\n      if (getDataType(shapeTypes) !== 'object') {\n        throw new Error('[SAN ERROR] ' + 'Data `' + dataName + '` of `' + componentName + '` has invalid ' + 'DataType notation inside `exact`');\n      }\n\n      var dataValue = data[dataName];\n      var dataValueType = getDataType(dataValue);\n\n      if (dataValueType !== 'object') {\n        throw new Error('[SAN ERROR] ' + 'Invalid data `' + fullDataName + '` of type `' + dataValueType + '`' + '(supplied to ' + componentName + ', expected `object`)');\n      }\n\n      var allKeys = {}; // 先合入 shapeTypes\n\n      extend(allKeys, shapeTypes); // 再合入 dataValue\n\n      extend(allKeys, dataValue); // 保证 allKeys 的类型正确\n\n      for (var key in allKeys) {\n        /* istanbul ignore else  */\n        if (allKeys.hasOwnProperty(key)) {\n          var checker = shapeTypes[key]; // dataValue 中有一个多余的数据项\n\n          if (!checker) {\n            throw new Error('[SAN ERROR] ' + 'Invalid data `' + fullDataName + '` key `' + key + '` ' + 'supplied to `' + componentName + '`. ' + '(`' + key + '` is not defined in `DataTypes.exact`)');\n          }\n\n          if (!(key in dataValue)) {\n            throw new Error('[SAN ERROR] ' + 'Invalid data `' + fullDataName + '` key `' + key + '` ' + 'supplied to `' + componentName + '`. ' + '(`' + key + '` is marked `required` in `DataTypes.exact`)');\n          }\n\n          checker(dataValue, key, componentName, fullDataName + '.' + key, secret);\n        }\n      }\n    });\n  } // #[end]\n\n  /* eslint-disable fecs-valid-var-jsdoc */\n\n\n  var DataTypes = {\n    array: createChainableChecker(),\n    object: createChainableChecker(),\n    func: createChainableChecker(),\n    string: createChainableChecker(),\n    number: createChainableChecker(),\n    bool: createChainableChecker(),\n    symbol: createChainableChecker(),\n    any: createChainableChecker,\n    arrayOf: createChainableChecker,\n    instanceOf: createChainableChecker,\n    shape: createChainableChecker,\n    oneOf: createChainableChecker,\n    oneOfType: createChainableChecker,\n    objectOf: createChainableChecker,\n    exact: createChainableChecker\n  }; // #[begin] error\n\n  DataTypes = {\n    any: createChainableChecker(),\n    // 类型检测\n    array: createPrimaryTypeChecker('array'),\n    object: createPrimaryTypeChecker('object'),\n    func: createPrimaryTypeChecker('function'),\n    string: createPrimaryTypeChecker('string'),\n    number: createPrimaryTypeChecker('number'),\n    bool: createPrimaryTypeChecker('boolean'),\n    symbol: createPrimaryTypeChecker('symbol'),\n    // 复合类型检测\n    arrayOf: createArrayOfChecker,\n    instanceOf: createInstanceOfChecker,\n    shape: createShapeChecker,\n    oneOf: createOneOfChecker,\n    oneOfType: createOneOfTypeChecker,\n    objectOf: createObjectOfChecker,\n    exact: createExactChecker\n  };\n  /* eslint-enable fecs-valid-var-jsdoc */\n  // #[end]\n  // module.exports = DataTypes;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 创建数据检测函数\n   */\n  // #[begin] error\n\n  /**\n   * 创建数据检测函数\n   *\n   * @param  {Object} dataTypes     数据格式\n   * @param  {string} componentName 组件名\n   * @return {Function}\n   */\n\n  function createDataTypesChecker(dataTypes, componentName) {\n    /**\n     * 校验 data 是否满足 data types 的格式\n     *\n     * @param  {*} data 数据\n     */\n    return function (data) {\n      for (var dataTypeName in dataTypes) {\n        /* istanbul ignore else  */\n        if (dataTypes.hasOwnProperty(dataTypeName)) {\n          var dataTypeChecker = dataTypes[dataTypeName];\n\n          if (typeof dataTypeChecker !== 'function') {\n            throw new Error('[SAN ERROR] ' + componentName + ':' + dataTypeName + ' is invalid; ' + 'it must be a function, usually from san.DataTypes');\n          }\n\n          dataTypeChecker(data, dataTypeName, componentName, dataTypeName);\n        }\n      }\n    };\n  } // #[end]\n  // module.exports = createDataTypesChecker;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 字符串源码读取类\n   */\n\n  /**\n   * 字符串源码读取类，用于模板字符串解析过程\n   *\n   * @class\n   * @param {string} source 要读取的字符串\n   */\n\n\n  function Walker(source) {\n    this.source = source;\n    this.len = this.source.length;\n    this.index = 0;\n  }\n  /**\n   * 读取下一个字符，返回下一个字符的 code\n   *\n   * @return {number}\n   */\n\n\n  Walker.prototype.nextCode = function () {\n    this.index++;\n    return this.source.charCodeAt(this.index);\n  };\n  /**\n   * 向前读取字符，直到遇到指定字符再停止\n   * 未指定字符时，当遇到第一个非空格、制表符的字符停止\n   *\n   * @param {number=} charCode 指定字符的code\n   * @return {boolean} 当指定字符时，返回是否碰到指定的字符\n   */\n\n\n  Walker.prototype.goUntil = function (charCode) {\n    var code;\n\n    while (this.index < this.len && (code = this.source.charCodeAt(this.index))) {\n      switch (code) {\n        case 32: // 空格 space\n\n        case 9: // 制表符 tab\n\n        case 13: // \\r\n\n        case 10:\n          // \\n\n          this.index++;\n          break;\n\n        default:\n          if (code === charCode) {\n            this.index++;\n            return 1;\n          }\n\n          return;\n      }\n    }\n  };\n  /**\n   * 向前读取符合规则的字符片段，并返回规则匹配结果\n   *\n   * @param {RegExp} reg 字符片段的正则表达式\n   * @param {boolean} isMatchStart 是否必须匹配当前位置\n   * @return {Array?}\n   */\n\n\n  Walker.prototype.match = function (reg, isMatchStart) {\n    reg.lastIndex = this.index;\n    var match = reg.exec(this.source);\n\n    if (match && (!isMatchStart || this.index === match.index)) {\n      this.index = reg.lastIndex;\n      return match;\n    }\n  }; // exports = module.exports = Walker;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 表达式类型\n   */\n\n  /**\n   * 表达式类型\n   *\n   * @const\n   * @type {Object}\n   */\n\n\n  var ExprType = {\n    STRING: 1,\n    NUMBER: 2,\n    BOOL: 3,\n    ACCESSOR: 4,\n    INTERP: 5,\n    CALL: 6,\n    TEXT: 7,\n    BINARY: 8,\n    UNARY: 9,\n    TERTIARY: 10,\n    OBJECT: 11,\n    ARRAY: 12,\n    NULL: 13\n  }; // exports = module.exports = ExprType;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 把 kebab case 字符串转换成 camel case\n   */\n\n  /**\n   * 把 kebab case 字符串转换成 camel case\n   *\n   * @param {string} source 源字符串\n   * @return {string}\n   */\n\n  function kebab2camel(source) {\n    return source.replace(/-+(.)/ig, function (match, alpha) {\n      return alpha.toUpperCase();\n    });\n  } // exports = module.exports = kebab2camel;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file bool属性表\n   */\n  // var splitStr2Obj = require('../util/split-str-2-obj');\n\n  /**\n   * bool属性表\n   *\n   * @type {Object}\n   */\n\n\n  var boolAttrs = splitStr2Obj('allowpaymentrequest,async,autofocus,autoplay,' + 'checked,controls,default,defer,disabled,formnovalidate,' + 'hidden,ismap,itemscope,loop,multiple,muted,nomodule,novalidate,' + 'open,readonly,required,reversed,selected,typemustmatch'); // exports = module.exports = boolAttrs;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取字符串\n   */\n  // var ExprType = require('./expr-type');\n\n  /**\n   * 读取字符串\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n  function readString(walker) {\n    var startCode = walker.source.charCodeAt(walker.index);\n    var value = \"\";\n    var charCode;\n\n    walkLoop: while (charCode = walker.nextCode()) {\n      switch (charCode) {\n        case 92:\n          // \\\n          charCode = walker.nextCode();\n\n          switch (charCode) {\n            case 117:\n              // \\u\n              value += String.fromCharCode(parseInt(walker.source.slice(walker.index + 1, walker.index + 5), 16));\n              walker.index += 4;\n              break;\n\n            case 120:\n              // \\x\n              value += String.fromCharCode(parseInt(walker.source.slice(walker.index + 1, walker.index + 3), 16));\n              walker.index += 2;\n              break;\n\n            case 98:\n              value += '\\b';\n              break;\n\n            case 102:\n              value += '\\f';\n              break;\n\n            case 110:\n              value += '\\n';\n              break;\n\n            case 114:\n              value += '\\r';\n              break;\n\n            case 116:\n              value += '\\t';\n              break;\n\n            case 118:\n              value += '\\v';\n              break;\n\n            default:\n              value += String.fromCharCode(charCode);\n          }\n\n          break;\n\n        case startCode:\n          walker.index++;\n          break walkLoop;\n\n        default:\n          value += String.fromCharCode(charCode);\n      }\n    }\n\n    return {\n      type: 1,\n      // 处理字符转义\n      value: value\n    };\n  } // exports = module.exports = readString;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取ident\n   */\n\n  /**\n   * 读取ident\n   * 这里的 ident 指标识符(identifier)，也就是通常意义上的变量名\n   * 这里默认的变量名规则为：由美元符号($)、数字、字母或者下划线(_)构成的字符串\n   *\n   * @inner\n   * @param {Walker} walker 源码读取对象\n   * @return {string}\n   */\n\n\n  function readIdent(walker) {\n    var match = walker.match(/\\s*([\\$0-9a-z_]+)/ig, 1); // #[begin] error\n\n    if (!match) {\n      throw new Error('[SAN FATAL] expect an ident: ' + walker.source.slice(walker.index));\n    } // #[end]\n\n\n    return match[1];\n  } // exports = module.exports = readIdent;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取三元表达式\n   */\n  // var ExprType = require('./expr-type');\n  // var readLogicalORExpr = require('./read-logical-or-expr');\n\n  /**\n   * 读取三元表达式\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n\n  function readTertiaryExpr(walker) {\n    var conditional = readLogicalORExpr(walker);\n    walker.goUntil();\n\n    if (walker.source.charCodeAt(walker.index) === 63) {\n      // ?\n      walker.index++;\n      var yesExpr = readTertiaryExpr(walker);\n      walker.goUntil();\n\n      if (walker.source.charCodeAt(walker.index) === 58) {\n        // :\n        walker.index++;\n        return {\n          type: 10,\n          segs: [conditional, yesExpr, readTertiaryExpr(walker)]\n        };\n      }\n    }\n\n    return conditional;\n  } // exports = module.exports = readTertiaryExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取访问表达式\n   */\n  // var ExprType = require('./expr-type');\n  // var readIdent = require('./read-ident');\n  // var readTertiaryExpr = require('./read-tertiary-expr');\n\n  /**\n   * 读取访问表达式\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n\n  function readAccessor(walker) {\n    var firstSeg = readIdent(walker);\n\n    switch (firstSeg) {\n      case 'true':\n      case 'false':\n        return {\n          type: 3,\n          value: firstSeg === 'true'\n        };\n\n      case 'null':\n        return {\n          type: 13\n        };\n    }\n\n    var result = {\n      type: 4,\n      paths: [{\n        type: 1,\n        value: firstSeg\n      }]\n    };\n    /* eslint-disable no-constant-condition */\n\n    accessorLoop: while (1) {\n      /* eslint-enable no-constant-condition */\n      switch (walker.source.charCodeAt(walker.index)) {\n        case 46:\n          // .\n          walker.index++; // ident as string\n\n          result.paths.push({\n            type: 1,\n            value: readIdent(walker)\n          });\n          break;\n\n        case 91:\n          // [\n          walker.index++;\n          result.paths.push(readTertiaryExpr(walker));\n          walker.goUntil(93); // ]\n\n          break;\n\n        default:\n          break accessorLoop;\n      }\n    }\n\n    return result;\n  } // exports = module.exports = readAccessor;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取调用\n   */\n  // var ExprType = require('./expr-type');\n  // var readAccessor = require('./read-accessor');\n  // var readTertiaryExpr = require('./read-tertiary-expr');\n\n  /**\n   * 读取调用\n   *\n   * @param {Walker} walker 源码读取对象\n   * @param {Array=} defaultArgs 默认参数\n   * @return {Object}\n   */\n\n\n  function readCall(walker, defaultArgs) {\n    walker.goUntil();\n    var result = readAccessor(walker);\n    var args;\n\n    if (walker.goUntil(40)) {\n      // (\n      args = [];\n\n      while (!walker.goUntil(41)) {\n        // )\n        args.push(readTertiaryExpr(walker));\n        walker.goUntil(44); // ,\n      }\n    } else if (defaultArgs) {\n      args = defaultArgs;\n    }\n\n    if (args) {\n      result = {\n        type: 6,\n        name: result,\n        args: args\n      };\n    }\n\n    return result;\n  } // exports = module.exports = readCall;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取括号表达式\n   */\n  // var readTertiaryExpr = require('./read-tertiary-expr');\n\n  /**\n   * 读取括号表达式\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n\n  function readParenthesizedExpr(walker) {\n    walker.index++;\n    var expr = readTertiaryExpr(walker);\n    walker.goUntil(41); // )\n\n    expr.parenthesized = true;\n    return expr;\n  } // exports = module.exports = readParenthesizedExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取一元表达式\n   */\n  // var ExprType = require('./expr-type');\n  // var readString = require('./read-string');\n  // var readCall = require('./read-call');\n  // var readParenthesizedExpr = require('./read-parenthesized-expr');\n  // var readTertiaryExpr = require('./read-tertiary-expr');\n\n\n  function postUnaryExpr(expr, operator) {\n    switch (operator) {\n      case 33:\n        var value;\n\n        switch (expr.type) {\n          case 2:\n          case 1:\n          case 3:\n            value = !expr.value;\n            break;\n\n          case 12:\n          case 11:\n            value = false;\n            break;\n\n          case 13:\n            value = true;\n            break;\n        }\n\n        if (value != null) {\n          return {\n            type: 3,\n            value: value\n          };\n        }\n\n        break;\n\n      case 43:\n        switch (expr.type) {\n          case 2:\n          case 1:\n          case 3:\n            return {\n              type: 2,\n              value: +expr.value\n            };\n        }\n\n        break;\n\n      case 45:\n        switch (expr.type) {\n          case 2:\n          case 1:\n          case 3:\n            return {\n              type: 2,\n              value: -expr.value\n            };\n        }\n\n        break;\n    }\n\n    return {\n      type: 9,\n      expr: expr,\n      operator: operator\n    };\n  }\n  /**\n   * 读取一元表达式\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n\n  function readUnaryExpr(walker) {\n    walker.goUntil();\n    var currentCode = walker.source.charCodeAt(walker.index);\n\n    switch (currentCode) {\n      case 33: // !\n\n      case 43: // +\n\n      case 45:\n        // -\n        walker.index++;\n        return postUnaryExpr(readUnaryExpr(walker), currentCode);\n\n      case 34: // \"\n\n      case 39:\n        // '\n        return readString(walker);\n\n      case 48: // number\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        return {\n          type: 2,\n          value: +walker.match(/[0-9]+(\\.[0-9]+)?/g, 1)[0]\n        };\n\n      case 40:\n        // (\n        return readParenthesizedExpr(walker);\n      // array literal\n\n      case 91:\n        // [\n        walker.index++;\n        var arrItems = [];\n\n        while (!walker.goUntil(93)) {\n          // ]\n          var item = {};\n          arrItems.push(item);\n\n          if (walker.source.charCodeAt(walker.index) === 46 && walker.match(/\\.\\.\\.\\s*/g)) {\n            item.spread = true;\n          }\n\n          item.expr = readTertiaryExpr(walker);\n          walker.goUntil(44); // ,\n        }\n\n        return {\n          type: 12,\n          items: arrItems\n        };\n      // object literal\n\n      case 123:\n        // {\n        walker.index++;\n        var objItems = [];\n\n        while (!walker.goUntil(125)) {\n          // }\n          var item = {};\n          objItems.push(item);\n\n          if (walker.source.charCodeAt(walker.index) === 46 && walker.match(/\\.\\.\\.\\s*/g)) {\n            item.spread = true;\n            item.expr = readTertiaryExpr(walker);\n          } else {\n            // #[begin] error\n            var walkerIndexBeforeName = walker.index; // #[end]\n\n            item.name = readUnaryExpr(walker); // #[begin] error\n\n            if (item.name.type > 4) {\n              throw new Error('[SAN FATAL] unexpect object name: ' + walker.source.slice(walkerIndexBeforeName, walker.index));\n            } // #[end]\n\n\n            if (walker.goUntil(58)) {\n              // :\n              item.expr = readTertiaryExpr(walker);\n            } else {\n              item.expr = item.name;\n            }\n\n            if (item.name.type === 4) {\n              item.name = item.name.paths[0];\n            }\n          }\n\n          walker.goUntil(44); // ,\n        }\n\n        return {\n          type: 11,\n          items: objItems\n        };\n    }\n\n    return readCall(walker);\n  } // exports = module.exports = readUnaryExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取乘法表达式\n   */\n  // var ExprType = require('./expr-type');\n  // var readUnaryExpr = require('./read-unary-expr');\n\n  /**\n   * 读取乘法表达式\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n\n  function readMultiplicativeExpr(walker) {\n    var expr = readUnaryExpr(walker);\n\n    while (1) {\n      walker.goUntil();\n      var code = walker.source.charCodeAt(walker.index);\n\n      switch (code) {\n        case 37: // %\n\n        case 42: // *\n\n        case 47:\n          // /\n          walker.index++;\n          expr = {\n            type: 8,\n            operator: code,\n            segs: [expr, readUnaryExpr(walker)]\n          };\n          continue;\n      }\n\n      break;\n    }\n\n    return expr;\n  } // exports = module.exports = readMultiplicativeExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取加法表达式\n   */\n  // var ExprType = require('./expr-type');\n  // var readMultiplicativeExpr = require('./read-multiplicative-expr');\n\n  /**\n   * 读取加法表达式\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n\n  function readAdditiveExpr(walker) {\n    var expr = readMultiplicativeExpr(walker);\n\n    while (1) {\n      walker.goUntil();\n      var code = walker.source.charCodeAt(walker.index);\n\n      switch (code) {\n        case 43: // +\n\n        case 45:\n          // -\n          walker.index++;\n          expr = {\n            type: 8,\n            operator: code,\n            segs: [expr, readMultiplicativeExpr(walker)]\n          };\n          continue;\n      }\n\n      break;\n    }\n\n    return expr;\n  } // exports = module.exports = readAdditiveExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取关系判断表达式\n   */\n  // var ExprType = require('./expr-type');\n  // var readAdditiveExpr = require('./read-additive-expr');\n\n  /**\n   * 读取关系判断表达式\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n\n  function readRelationalExpr(walker) {\n    var expr = readAdditiveExpr(walker);\n    walker.goUntil();\n    var code = walker.source.charCodeAt(walker.index);\n\n    switch (code) {\n      case 60: // <\n\n      case 62:\n        // >\n        if (walker.nextCode() === 61) {\n          code += 61;\n          walker.index++;\n        }\n\n        return {\n          type: 8,\n          operator: code,\n          segs: [expr, readAdditiveExpr(walker)]\n        };\n    }\n\n    return expr;\n  } // exports = module.exports = readRelationalExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取相等比对表达式\n   */\n  // var ExprType = require('./expr-type');\n  // var readRelationalExpr = require('./read-relational-expr');\n\n  /**\n   * 读取相等比对表达式\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n\n  function readEqualityExpr(walker) {\n    var expr = readRelationalExpr(walker);\n    walker.goUntil();\n    var code = walker.source.charCodeAt(walker.index);\n\n    switch (code) {\n      case 61: // =\n\n      case 33:\n        // !\n        if (walker.nextCode() === 61) {\n          code += 61;\n\n          if (walker.nextCode() === 61) {\n            code += 61;\n            walker.index++;\n          }\n\n          return {\n            type: 8,\n            operator: code,\n            segs: [expr, readRelationalExpr(walker)]\n          };\n        }\n\n        walker.index--;\n    }\n\n    return expr;\n  } // exports = module.exports = readEqualityExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取逻辑与表达式\n   */\n  // var ExprType = require('./expr-type');\n  // var readEqualityExpr = require('./read-equality-expr');\n\n  /**\n   * 读取逻辑与表达式\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n\n  function readLogicalANDExpr(walker) {\n    var expr = readEqualityExpr(walker);\n    walker.goUntil();\n\n    if (walker.source.charCodeAt(walker.index) === 38) {\n      // &\n      if (walker.nextCode() === 38) {\n        walker.index++;\n        return {\n          type: 8,\n          operator: 76,\n          segs: [expr, readLogicalANDExpr(walker)]\n        };\n      }\n\n      walker.index--;\n    }\n\n    return expr;\n  } // exports = module.exports = readLogicalANDExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 读取逻辑或表达式\n   */\n  // var ExprType = require('./expr-type');\n  // var readLogicalANDExpr = require('./read-logical-and-expr');\n\n  /**\n   * 读取逻辑或表达式\n   *\n   * @param {Walker} walker 源码读取对象\n   * @return {Object}\n   */\n\n\n  function readLogicalORExpr(walker) {\n    var expr = readLogicalANDExpr(walker);\n    walker.goUntil();\n\n    if (walker.source.charCodeAt(walker.index) === 124) {\n      // |\n      if (walker.nextCode() === 124) {\n        walker.index++;\n        return {\n          type: 8,\n          operator: 248,\n          segs: [expr, readLogicalORExpr(walker)]\n        };\n      }\n\n      walker.index--;\n    }\n\n    return expr;\n  } // exports = module.exports = readLogicalORExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 解析表达式\n   */\n  // var Walker = require('./walker');\n  // var readTertiaryExpr = require('./read-tertiary-expr');\n\n  /**\n   * 解析表达式\n   *\n   * @param {string} source 源码\n   * @return {Object}\n   */\n\n\n  function parseExpr(source) {\n    if (!source) {\n      return;\n    }\n\n    if (_typeof(source) === 'object' && source.type) {\n      return source;\n    }\n\n    return readTertiaryExpr(new Walker(source));\n  } // exports = module.exports = parseExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 解析调用\n   */\n  // var Walker = require('./walker');\n  // var ExprType = require('./expr-type');\n  // var readCall = require('./read-call');\n\n  /**\n   * 解析调用\n   *\n   * @param {string} source 源码\n   * @param {Array=} defaultArgs 默认参数\n   * @return {Object}\n   */\n\n\n  function parseCall(source, defaultArgs) {\n    var expr = readCall(new Walker(source), defaultArgs);\n\n    if (expr.type !== 6) {\n      expr = {\n        type: 6,\n        name: expr,\n        args: defaultArgs || []\n      };\n    }\n\n    return expr;\n  } // exports = module.exports = parseCall;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 解码 HTML 字符实体\n   */\n\n\n  var ENTITY_DECODE_MAP = {\n    lt: '<',\n    gt: '>',\n    nbsp: \"\\xA0\",\n    quot: '\\\"',\n    emsp: \"\\u2003\",\n    ensp: \"\\u2002\",\n    thinsp: \"\\u2009\",\n    copy: '\\xa9',\n    reg: '\\xae',\n    zwnj: \"\\u200C\",\n    zwj: \"\\u200D\",\n    amp: '&'\n  };\n  /**\n   * 解码 HTML 字符实体\n   *\n   * @param {string} source 要解码的字符串\n   * @return {string}\n   */\n\n  function decodeHTMLEntity(source) {\n    return source.replace(/&#(x[0-9a-f]+|[0-9]+);/g, function (match, code) {\n      if (code.charCodeAt(0) === 120) {\n        // x\n        return String.fromCharCode(parseInt(code.slice(1), 16));\n      }\n\n      return String.fromCharCode(+code);\n    }).replace(/&([a-z]+);/ig, function (match, code) {\n      return ENTITY_DECODE_MAP[code] || match;\n    });\n  } // exports = module.exports = decodeHTMLEntity;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 解析文本\n   */\n  // var Walker = require('./walker');\n  // var readTertiaryExpr = require('./read-tertiary-expr');\n  // var ExprType = require('./expr-type');\n  // var readCall = require('./read-call');\n  // var decodeHTMLEntity = require('../util/decode-html-entity');\n\n  /**\n   * 解析文本\n   *\n   * @param {string} source 源码\n   * @param {Array?} delimiters 分隔符。默认为 ['{{', '}}']\n   * @return {Object}\n   */\n\n\n  function parseText(source, delimiters) {\n    delimiters = delimiters || ['{{', '}}'];\n    var walker = new Walker(source);\n    var beforeIndex = 0;\n    var segs = [];\n    var original;\n    var delimStart = delimiters[0];\n    var delimStartLen = delimStart.length;\n    var delimEnd = delimiters[1];\n    var delimEndLen = delimEnd.length;\n\n    while (1) {\n      var delimStartIndex = walker.source.indexOf(delimStart, walker.index);\n      var delimEndIndex = walker.source.indexOf(delimEnd, walker.index);\n\n      if (delimStartIndex === -1 || delimEndIndex < delimStartIndex) {\n        break;\n      } // pushStringToSeg\n\n\n      var strValue = walker.source.slice(beforeIndex, delimStartIndex);\n      strValue && segs.push({\n        type: 1,\n        value: decodeHTMLEntity(strValue)\n      }); // pushInterpToSeg\n\n      if (walker.source.indexOf(delimEnd, delimEndIndex + 1) === delimEndIndex + 1) {\n        delimEndIndex++;\n      }\n\n      var interpWalker = new Walker(walker.source.slice(delimStartIndex + delimStartLen, delimEndIndex));\n      var interp = {\n        type: 5,\n        expr: readTertiaryExpr(interpWalker),\n        filters: []\n      };\n\n      while (interpWalker.goUntil(124)) {\n        // |\n        var callExpr = readCall(interpWalker, []);\n\n        switch (callExpr.name.paths[0].value) {\n          case 'html':\n            break;\n\n          case 'raw':\n            interp.original = 1;\n            break;\n\n          default:\n            interp.filters.push(callExpr);\n        }\n      }\n\n      original = original || interp.original;\n      segs.push(interp);\n      beforeIndex = walker.index = delimEndIndex + delimEndLen;\n    } // pushStringToSeg\n\n\n    var strValue = walker.source.slice(beforeIndex);\n    strValue && segs.push({\n      type: 1,\n      value: decodeHTMLEntity(strValue)\n    });\n\n    switch (segs.length) {\n      case 0:\n        return {\n          type: 1,\n          value: ''\n        };\n\n      case 1:\n        if (segs[0].type === 5 && segs[0].filters.length === 0 && !segs[0].original) {\n          return segs[0].expr;\n        }\n\n        return segs[0];\n    }\n\n    return original ? {\n      type: 7,\n      segs: segs,\n      original: 1\n    } : {\n      type: 7,\n      segs: segs\n    };\n  } // exports = module.exports = parseText;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 解析指令\n   */\n  // var Walker = require('./walker');\n  // var parseExpr = require('./parse-expr');\n  // var parseCall = require('./parse-call');\n  // var parseText = require('./parse-text');\n  // var readAccessor = require('./read-accessor');\n  // var readUnaryExpr = require('./read-unary-expr');\n\n  /**\n   * 解析指令\n   *\n   * @param {string} name 指令名称\n   * @param {string} value 指令值\n   * @param {Object} options 解析参数\n   * @param {Array?} options.delimiters 插值分隔符列表\n   */\n\n\n  function parseDirective(name, value, options) {\n    switch (name) {\n      case 'is':\n      case 'show':\n      case 'html':\n      case 'bind':\n      case 'if':\n      case 'elif':\n        return {\n          value: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        };\n\n      case 'else':\n        return {\n          value: {}\n        };\n\n      case 'transition':\n        return {\n          value: parseCall(value)\n        };\n\n      case 'ref':\n        return {\n          value: parseText(value, options.delimiters)\n        };\n\n      case 'for':\n        var walker = new Walker(value);\n        var match = walker.match(/^\\s*([$0-9a-z_]+)(\\s*,\\s*([$0-9a-z_]+))?\\s+in\\s+/ig, 1);\n\n        if (match) {\n          var directive = {\n            item: match[1],\n            value: readUnaryExpr(walker)\n          };\n\n          if (match[3]) {\n            directive.index = match[3];\n          }\n\n          if (walker.match(/\\s*trackby\\s+/ig, 1)) {\n            var start = walker.index;\n            directive.trackBy = readAccessor(walker);\n            directive.trackByRaw = walker.source.slice(start, walker.index);\n          }\n\n          return directive;\n        } // #[begin] error\n\n\n        throw new Error('[SAN FATAL] for syntax error: ' + value);\n      // #[end]\n    }\n  } // exports = module.exports = parseDirective;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 解析抽象节点属性\n   */\n  // var each = require('../util/each');\n  // var kebab2camel = require('../util/kebab2camel');\n  // var boolAttrs = require('../browser/bool-attrs');\n  // var ExprType = require('./expr-type');\n  // var parseExpr = require('./parse-expr');\n  // var parseCall = require('./parse-call');\n  // var parseText = require('./parse-text');\n  // var parseDirective = require('./parse-directive');\n\n  /**\n   * 解析抽象节点属性\n   *\n   * @param {ANode} aNode 抽象节点\n   * @param {string} name 属性名称\n   * @param {string} value 属性值\n   * @param {Object} options 解析参数\n   * @param {Array?} options.delimiters 插值分隔符列表\n   */\n\n\n  function integrateAttr(aNode, name, value, options) {\n    var prefixIndex = name.indexOf('-');\n    var realName;\n    var prefix;\n\n    if (prefixIndex > 0) {\n      prefix = name.slice(0, prefixIndex);\n      realName = name.slice(prefixIndex + 1);\n    }\n\n    switch (prefix) {\n      case 'on':\n        var event = {\n          name: realName,\n          modifier: {}\n        };\n        aNode.events.push(event);\n        var colonIndex;\n\n        while ((colonIndex = value.indexOf(':')) > 0) {\n          var modifier = value.slice(0, colonIndex); // eventHandler(\"dd:aa\") 这种情况不能算modifier，需要辨识\n\n          if (!/^[a-z]+$/i.test(modifier)) {\n            break;\n          }\n\n          event.modifier[modifier] = true;\n          value = value.slice(colonIndex + 1);\n        }\n\n        event.expr = parseCall(value, [{\n          type: 4,\n          paths: [{\n            type: 1,\n            value: '$event'\n          }]\n        }]);\n        break;\n\n      case 'san':\n      case 's':\n        if (realName === 'else-if') {\n          realName = 'elif';\n        }\n\n        var directiveValue = parseDirective(realName, value, options);\n        directiveValue && (aNode.directives[realName] = directiveValue);\n        break;\n\n      case 'var':\n        if (!aNode.vars) {\n          aNode.vars = [];\n        }\n\n        realName = kebab2camel(realName);\n        aNode.vars.push({\n          name: realName,\n          expr: parseExpr(value.replace(/(^\\{\\{|\\}\\}$)/g, ''))\n        });\n        break;\n\n      default:\n        if (prefix === 'prop') {\n          name = realName;\n        } // parse two way binding, e.g. value=\"{=ident=}\"\n\n\n        if (value && value.indexOf('{=') === 0 && value.slice(-2) === '=}') {\n          aNode.props.push({\n            name: name,\n            expr: parseExpr(value.slice(2, -2)),\n            x: 1\n          });\n          return;\n        }\n\n        var expr = parseText(value || '', options.delimiters);\n\n        if (expr.value === '') {\n          if (boolAttrs[name]) {\n            expr = {\n              type: 3,\n              value: true\n            };\n          }\n        } else {\n          switch (name) {\n            case 'class':\n            case 'style':\n              switch (expr.type) {\n                case 7:\n                  for (var i = 0, l = expr.segs.length; i < l; i++) {\n                    if (expr.segs[i].type === 5) {\n                      expr.segs[i].filters.push({\n                        type: 6,\n                        name: {\n                          type: 4,\n                          paths: [{\n                            type: 1,\n                            value: '_' + name\n                          }]\n                        },\n                        args: []\n                      });\n                    }\n                  }\n\n                  break;\n\n                case 5:\n                  expr.filters.push({\n                    type: 6,\n                    name: {\n                      type: 4,\n                      paths: [{\n                        type: 1,\n                        value: '_' + name\n                      }]\n                    },\n                    args: []\n                  });\n                  break;\n\n                default:\n                  if (expr.type !== 1) {\n                    expr = {\n                      type: 5,\n                      expr: expr,\n                      filters: [{\n                        type: 6,\n                        name: {\n                          type: 4,\n                          paths: [{\n                            type: 1,\n                            value: '_' + name\n                          }]\n                        },\n                        args: []\n                      }]\n                    };\n                  }\n\n              }\n\n          }\n        }\n\n        aNode.props.push(value != null ? {\n          name: name,\n          expr: expr\n        } : {\n          name: name,\n          expr: expr,\n          noValue: 1\n        });\n    }\n  } // exports = module.exports = integrateAttr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 解析模板\n   */\n  // var Walker = require('./walker');\n  // var ExprType = require('./expr-type');\n  // var integrateAttr = require('./integrate-attr');\n  // var parseText = require('./parse-text');\n  // var svgTags = require('../browser/svg-tags');\n  // var autoCloseTags = require('../browser/auto-close-tags');\n  // #[begin] error\n\n\n  function getXPath(stack, currentTagName) {\n    var path = ['ROOT'];\n\n    for (var i = 1, len = stack.length; i < len; i++) {\n      path.push(stack[i].tagName);\n    }\n\n    if (currentTagName) {\n      path.push(currentTagName);\n    }\n\n    return path.join('>');\n  } // #[end]\n\n  /* eslint-disable fecs-max-statements */\n\n  /**\n   * 解析 template\n   *\n   * @param {string} source template源码\n   * @param {Object?} options 解析参数\n   * @param {string?} options.trimWhitespace 空白文本的处理策略。none|blank|all\n   * @param {Array?} options.delimiters 插值分隔符列表\n   * @return {ANode}\n   */\n\n\n  function parseTemplate(source, options) {\n    options = options || {};\n    options.trimWhitespace = options.trimWhitespace || 'none';\n    var rootNode = {\n      directives: {},\n      props: [],\n      events: [],\n      children: []\n    };\n\n    if (typeof source !== 'string') {\n      return rootNode;\n    }\n\n    source = source.replace(/<!--([\\s\\S]*?)-->/mg, '');\n    var walker = new Walker(source);\n    walker.goUntil();\n    var tagReg = /<(\\/)?([a-z][a-z0-9-]*)\\s*/ig;\n    var attrReg = /([-:0-9a-z\\[\\]_]+)(\\s*=\\s*(([^'\"<>\\s]+)|\"([^\"]*?)\"|'([^']*?)'))?\\s*/ig;\n    var tagMatch;\n    var currentNode = rootNode;\n    var stack = [rootNode];\n    var stackIndex = 0;\n    var beforeLastIndex = walker.index;\n\n    while ((tagMatch = walker.match(tagReg)) != null) {\n      var tagMatchStart = walker.index - tagMatch[0].length;\n      var tagEnd = tagMatch[1];\n      var tagName = tagMatch[2];\n\n      if (!svgTags[tagName]) {\n        tagName = tagName.toLowerCase();\n      } // 62: >\n      // 47: /\n      // 处理 </xxxx >\n\n\n      if (tagEnd) {\n        if (walker.source.charCodeAt(walker.index) === 62) {\n          // 满足关闭标签的条件时，关闭标签\n          // 向上查找到对应标签，找不到时忽略关闭\n          var closeIndex = stackIndex; // #[begin] error\n          // 如果正在闭合一个自闭合的标签，例如 </input>，报错\n\n          if (autoCloseTags[tagName]) {\n            throw new Error('' + '[SAN ERROR] ' + getXPath(stack, tagName) + ' is a `auto closed` tag, ' + 'so it cannot be closed with </' + tagName + '>');\n          } // 如果关闭的 tag 和当前打开的不一致，报错\n\n\n          if (stack[closeIndex].tagName !== tagName // 这里要把 table 自动添加 tbody 的情况给去掉\n          && !(tagName === 'table' && stack[closeIndex].tagName === 'tbody')) {\n            throw new Error('[SAN ERROR] ' + getXPath(stack) + ' is closed with ' + tagName);\n          } // #[end]\n\n\n          pushTextNode(source.slice(beforeLastIndex, tagMatchStart));\n\n          while (closeIndex > 0 && stack[closeIndex].tagName !== tagName) {\n            closeIndex--;\n          }\n\n          if (closeIndex > 0) {\n            stackIndex = closeIndex - 1;\n            currentNode = stack[stackIndex];\n          }\n\n          walker.index++;\n        } // #[begin] error\n        else {\n            // 处理 </xxx 非正常闭合标签\n            // 如果闭合标签时，匹配后的下一个字符是 <，即下一个标签的开始，那么当前闭合标签未闭合\n            if (walker.source.charCodeAt(walker.index) === 60) {\n              throw new Error('' + '[SAN ERROR] ' + getXPath(stack) + '\\'s close tag not closed');\n            } // 闭合标签有属性\n\n\n            throw new Error('' + '[SAN ERROR] ' + getXPath(stack) + '\\'s close tag has attributes');\n          } // #[end]\n\n      } else {\n        var aElement = {\n          directives: {},\n          props: [],\n          events: [],\n          children: [],\n          tagName: tagName\n        };\n        var tagClose = autoCloseTags[tagName]; // 解析 attributes\n\n        /* eslint-disable no-constant-condition */\n\n        while (1) {\n          /* eslint-enable no-constant-condition */\n          var nextCharCode = walker.source.charCodeAt(walker.index); // 标签结束时跳出 attributes 读取\n          // 标签可能直接结束或闭合结束\n\n          if (nextCharCode === 62) {\n            walker.index++;\n            break;\n          } // 遇到 /> 按闭合处理\n\n\n          if (nextCharCode === 47 && walker.source.charCodeAt(walker.index + 1) === 62) {\n            walker.index += 2;\n            tagClose = 1;\n            break;\n          } // template 串结束了\n          // 这时候，说明这个读取周期的所有内容，都是text\n\n\n          if (!nextCharCode) {\n            pushTextNode(walker.source.slice(beforeLastIndex));\n            aElement = null;\n            break;\n          } // #[begin] error\n          // 在处理一个 open 标签时，如果遇到了 <， 即下一个标签的开始，则当前标签未能正常闭合，报错\n\n\n          if (nextCharCode === 60) {\n            throw new Error('[SAN ERROR] ' + getXPath(stack, tagName) + ' is not closed');\n          } // #[end]\n          // 读取 attribute\n\n\n          var attrMatch = walker.match(attrReg, 1);\n\n          if (attrMatch) {\n            integrateAttr(aElement, attrMatch[1], attrMatch[2] ? attrMatch[4] || (attrMatch[5] == null ? attrMatch[6] : attrMatch[5]) : void 0, options);\n          } else {\n            pushTextNode(walker.source.slice(beforeLastIndex, walker.index));\n            aElement = null;\n            break;\n          }\n        }\n\n        if (aElement) {\n          pushTextNode(source.slice(beforeLastIndex, tagMatchStart)); // handle show directive, append expr to style prop\n\n          if (aElement.directives.show) {\n            // find style prop\n            var styleProp = null;\n            var propsLen = aElement.props.length;\n\n            while (propsLen--) {\n              if (aElement.props[propsLen].name === 'style') {\n                styleProp = aElement.props[propsLen];\n                break;\n              }\n            }\n\n            var showStyleExpr = {\n              type: 10,\n              segs: [aElement.directives.show.value, {\n                type: 1,\n                value: ''\n              }, {\n                type: 1,\n                value: ';display:none;'\n              }]\n            };\n\n            if (styleProp) {\n              if (styleProp.expr.type === 7) {\n                styleProp.expr.segs.push(showStyleExpr);\n              } else {\n                aElement.props[propsLen].expr = {\n                  type: 7,\n                  segs: [styleProp.expr, showStyleExpr]\n                };\n              }\n            } else {\n              aElement.props.push({\n                name: 'style',\n                expr: showStyleExpr\n              });\n            }\n          } // match if directive for else/elif directive\n\n\n          var elseDirective = aElement.directives['else'] // eslint-disable-line dot-notation\n          || aElement.directives.elif;\n\n          if (elseDirective) {\n            var parentChildrenLen = currentNode.children.length;\n            var ifANode = null;\n\n            while (parentChildrenLen--) {\n              var parentChild = currentNode.children[parentChildrenLen];\n\n              if (parentChild.textExpr) {\n                currentNode.children.splice(parentChildrenLen, 1);\n                continue;\n              }\n\n              ifANode = parentChild;\n              break;\n            } // #[begin] error\n\n\n            if (!ifANode || !parentChild.directives['if']) {\n              // eslint-disable-line dot-notation\n              throw new Error('[SAN FATEL] else not match if.');\n            } // #[end]\n\n\n            if (ifANode) {\n              ifANode.elses = ifANode.elses || [];\n              ifANode.elses.push(aElement);\n            }\n          } else {\n            if (aElement.tagName === 'tr' && currentNode.tagName === 'table') {\n              var tbodyNode = {\n                directives: {},\n                props: [],\n                events: [],\n                children: [],\n                tagName: 'tbody'\n              };\n              currentNode.children.push(tbodyNode);\n              currentNode = tbodyNode;\n              stack[++stackIndex] = tbodyNode;\n            }\n\n            currentNode.children.push(aElement);\n          }\n\n          if (!tagClose) {\n            currentNode = aElement;\n            stack[++stackIndex] = aElement;\n          }\n        }\n      }\n\n      beforeLastIndex = walker.index;\n    }\n\n    pushTextNode(walker.source.slice(beforeLastIndex));\n    return rootNode;\n    /**\n     * 在读取栈中添加文本节点\n     *\n     * @inner\n     * @param {string} text 文本内容\n     */\n\n    function pushTextNode(text) {\n      switch (options.trimWhitespace) {\n        case 'blank':\n          if (/^\\s+$/.test(text)) {\n            text = null;\n          }\n\n          break;\n\n        case 'all':\n          text = text.replace(/(^\\s+|\\s+$)/g, '');\n          break;\n      }\n\n      if (text) {\n        var expr = parseText(text, options.delimiters);\n        var lastChild = currentNode.children[currentNode.children.length - 1];\n        var textExpr = lastChild && lastChild.textExpr;\n\n        if (textExpr) {\n          if (textExpr.segs) {\n            textExpr.segs = textExpr.segs.concat(expr.segs || expr);\n          } else if (textExpr.value != null && expr.value != null) {\n            textExpr.value = textExpr.value + expr.value;\n          } else {\n            lastChild.textExpr = {\n              type: 7,\n              segs: [textExpr].concat(expr.segs || expr)\n            };\n          }\n        } else {\n          currentNode.children.push({\n            textExpr: expr\n          });\n        }\n      }\n    }\n  }\n  /* eslint-enable fecs-max-statements */\n  // exports = module.exports = parseTemplate;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 默认filter\n   */\n\n  /* eslint-disable fecs-camelcase */\n\n\n  function defaultStyleFilter(source) {\n    if (_typeof(source) === 'object') {\n      var result = '';\n\n      for (var key in source) {\n        /* istanbul ignore else  */\n        if (source.hasOwnProperty(key)) {\n          result += key + ':' + source[key] + ';';\n        }\n      }\n\n      return result;\n    }\n\n    return source;\n  }\n  /**\n   * 默认filter\n   *\n   * @const\n   * @type {Object}\n   */\n\n\n  var DEFAULT_FILTERS = {\n    /**\n     * URL编码filter\n     *\n     * @param {string} source 源串\n     * @return {string} 替换结果串\n     */\n    url: encodeURIComponent,\n    _class: function _class(source) {\n      if (source instanceof Array) {\n        return source.join(' ');\n      }\n\n      return source;\n    },\n    _style: defaultStyleFilter,\n    _xclass: function _xclass(outer, inner) {\n      if (outer instanceof Array) {\n        outer = outer.join(' ');\n      }\n\n      if (outer) {\n        if (inner) {\n          return inner + ' ' + outer;\n        }\n\n        return outer;\n      }\n\n      return inner;\n    },\n    _xstyle: function _xstyle(outer, inner) {\n      outer = outer && defaultStyleFilter(outer);\n\n      if (outer) {\n        if (inner) {\n          return inner + ';' + outer;\n        }\n\n        return outer;\n      }\n\n      return inner;\n    }\n  };\n  /* eslint-enable fecs-camelcase */\n  // exports = module.exports = DEFAULT_FILTERS;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 表达式计算\n   */\n  // var ExprType = require('../parser/expr-type');\n  // var extend = require('../util/extend');\n  // var DEFAULT_FILTERS = require('./default-filters');\n  // var evalArgs = require('./eval-args');\n\n  /**\n   * 计算表达式的值\n   *\n   * @param {Object} expr 表达式对象\n   * @param {Data} data 数据容器对象\n   * @param {Component=} owner 所属组件环境\n   * @return {*}\n   */\n\n  function evalExpr(expr, data, owner) {\n    if (expr.value != null) {\n      return expr.value;\n    }\n\n    var value;\n\n    switch (expr.type) {\n      case 13:\n        return null;\n\n      case 9:\n        value = evalExpr(expr.expr, data, owner);\n\n        switch (expr.operator) {\n          case 33:\n            value = !value;\n            break;\n\n          case 43:\n            value = +value;\n            break;\n\n          case 45:\n            value = 0 - value;\n            break;\n        }\n\n        return value;\n\n      case 8:\n        value = evalExpr(expr.segs[0], data, owner);\n        var rightValue = evalExpr(expr.segs[1], data, owner);\n        /* eslint-disable eqeqeq */\n\n        switch (expr.operator) {\n          case 37:\n            value = value % rightValue;\n            break;\n\n          case 43:\n            value = value + rightValue;\n            break;\n\n          case 45:\n            value = value - rightValue;\n            break;\n\n          case 42:\n            value = value * rightValue;\n            break;\n\n          case 47:\n            value = value / rightValue;\n            break;\n\n          case 60:\n            value = value < rightValue;\n            break;\n\n          case 62:\n            value = value > rightValue;\n            break;\n\n          case 76:\n            value = value && rightValue;\n            break;\n\n          case 94:\n            value = value != rightValue;\n            break;\n\n          case 121:\n            value = value <= rightValue;\n            break;\n\n          case 122:\n            value = value == rightValue;\n            break;\n\n          case 123:\n            value = value >= rightValue;\n            break;\n\n          case 155:\n            value = value !== rightValue;\n            break;\n\n          case 183:\n            value = value === rightValue;\n            break;\n\n          case 248:\n            value = value || rightValue;\n            break;\n        }\n        /* eslint-enable eqeqeq */\n\n\n        return value;\n\n      case 10:\n        return evalExpr(expr.segs[evalExpr(expr.segs[0], data, owner) ? 1 : 2], data, owner);\n\n      case 12:\n        value = [];\n\n        for (var i = 0, l = expr.items.length; i < l; i++) {\n          var item = expr.items[i];\n          var itemValue = evalExpr(item.expr, data, owner);\n\n          if (item.spread) {\n            itemValue && (value = value.concat(itemValue));\n          } else {\n            value.push(itemValue);\n          }\n        }\n\n        return value;\n\n      case 11:\n        value = {};\n\n        for (var i = 0, l = expr.items.length; i < l; i++) {\n          var item = expr.items[i];\n          var itemValue = evalExpr(item.expr, data, owner);\n\n          if (item.spread) {\n            itemValue && extend(value, itemValue);\n          } else {\n            value[evalExpr(item.name, data, owner)] = itemValue;\n          }\n        }\n\n        return value;\n\n      case 4:\n        return data.get(expr);\n\n      case 5:\n        value = evalExpr(expr.expr, data, owner);\n\n        if (owner) {\n          for (var i = 0, l = expr.filters.length; i < l; i++) {\n            var filter = expr.filters[i];\n            var filterName = filter.name.paths[0].value;\n\n            switch (filterName) {\n              case 'url':\n              case '_class':\n              case '_style':\n                value = DEFAULT_FILTERS[filterName](value);\n                break;\n\n              case '_xclass':\n              case '_xstyle':\n                value = DEFAULT_FILTERS[filterName](value, evalExpr(filter.args[0], data, owner));\n                break;\n\n              default:\n                value = owner.filters[filterName] && owner.filters[filterName].apply(owner, [value].concat(evalArgs(filter.args, data, owner)));\n            }\n          }\n        }\n\n        if (value == null) {\n          value = '';\n        }\n\n        return value;\n\n      case 6:\n        if (owner && expr.name.type === 4) {\n          var method = owner;\n          var pathsLen = expr.name.paths.length;\n\n          for (var i = 0; method && i < pathsLen; i++) {\n            method = method[evalExpr(expr.name.paths[i], data, owner)];\n          }\n\n          if (method) {\n            value = method.apply(owner, evalArgs(expr.args, data, owner));\n          }\n        }\n\n        break;\n\n      /* eslint-disable no-redeclare */\n\n      case 7:\n        var buf = '';\n\n        for (var i = 0, l = expr.segs.length; i < l; i++) {\n          var seg = expr.segs[i];\n          buf += seg.value || evalExpr(seg, data, owner);\n        }\n\n        return buf;\n    }\n\n    return value;\n  } // exports = module.exports = evalExpr;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 为函数调用计算参数数组的值\n   */\n  // var evalExpr = require('./eval-expr');\n\n  /**\n   * 为函数调用计算参数数组的值\n   *\n   * @param {Array} args 参数表达式列表\n   * @param {Data} data 数据环境\n   * @param {Component} owner 组件环境\n   * @return {Array}\n   */\n\n\n  function evalArgs(args, data, owner) {\n    var result = [];\n\n    for (var i = 0; i < args.length; i++) {\n      result.push(evalExpr(args[i], data, owner));\n    }\n\n    return result;\n  } // exports = module.exports = evalArgs;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 比较变更表达式与目标表达式之间的关系\n   */\n  // var ExprType = require('../parser/expr-type');\n  // var evalExpr = require('./eval-expr');\n\n  /**\n   * 判断变更表达式与多个表达式之间的关系，0为完全没关系，1为有关系\n   *\n   * @inner\n   * @param {Object} changeExpr 目标表达式\n   * @param {Array} exprs 多个源表达式\n   * @param {Data} data 表达式所属数据环境\n   * @return {number}\n   */\n\n\n  function changeExprCompareExprs(changeExpr, exprs, data) {\n    for (var i = 0, l = exprs.length; i < l; i++) {\n      if (changeExprCompare(changeExpr, exprs[i], data)) {\n        return 1;\n      }\n    }\n\n    return 0;\n  }\n  /**\n   * 比较变更表达式与目标表达式之间的关系，用于视图更新判断\n   * 视图更新需要根据其关系，做出相应的更新行为\n   *\n   * 0: 完全没关系\n   * 1: 变更表达式是目标表达式的母项(如a与a.b) 或 表示需要完全变化\n   * 2: 变更表达式是目标表达式相等\n   * >2: 变更表达式是目标表达式的子项，如a.b.c与a.b\n   *\n   * @param {Object} changeExpr 变更表达式\n   * @param {Object} expr 要比较的目标表达式\n   * @param {Data} data 表达式所属数据环境\n   * @return {number}\n   */\n\n\n  function changeExprCompare(changeExpr, expr, data) {\n    // if (!expr.dynamic) {\n    //     return 0;\n    // }\n    switch (expr.type) {\n      case 4:\n        var paths = expr.paths;\n        var pathsLen = paths.length;\n        var changePaths = changeExpr.paths;\n        var changeLen = changePaths.length;\n        var result = 1;\n\n        for (var i = 0; i < pathsLen; i++) {\n          var pathExpr = paths[i];\n          var pathExprValue = pathExpr.value;\n\n          if (pathExprValue == null && changeExprCompare(changeExpr, pathExpr, data)) {\n            result = 1;\n            break;\n          }\n\n          if (result && i < changeLen\n          /* eslint-disable eqeqeq */\n          && (pathExprValue || evalExpr(pathExpr, data)) != changePaths[i].value\n          /* eslint-enable eqeqeq */\n          ) {\n              result = 0;\n            }\n        }\n\n        if (result) {\n          result = Math.max(1, changeLen - pathsLen + 2);\n        }\n\n        return result;\n\n      case 9:\n        return changeExprCompare(changeExpr, expr.expr, data) ? 1 : 0;\n\n      case 7:\n      case 8:\n      case 10:\n        return changeExprCompareExprs(changeExpr, expr.segs, data);\n\n      case 12:\n      case 11:\n        for (var i = 0; i < expr.items.length; i++) {\n          if (changeExprCompare(changeExpr, expr.items[i].expr, data)) {\n            return 1;\n          }\n        }\n\n        break;\n\n      case 5:\n        if (changeExprCompare(changeExpr, expr.expr, data)) {\n          return 1;\n        } else {\n          for (var i = 0; i < expr.filters.length; i++) {\n            if (changeExprCompareExprs(changeExpr, expr.filters[i].args, data)) {\n              return 1;\n            }\n          }\n        }\n\n        break;\n\n      case 6:\n        if (changeExprCompareExprs(changeExpr, expr.name.paths, data) || changeExprCompareExprs(changeExpr, expr.args, data)) {\n          return 1;\n        }\n\n        break;\n    }\n\n    return 0;\n  } // exports = module.exports = changeExprCompare;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 数据变更类型枚举\n   */\n\n  /**\n   * 数据变更类型枚举\n   *\n   * @const\n   * @type {Object}\n   */\n\n\n  var DataChangeType = {\n    SET: 1,\n    SPLICE: 2\n  }; // exports = module.exports = DataChangeType;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 生命周期类\n   */\n\n  function lifeCycleOwnIs(name) {\n    return this[name];\n  }\n  /* eslint-disable fecs-valid-var-jsdoc */\n\n  /**\n   * 节点生命周期信息\n   *\n   * @inner\n   * @type {Object}\n   */\n\n\n  var LifeCycle = {\n    start: {},\n    compiled: {\n      is: lifeCycleOwnIs,\n      compiled: true\n    },\n    inited: {\n      is: lifeCycleOwnIs,\n      compiled: true,\n      inited: true\n    },\n    created: {\n      is: lifeCycleOwnIs,\n      compiled: true,\n      inited: true,\n      created: true\n    },\n    attached: {\n      is: lifeCycleOwnIs,\n      compiled: true,\n      inited: true,\n      created: true,\n      attached: true\n    },\n    leaving: {\n      is: lifeCycleOwnIs,\n      compiled: true,\n      inited: true,\n      created: true,\n      attached: true,\n      leaving: true\n    },\n    detached: {\n      is: lifeCycleOwnIs,\n      compiled: true,\n      inited: true,\n      created: true,\n      detached: true\n    },\n    disposed: {\n      is: lifeCycleOwnIs,\n      disposed: true\n    }\n  };\n  /* eslint-enable fecs-valid-var-jsdoc */\n  // exports = module.exports = LifeCycle;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 节点类型\n   */\n\n  /**\n   * 节点类型\n   *\n   * @const\n   * @type {Object}\n   */\n\n  var NodeType = {\n    TEXT: 1,\n    IF: 2,\n    FOR: 3,\n    ELEM: 4,\n    CMPT: 5,\n    SLOT: 6,\n    TPL: 7,\n    LOADER: 8,\n    IS: 9\n  }; // exports = module.exports = NodeType;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 获取 ANode props 数组中相应 name 的项\n   */\n\n  /**\n   * 获取 ANode props 数组中相应 name 的项\n   *\n   * @param {Object} aNode ANode对象\n   * @param {string} name name属性匹配串\n   * @return {Object}\n   */\n\n  function getANodeProp(aNode, name) {\n    var index = aNode.hotspot.props[name];\n\n    if (index != null) {\n      return aNode.props[index];\n    }\n  } // exports = module.exports = getANodeProp;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 获取属性处理对象\n   */\n  // var contains = require('../util/contains');\n  // var empty = require('../util/empty');\n  // var nextTick = require('../util/next-tick');\n  // var svgTags = require('../browser/svg-tags');\n  // var ie = require('../browser/ie');\n  // var evalExpr = require('../runtime/eval-expr');\n  // var getANodeProp = require('./get-a-node-prop');\n  // var NodeType = require('./node-type');\n\n  /**\n   * HTML 属性和 DOM 操作属性的对照表\n   *\n   * @inner\n   * @const\n   * @type {Object}\n   */\n\n\n  var HTML_ATTR_PROP_MAP = {\n    'readonly': 'readOnly',\n    'cellpadding': 'cellPadding',\n    'cellspacing': 'cellSpacing',\n    'colspan': 'colSpan',\n    'rowspan': 'rowSpan',\n    'valign': 'vAlign',\n    'usemap': 'useMap',\n    'frameborder': 'frameBorder',\n    'for': 'htmlFor'\n  };\n  /**\n   * 默认的元素的属性设置的变换方法\n   *\n   * @inner\n   * @type {Object}\n   */\n\n  function defaultElementPropHandler(el, value, name) {\n    var propName = HTML_ATTR_PROP_MAP[name] || name;\n    var valueNotNull = value != null; // input 的 type 是个特殊属性，其实也应该用 setAttribute\n    // 但是 type 不应该运行时动态改变，否则会有兼容性问题\n    // 所以这里直接就不管了\n\n    if (propName in el) {\n      el[propName] = valueNotNull ? value : '';\n    } else if (valueNotNull) {\n      el.setAttribute(name, value);\n    }\n\n    if (!valueNotNull) {\n      el.removeAttribute(name);\n    }\n  }\n\n  function svgPropHandler(el, value, name) {\n    el.setAttribute(name, value);\n  }\n\n  function boolPropHandler(el, value, name) {\n    var propName = HTML_ATTR_PROP_MAP[name] || name;\n    el[propName] = !!value;\n  } // #[begin] allua\n  // see https://github.com/baidu/san/issues/495\n\n\n  function placeholderHandler(el, value, name, element) {\n    /* istanbul ignore if */\n    if (ie > 9 && !el.value && value) {\n      element.__bkph = true;\n      nextTick(function () {\n        element.__bkph = false;\n      });\n    }\n\n    defaultElementPropHandler(el, value, name);\n  } // #[end]\n\n  /* eslint-disable fecs-properties-quote */\n\n  /**\n   * 默认的属性设置变换方法\n   *\n   * @inner\n   * @type {Object}\n   */\n\n\n  var defaultElementPropHandlers = {\n    style: function style(el, value) {\n      el.style.cssText = value;\n    },\n    'class': function _class(el, value) {\n      // eslint-disable-line\n      if ( // #[begin] allua\n      ie || // #[end]\n      el.className !== value) {\n        el.className = value;\n      }\n    },\n    slot: empty,\n    draggable: boolPropHandler\n  };\n  /* eslint-enable fecs-properties-quote */\n\n  var analInputChecker = {\n    checkbox: contains,\n    radio: function radio(a, b) {\n      return a === b;\n    }\n  };\n\n  function analInputCheckedState(element, value) {\n    var bindValue = getANodeProp(element.aNode, 'value');\n    var bindType = getANodeProp(element.aNode, 'type');\n\n    if (bindValue && bindType) {\n      var type = evalExpr(bindType.expr, element.scope, element.owner);\n\n      if (analInputChecker[type]) {\n        var bindChecked = getANodeProp(element.aNode, 'checked');\n\n        if (bindChecked != null && !bindChecked.hintExpr) {\n          bindChecked.hintExpr = bindValue.expr;\n        }\n\n        return !!analInputChecker[type](value, element.data ? evalExpr(bindValue.expr, element.data, element) : evalExpr(bindValue.expr, element.scope, element.owner));\n      }\n    }\n  }\n\n  var elementPropHandlers = {\n    input: {\n      multiple: boolPropHandler,\n      checked: function checked(el, value, name, element) {\n        var state = analInputCheckedState(element, value);\n        boolPropHandler(el, state != null ? state : value, 'checked', element); // #[begin] allua\n        // 代码不用抽出来防重复，allua内的代码在现代浏览器版本会被编译时干掉，gzip也会处理重复问题\n        // see: #378\n\n        /* istanbul ignore if */\n\n        if (ie && ie < 8 && !element.lifeCycle.attached) {\n          boolPropHandler(el, state != null ? state : value, 'defaultChecked', element);\n        } // #[end]\n\n      },\n      // #[begin] allua\n      placeholder: placeholderHandler,\n      // #[end]\n      readonly: boolPropHandler,\n      disabled: boolPropHandler,\n      autofocus: boolPropHandler,\n      required: boolPropHandler\n    },\n    option: {\n      value: function value(el, _value, name, element) {\n        defaultElementPropHandler(el, _value, name, element);\n\n        if (isOptionSelected(element, _value)) {\n          el.selected = true;\n        }\n      }\n    },\n    select: {\n      readonly: boolPropHandler,\n      disabled: boolPropHandler,\n      autofocus: boolPropHandler,\n      required: boolPropHandler\n    },\n    textarea: {\n      // #[begin] allua\n      placeholder: placeholderHandler,\n      // #[end]\n      readonly: boolPropHandler,\n      disabled: boolPropHandler,\n      autofocus: boolPropHandler,\n      required: boolPropHandler\n    },\n    button: {\n      disabled: boolPropHandler,\n      autofocus: boolPropHandler,\n      type: function type(el, value) {\n        if (value != null) {\n          el.setAttribute('type', value);\n        } else {\n          el.removeAttribute('type');\n        }\n      }\n    }\n  };\n\n  function isOptionSelected(element, value) {\n    var parentSelect = element.parent;\n\n    while (parentSelect) {\n      if (parentSelect.tagName === 'select') {\n        break;\n      }\n\n      parentSelect = parentSelect.parent;\n    }\n\n    if (parentSelect) {\n      var selectValue = null;\n      var prop;\n      var expr;\n\n      if ((prop = getANodeProp(parentSelect.aNode, 'value')) && (expr = prop.expr)) {\n        selectValue = parentSelect.nodeType === 5 ? evalExpr(expr, parentSelect.data, parentSelect) : evalExpr(expr, parentSelect.scope, parentSelect.owner) || '';\n      }\n\n      if (selectValue === value) {\n        return 1;\n      }\n    }\n  }\n  /**\n   * 获取属性处理对象\n   *\n   * @param {string} tagName 元素tag\n   * @param {string} attrName 属性名\n   * @return {Object}\n   */\n\n\n  function getPropHandler(tagName, attrName) {\n    if (svgTags[tagName]) {\n      return svgPropHandler;\n    }\n\n    var tagPropHandlers = elementPropHandlers[tagName];\n\n    if (!tagPropHandlers) {\n      tagPropHandlers = elementPropHandlers[tagName] = {};\n    }\n\n    var propHandler = tagPropHandlers[attrName];\n\n    if (!propHandler) {\n      propHandler = defaultElementPropHandlers[attrName] || defaultElementPropHandler;\n      tagPropHandlers[attrName] = propHandler;\n    }\n\n    return propHandler;\n  } // exports = module.exports = getPropHandler;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 判断变更是否来源于元素\n   */\n\n  /**\n   * 判断变更是否来源于元素，来源于元素时，视图更新需要阻断\n   *\n   * @param {Object} change 变更对象\n   * @param {Element} element 元素\n   * @param {string?} propName 属性名，可选。需要精确判断是否来源于此属性时传入\n   * @return {boolean}\n   */\n\n\n  function isDataChangeByElement(change, element, propName) {\n    var changeTarget = change.option.target;\n    return changeTarget && changeTarget.node === element && (!propName || changeTarget.prop === propName);\n  } // exports = module.exports = isDataChangeByElement;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 在对象上使用accessor表达式查找方法\n   */\n  // var evalExpr = require('../runtime/eval-expr');\n\n  /**\n   * 在对象上使用accessor表达式查找方法\n   *\n   * @param {Object} source 源对象\n   * @param {Object} nameExpr 表达式\n   * @param {Data} data 所属数据环境\n   * @return {Function}\n   */\n\n\n  function findMethod(source, nameExpr, data) {\n    var method = source;\n\n    for (var i = 0; method != null && i < nameExpr.paths.length; i++) {\n      method = method[evalExpr(nameExpr.paths[i], data)];\n    }\n\n    return method;\n  } // exports = module.exports = findMethod;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 数据类\n   */\n  // var ExprType = require('../parser/expr-type');\n  // var evalExpr = require('./eval-expr');\n  // var DataChangeType = require('./data-change-type');\n  // var parseExpr = require('../parser/parse-expr');\n\n  /**\n   * 数据类\n   *\n   * @class\n   * @param {Object?} data 初始数据\n   * @param {Model?} parent 父级数据容器\n   */\n\n\n  function Data(data, parent) {\n    this.parent = parent;\n    this.raw = data || {};\n    this.listeners = [];\n  } // #[begin] error\n  // 以下两个函数只在开发模式下可用，在生产模式下不存在\n\n  /**\n   * DataTypes 检测\n   */\n\n\n  Data.prototype.checkDataTypes = function () {\n    if (this.typeChecker) {\n      this.typeChecker(this.raw);\n    }\n  };\n  /**\n   * 设置 type checker\n   *\n   * @param  {Function} typeChecker 类型校验器\n   */\n\n\n  Data.prototype.setTypeChecker = function (typeChecker) {\n    this.typeChecker = typeChecker;\n  }; // #[end]\n\n  /**\n   * 添加数据变更的事件监听器\n   *\n   * @param {Function} listener 监听函数\n   */\n\n\n  Data.prototype.listen = function (listener) {\n    if (typeof listener === 'function') {\n      this.listeners.push(listener);\n    }\n  };\n  /**\n   * 移除数据变更的事件监听器\n   *\n   * @param {Function} listener 监听函数\n   */\n\n\n  Data.prototype.unlisten = function (listener) {\n    var len = this.listeners.length;\n\n    while (len--) {\n      if (!listener || this.listeners[len] === listener) {\n        this.listeners.splice(len, 1);\n      }\n    }\n  };\n  /**\n   * 触发数据变更\n   *\n   * @param {Object} change 变更信息对象\n   */\n\n\n  Data.prototype.fire = function (change) {\n    if (change.option.silent || change.option.silence || change.option.quiet) {\n      return;\n    }\n\n    for (var i = 0; i < this.listeners.length; i++) {\n      this.listeners[i].call(this, change);\n    }\n  };\n  /**\n   * 获取数据项\n   *\n   * @param {string|Object?} expr 数据项路径\n   * @param {Data?} callee 当前数据获取的调用环境\n   * @return {*}\n   */\n\n\n  Data.prototype.get = function (expr, callee) {\n    var value = this.raw;\n\n    if (!expr) {\n      return value;\n    }\n\n    if (_typeof(expr) !== 'object') {\n      expr = parseExpr(expr);\n    }\n\n    var paths = expr.paths;\n    callee = callee || this;\n    value = value[paths[0].value];\n\n    if (value == null && this.parent) {\n      value = this.parent.get(expr, callee);\n    } else {\n      for (var i = 1, l = paths.length; value != null && i < l; i++) {\n        value = value[paths[i].value || evalExpr(paths[i], callee)];\n      }\n    }\n\n    return value;\n  };\n  /**\n   * 数据对象变更操作\n   *\n   * @inner\n   * @param {Object|Array} source 要变更的源数据\n   * @param {Array} exprPaths 属性路径\n   * @param {number} pathsStart 当前处理的属性路径指针位置\n   * @param {number} pathsLen 属性路径长度\n   * @param {*} value 变更属性值\n   * @param {Data} data 对应的Data对象\n   * @return {*} 变更后的新数据\n   */\n\n\n  function immutableSet(source, exprPaths, pathsStart, pathsLen, value, data) {\n    if (pathsStart >= pathsLen) {\n      return value;\n    }\n\n    if (source == null) {\n      source = {};\n    }\n\n    var pathExpr = exprPaths[pathsStart];\n    var prop = evalExpr(pathExpr, data);\n    var result = source;\n\n    if (source instanceof Array) {\n      var index = +prop;\n      prop = isNaN(index) ? prop : index;\n      result = source.slice(0);\n      result[prop] = immutableSet(source[prop], exprPaths, pathsStart + 1, pathsLen, value, data);\n    } else if (_typeof(source) === 'object') {\n      result = {};\n\n      for (var key in source) {\n        /* istanbul ignore else  */\n        if (key !== prop && source.hasOwnProperty(key)) {\n          result[key] = source[key];\n        }\n      }\n\n      result[prop] = immutableSet(source[prop], exprPaths, pathsStart + 1, pathsLen, value, data);\n    }\n\n    if (pathExpr.value == null) {\n      exprPaths[pathsStart] = {\n        type: typeof prop === 'string' ? 1 : 2,\n        value: prop\n      };\n    }\n\n    return result;\n  }\n  /**\n   * 设置数据项\n   *\n   * @param {string|Object} expr 数据项路径\n   * @param {*} value 数据值\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   */\n\n\n  Data.prototype.set = function (expr, value, option) {\n    option = option || {}; // #[begin] error\n\n    var exprRaw = expr; // #[end]\n\n    expr = parseExpr(expr); // #[begin] error\n\n    if (expr.type !== 4) {\n      throw new Error('[SAN ERROR] Invalid Expression in Data set: ' + exprRaw);\n    } // #[end]\n\n\n    if (this.get(expr) === value && !option.force) {\n      return;\n    }\n\n    expr = {\n      type: 4,\n      paths: expr.paths.slice(0)\n    };\n    var prop = expr.paths[0].value;\n    this.raw[prop] = immutableSet(this.raw[prop], expr.paths, 1, expr.paths.length, value, this);\n    this.fire({\n      type: 1,\n      expr: expr,\n      value: value,\n      option: option\n    }); // #[begin] error\n\n    this.checkDataTypes(); // #[end]\n  };\n  /**\n   * 批量设置数据\n   *\n   * @param {Object} source 待设置的数据集\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   */\n\n\n  Data.prototype.assign = function (source, option) {\n    option = option || {};\n\n    for (var key in source) {\n      // eslint-disable-line\n      this.set({\n        type: 4,\n        paths: [{\n          type: 1,\n          value: key\n        }]\n      }, source[key], option);\n    }\n  };\n  /**\n   * 合并更新数据项\n   *\n   * @param {string|Object} expr 数据项路径\n   * @param {Object} source 待合并的数据\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   */\n\n\n  Data.prototype.merge = function (expr, source, option) {\n    option = option || {}; // #[begin] error\n\n    var exprRaw = expr; // #[end]\n\n    expr = parseExpr(expr); // #[begin] error\n\n    if (expr.type !== 4) {\n      throw new Error('[SAN ERROR] Invalid Expression in Data merge: ' + exprRaw);\n    }\n\n    if (_typeof(this.get(expr)) !== 'object') {\n      throw new Error('[SAN ERROR] Merge Expects a Target of Type \\'object\\'; got ' + (typeof oldValue === \"undefined\" ? \"undefined\" : _typeof(oldValue)));\n    }\n\n    if (_typeof(source) !== 'object') {\n      throw new Error('[SAN ERROR] Merge Expects a Source of Type \\'object\\'; got ' + _typeof(source));\n    } // #[end]\n\n\n    for (var key in source) {\n      // eslint-disable-line\n      this.set({\n        type: 4,\n        paths: expr.paths.concat([{\n          type: 1,\n          value: key\n        }])\n      }, source[key], option);\n    }\n  };\n  /**\n   * 基于更新函数更新数据项\n   *\n   * @param {string|Object} expr 数据项路径\n   * @param {Function} fn 数据处理函数\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   */\n\n\n  Data.prototype.apply = function (expr, fn, option) {\n    // #[begin] error\n    var exprRaw = expr; // #[end]\n\n    expr = parseExpr(expr); // #[begin] error\n\n    if (expr.type !== 4) {\n      throw new Error('[SAN ERROR] Invalid Expression in Data apply: ' + exprRaw);\n    } // #[end]\n\n\n    var oldValue = this.get(expr); // #[begin] error\n\n    if (typeof fn !== 'function') {\n      throw new Error('[SAN ERROR] Invalid Argument\\'s Type in Data apply: ' + 'Expected Function but got ' + _typeof(fn));\n    } // #[end]\n\n\n    this.set(expr, fn(oldValue), option);\n  };\n  /**\n   * 数组数据项splice操作\n   *\n   * @param {string|Object} expr 数据项路径\n   * @param {Array} args splice 接受的参数列表，数组项与Array.prototype.splice的参数一致\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   * @return {Array} 新数组\n   */\n\n\n  Data.prototype.splice = function (expr, args, option) {\n    option = option || {}; // #[begin] error\n\n    var exprRaw = expr; // #[end]\n\n    expr = parseExpr(expr); // #[begin] error\n\n    if (expr.type !== 4) {\n      throw new Error('[SAN ERROR] Invalid Expression in Data splice: ' + exprRaw);\n    } // #[end]\n\n\n    expr = {\n      type: 4,\n      paths: expr.paths.slice(0)\n    };\n    var target = this.get(expr);\n    var returnValue = [];\n\n    if (target instanceof Array) {\n      var index = args[0];\n      var len = target.length;\n\n      if (index > len) {\n        index = len;\n      } else if (index < 0) {\n        index = len + index;\n\n        if (index < 0) {\n          index = 0;\n        }\n      }\n\n      var newArray = target.slice(0);\n      returnValue = newArray.splice.apply(newArray, args);\n      this.raw = immutableSet(this.raw, expr.paths, 0, expr.paths.length, newArray, this);\n      this.fire({\n        expr: expr,\n        type: 2,\n        index: index,\n        deleteCount: returnValue.length,\n        value: returnValue,\n        insertions: args.slice(2),\n        option: option\n      });\n    } // #[begin] error\n\n\n    this.checkDataTypes(); // #[end]\n\n    return returnValue;\n  };\n  /**\n   * 数组数据项push操作\n   *\n   * @param {string|Object} expr 数据项路径\n   * @param {*} item 要push的值\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   * @return {number} 新数组的length属性\n   */\n\n\n  Data.prototype.push = function (expr, item, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n      this.splice(expr, [target.length, 0, item], option);\n      return target.length + 1;\n    }\n  };\n  /**\n   * 数组数据项pop操作\n   *\n   * @param {string|Object} expr 数据项路径\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   * @return {*}\n   */\n\n\n  Data.prototype.pop = function (expr, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n      var len = target.length;\n\n      if (len) {\n        return this.splice(expr, [len - 1, 1], option)[0];\n      }\n    }\n  };\n  /**\n   * 数组数据项shift操作\n   *\n   * @param {string|Object} expr 数据项路径\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   * @return {*}\n   */\n\n\n  Data.prototype.shift = function (expr, option) {\n    return this.splice(expr, [0, 1], option)[0];\n  };\n  /**\n   * 数组数据项unshift操作\n   *\n   * @param {string|Object} expr 数据项路径\n   * @param {*} item 要unshift的值\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   * @return {number} 新数组的length属性\n   */\n\n\n  Data.prototype.unshift = function (expr, item, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n      this.splice(expr, [0, 0, item], option);\n      return target.length + 1;\n    }\n  };\n  /**\n   * 数组数据项移除操作\n   *\n   * @param {string|Object} expr 数据项路径\n   * @param {number} index 要移除项的索引\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   */\n\n\n  Data.prototype.removeAt = function (expr, index, option) {\n    this.splice(expr, [index, 1], option);\n  };\n  /**\n   * 数组数据项移除操作\n   *\n   * @param {string|Object} expr 数据项路径\n   * @param {*} value 要移除的项\n   * @param {Object=} option 设置参数\n   * @param {boolean} option.silent 静默设置，不触发变更事件\n   */\n\n\n  Data.prototype.remove = function (expr, value, option) {\n    var target = this.get(expr);\n\n    if (target instanceof Array) {\n      var len = target.length;\n\n      while (len--) {\n        if (target[len] === value) {\n          this.splice(expr, [len, 1], option);\n          break;\n        }\n      }\n    }\n  }; // exports = module.exports = Data;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 获取声明式事件的监听函数\n   */\n  // var evalArgs = require('../runtime/eval-args');\n  // var findMethod = require('../runtime/find-method');\n  // var Data = require('../runtime/data');\n\n  /**\n   * 获取声明式事件的监听函数\n   *\n   * @param {Object} eventBind 绑定信息对象\n   * @param {Component} owner 所属组件环境\n   * @param {Data} data 数据环境\n   * @param {boolean} isComponentEvent 是否组件自定义事件\n   * @return {Function}\n   */\n\n\n  function getEventListener(eventBind, owner, data, isComponentEvent) {\n    var args = eventBind.expr.args;\n    return function (e) {\n      e = isComponentEvent ? e : e || window.event;\n      var method = findMethod(owner, eventBind.expr.name, data);\n\n      if (typeof method === 'function') {\n        method.apply(owner, args.length ? evalArgs(args, new Data({\n          $event: e\n        }, data), owner) : []);\n      }\n\n      if (eventBind.modifier.prevent) {\n        e.preventDefault && e.preventDefault();\n        return false;\n      }\n\n      if (eventBind.modifier.stop) {\n        if (e.stopPropagation) {\n          e.stopPropagation();\n        } else {\n          e.cancelBubble = true;\n        }\n      }\n    };\n  } // exports = module.exports = getEventListener;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 判断变更数组是否影响到数据引用摘要\n   */\n\n  /**\n   * 判断变更数组是否影响到数据引用摘要\n   *\n   * @param {Array} changes 变更数组\n   * @param {Object} dataRef 数据引用摘要\n   * @return {boolean}\n   */\n\n\n  function changesIsInDataRef(changes, dataRef) {\n    if (dataRef) {\n      for (var i = 0; i < changes.length; i++) {\n        var change = changes[i];\n\n        if (!change.overview) {\n          var paths = change.expr.paths;\n          change.overview = paths[0].value;\n\n          if (paths.length > 1) {\n            change.extOverview = paths[0].value + '.' + paths[1].value;\n            change.wildOverview = paths[0].value + '.*';\n          }\n        }\n\n        if (dataRef[change.overview] || change.wildOverview && dataRef[change.wildOverview] || change.extOverview && dataRef[change.extOverview]) {\n          return true;\n        }\n      }\n    }\n  } // exports = module.exports = changesIsInDataRef;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file insertBefore 方法的兼容性封装\n   */\n\n  /**\n   * insertBefore 方法的兼容性封装\n   *\n   * @param {HTMLNode} targetEl 要插入的节点\n   * @param {HTMLElement} parentEl 父元素\n   * @param {HTMLElement?} beforeEl 在此元素之前插入\n   */\n\n\n  function insertBefore(targetEl, parentEl, beforeEl) {\n    if (parentEl) {\n      if (beforeEl) {\n        parentEl.insertBefore(targetEl, beforeEl);\n      } else {\n        parentEl.appendChild(targetEl);\n      }\n    }\n  } // exports = module.exports = insertBefore;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 元素的基本属性\n   */\n  // var splitStr2Obj = require('../util/split-str-2-obj');\n\n  /**\n   * 元素的基本属性\n   *\n   * @type {Object}\n   */\n\n\n  var baseProps = splitStr2Obj('class,style,id'); // exports = module.exports = baseProps;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 元素子节点遍历操作类\n   */\n  // var removeEl = require('../browser/remove-el');\n  // #[begin] reverse\n\n  /**\n   * 元素子节点遍历操作类\n   *\n   * @inner\n   * @class\n   * @param {HTMLElement} el 要遍历的元素\n   */\n\n  function DOMChildrenWalker(el) {\n    this.children = [];\n    this.index = 0;\n    this.target = el;\n    var child = el.firstChild;\n    var next;\n\n    while (child) {\n      next = child.nextSibling;\n\n      switch (child.nodeType) {\n        case 3:\n          if (/^\\s*$/.test(child.data || child.textContent)) {\n            removeEl(child);\n          } else {\n            this.children.push(child);\n          }\n\n          break;\n\n        case 1:\n        case 8:\n          this.children.push(child);\n      }\n\n      child = next;\n    }\n\n    this.current = this.children[this.index];\n    this.next = this.children[this.index + 1];\n  }\n  /**\n   * 往下走一个元素\n   */\n\n\n  DOMChildrenWalker.prototype.goNext = function () {\n    this.current = this.children[++this.index];\n    this.next = this.children[this.index + 1];\n  }; // #[end]\n  // exports = module.exports = DOMChildrenWalker;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 元素节点类\n   */\n  // var changeExprCompare = require('../runtime/change-expr-compare');\n  // var changesIsInDataRef = require('../runtime/changes-is-in-data-ref');\n  // var evalExpr = require('../runtime/eval-expr');\n  // var insertBefore = require('../browser/insert-before');\n  // var LifeCycle = require('./life-cycle');\n  // var NodeType = require('./node-type');\n  // var baseProps = require('./base-props');\n  // var reverseElementChildren = require('./reverse-element-children');\n  // var isDataChangeByElement = require('./is-data-change-by-element');\n  // var getPropHandler = require('./get-prop-handler');\n  // var createNode = require('./create-node');\n  // var elementOwnDetach = require('./element-own-detach');\n  // var elementOwnDispose = require('./element-own-dispose');\n  // var elementOwnOnEl = require('./element-own-on-el');\n  // var elementOwnAttached = require('./element-own-attached');\n  // var nodeSBindInit = require('./node-s-bind-init');\n  // var nodeSBindUpdate = require('./node-s-bind-update');\n  // var warnSetHTML = require('./warn-set-html');\n  // var getNodePath = require('./get-node-path');\n\n  /**\n   * 元素节点类\n   *\n   * @class\n   * @param {Object} aNode 抽象节点\n   * @param {Node} parent 父亲节点\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n   */\n\n\n  function Element(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.lifeCycle = LifeCycle.start;\n    this.children = [];\n    this._elFns = [];\n    this.parentComponent = parent.nodeType === 5 ? parent : parent.parentComponent;\n    this.tagName = aNode.tagName; // #[begin] allua\n    // ie8- 不支持innerHTML输出自定义标签\n\n    /* istanbul ignore if */\n\n    if (ieOldThan9 && this.tagName.indexOf('-') > 0) {\n      this.tagName = 'div';\n    } // #[end]\n\n\n    this._sbindData = nodeSBindInit(aNode.directives.bind, this.scope, this.owner);\n    this.lifeCycle = LifeCycle.inited; // #[begin] reverse\n\n    if (reverseWalker) {\n      var currentNode = reverseWalker.current;\n      /* istanbul ignore if */\n\n      if (!currentNode) {\n        throw new Error('[SAN REVERSE ERROR] Element not found. \\nPaths: ' + getNodePath(this).join(' > '));\n      }\n      /* istanbul ignore if */\n\n\n      if (currentNode.nodeType !== 1) {\n        throw new Error('[SAN REVERSE ERROR] Element type not match, expect 1 but ' + currentNode.nodeType + '.\\nPaths: ' + getNodePath(this).join(' > '));\n      }\n      /* istanbul ignore if */\n\n\n      if (currentNode.tagName.toLowerCase() !== this.tagName) {\n        throw new Error('[SAN REVERSE ERROR] Element tagName not match, expect ' + this.tagName + ' but meet ' + currentNode.tagName.toLowerCase() + '.\\nPaths: ' + getNodePath(this).join(' > '));\n      }\n\n      this.el = currentNode;\n      reverseWalker.goNext();\n      reverseElementChildren(this, this.scope, this.owner);\n      this.lifeCycle = LifeCycle.created;\n\n      this._attached();\n\n      this.lifeCycle = LifeCycle.attached;\n    } // #[end]\n\n  }\n\n  Element.prototype.nodeType = 4;\n  /**\n   * 将元素attach到页面\n   *\n   * @param {HTMLElement} parentEl 要添加到的父元素\n   * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n   */\n\n  Element.prototype.attach = function (parentEl, beforeEl) {\n    if (!this.lifeCycle.attached) {\n      if (!this.el) {\n        var sourceNode = this.aNode.hotspot.sourceNode;\n        var props = this.aNode.props;\n\n        if (sourceNode) {\n          this.el = sourceNode.cloneNode(false);\n          props = this.aNode.hotspot.dynamicProps;\n        } else {\n          this.el = createEl(this.tagName);\n        }\n\n        if (this._sbindData) {\n          for (var key in this._sbindData) {\n            if (this._sbindData.hasOwnProperty(key)) {\n              getPropHandler(this.tagName, key)(this.el, this._sbindData[key], key, this);\n            }\n          }\n        }\n\n        for (var i = 0, l = props.length; i < l; i++) {\n          var prop = props[i];\n          var value = evalExpr(prop.expr, this.scope, this.owner);\n\n          if (value || !baseProps[prop.name]) {\n            prop.handler(this.el, value, prop.name, this);\n          }\n        }\n\n        this.lifeCycle = LifeCycle.created;\n      }\n\n      insertBefore(this.el, parentEl, beforeEl);\n\n      if (!this._contentReady) {\n        var htmlDirective = this.aNode.directives.html;\n\n        if (htmlDirective) {\n          // #[begin] error\n          warnSetHTML(this.el); // #[end]\n\n          this.el.innerHTML = evalExpr(htmlDirective.value, this.scope, this.owner);\n        } else {\n          for (var i = 0, l = this.aNode.children.length; i < l; i++) {\n            var childANode = this.aNode.children[i];\n            var child = childANode.Clazz ? new childANode.Clazz(childANode, this, this.scope, this.owner) : createNode(childANode, this, this.scope, this.owner);\n            this.children.push(child);\n            child.attach(this.el);\n          }\n        }\n\n        this._contentReady = 1;\n      }\n\n      this._attached();\n\n      this.lifeCycle = LifeCycle.attached;\n    }\n  };\n\n  Element.prototype.detach = elementOwnDetach;\n  Element.prototype.dispose = elementOwnDispose;\n  Element.prototype._onEl = elementOwnOnEl;\n\n  Element.prototype._leave = function () {\n    if (this.leaveDispose) {\n      if (!this.lifeCycle.disposed) {\n        var len = this.children.length;\n\n        while (len--) {\n          this.children[len].dispose(1, 1);\n        }\n\n        len = this._elFns.length;\n\n        while (len--) {\n          var fn = this._elFns[len];\n          un(this.el, fn[0], fn[1], fn[2]);\n        }\n\n        this._elFns = null; // #[begin] allua\n\n        /* istanbul ignore if */\n\n        if (this._inputTimer) {\n          clearInterval(this._inputTimer);\n          this._inputTimer = null;\n        } // #[end]\n        // 如果没有parent，说明是一个root component，一定要从dom树中remove\n\n\n        if (!this.disposeNoDetach || !this.parent) {\n          removeEl(this.el);\n        }\n\n        this.lifeCycle = LifeCycle.detached;\n        this.el = null;\n        this.owner = null;\n        this.scope = null;\n        this.children = null;\n        this.lifeCycle = LifeCycle.disposed;\n\n        if (this._ondisposed) {\n          this._ondisposed();\n        }\n      }\n    }\n  };\n  /**\n   * 视图更新\n   *\n   * @param {Array} changes 数据变化信息\n   */\n\n\n  Element.prototype._update = function (changes) {\n    var dataHotspot = this.aNode.hotspot.data;\n\n    if (dataHotspot && changesIsInDataRef(changes, dataHotspot)) {\n      // update s-bind\n      var me = this;\n      this._sbindData = nodeSBindUpdate(this.aNode.directives.bind, this._sbindData, this.scope, this.owner, changes, function (name, value) {\n        if (name in me.aNode.hotspot.props) {\n          return;\n        }\n\n        getPropHandler(me.tagName, name)(me.el, value, name, me);\n      }); // update prop\n\n      var dynamicProps = this.aNode.hotspot.dynamicProps;\n\n      for (var i = 0, l = dynamicProps.length; i < l; i++) {\n        var prop = dynamicProps[i];\n        var propName = prop.name;\n\n        for (var j = 0, changeLen = changes.length; j < changeLen; j++) {\n          var change = changes[j];\n\n          if (!isDataChangeByElement(change, this, propName) && (changeExprCompare(change.expr, prop.expr, this.scope) || prop.hintExpr && changeExprCompare(change.expr, prop.hintExpr, this.scope))) {\n            prop.handler(this.el, evalExpr(prop.expr, this.scope, this.owner), propName, this);\n            break;\n          }\n        }\n      } // update content\n\n\n      var htmlDirective = this.aNode.directives.html;\n\n      if (htmlDirective) {\n        var len = changes.length;\n\n        while (len--) {\n          if (changeExprCompare(changes[len].expr, htmlDirective.value, this.scope)) {\n            // #[begin] error\n            warnSetHTML(this.el); // #[end]\n\n            this.el.innerHTML = evalExpr(htmlDirective.value, this.scope, this.owner);\n            break;\n          }\n        }\n      } else {\n        for (var i = 0, l = this.children.length; i < l; i++) {\n          this.children[i]._update(changes);\n        }\n      }\n    }\n  };\n  /**\n   * 执行完成attached状态的行为\n   */\n\n\n  Element.prototype._attached = elementOwnAttached; // exports = module.exports = Element;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 创建节点对应的 stump comment 元素\n   */\n\n  /**\n   * 创建节点对应的 stump comment 主元素\n   */\n\n  function nodeOwnCreateStump() {\n    this.el = this.el || document.createComment(this.id);\n  } // exports = module.exports = nodeOwnCreateStump;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 销毁释放元素的子元素\n   */\n\n  /**\n   * 销毁释放元素的子元素\n   *\n   * @param {Array=} children 子元素数组\n   * @param {boolean=} noDetach 是否不要把节点从dom移除\n   * @param {boolean=} noTransition 是否不显示过渡动画效果\n   */\n\n\n  function elementDisposeChildren(children, noDetach, noTransition) {\n    var len = children && children.length;\n\n    while (len--) {\n      children[len].dispose(noDetach, noTransition);\n    }\n  } // exports = module.exports = elementDisposeChildren;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 简单执行销毁节点的行为\n   */\n  // var removeEl = require('../browser/remove-el');\n  // var LifeCycle = require('./life-cycle');\n  // var elementDisposeChildren = require('./element-dispose-children');\n\n  /**\n   * 简单执行销毁节点的行为\n   *\n   * @param {boolean=} noDetach 是否不要把节点从dom移除\n   */\n\n\n  function nodeOwnSimpleDispose(noDetach) {\n    elementDisposeChildren(this.children, noDetach, 1);\n\n    if (!noDetach) {\n      removeEl(this.el);\n    }\n\n    this.el = null;\n    this.owner = null;\n    this.scope = null;\n    this.children = null;\n    this.lifeCycle = LifeCycle.disposed;\n\n    if (this._ondisposed) {\n      this._ondisposed();\n    }\n  } // exports = module.exports = nodeOwnSimpleDispose;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 异步组件类\n   */\n  // var guid = require('../util/guid');\n  // var each = require('../util/each');\n  // var insertBefore = require('../browser/insert-before');\n  // var nodeOwnCreateStump = require('./node-own-create-stump');\n  // var nodeOwnSimpleDispose = require('./node-own-simple-dispose');\n\n  /**\n   * 异步组件类\n   *\n   * @class\n   * @param {Object} options 初始化参数\n   * @param {Object} loader 组件加载器\n   */\n\n\n  function AsyncComponent(options, loader) {\n    this.options = options;\n    this.loader = loader;\n    this.id = guid++;\n    this.children = []; // #[begin] reverse\n\n    var reverseWalker = options.reverseWalker;\n\n    if (reverseWalker) {\n      var PlaceholderComponent = this.loader.placeholder;\n\n      if (PlaceholderComponent) {\n        this.children[0] = new PlaceholderComponent(options);\n      }\n\n      this._create();\n\n      insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n      var me = this;\n      this.loader.start(function (ComponentClass) {\n        me.onload(ComponentClass);\n      });\n    }\n\n    options.reverseWalker = null; // #[end]\n  }\n\n  AsyncComponent.prototype._create = nodeOwnCreateStump;\n  AsyncComponent.prototype.dispose = nodeOwnSimpleDispose;\n  /**\n   * attach到页面\n   *\n   * @param {HTMLElement} parentEl 要添加到的父元素\n   * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n   */\n\n  AsyncComponent.prototype.attach = function (parentEl, beforeEl) {\n    var PlaceholderComponent = this.loader.placeholder;\n\n    if (PlaceholderComponent) {\n      var component = new PlaceholderComponent(this.options);\n      this.children[0] = component;\n      component.attach(parentEl, beforeEl);\n    }\n\n    this._create();\n\n    insertBefore(this.el, parentEl, beforeEl);\n    var me = this;\n    this.loader.start(function (ComponentClass) {\n      me.onload(ComponentClass);\n    });\n  };\n\n  AsyncComponent.prototype._getElAsRootNode = function () {\n    var child = this.children[0];\n    return child && child.el;\n  };\n  /**\n   * loader加载完成，渲染组件\n   *\n   * @param {Function=} ComponentClass 组件类\n   */\n\n\n  AsyncComponent.prototype.onload = function (ComponentClass) {\n    if (this.el && ComponentClass) {\n      var component = new ComponentClass(this.options);\n      component.attach(this.el.parentNode, this.el);\n      var parent = this.options.parent;\n\n      if (parent._rootNode === this) {\n        // 如果异步组件为 root 节点，直接更新\n        parent._rootNode = component;\n        component._getElAsRootNode && (parent.el = component._getElAsRootNode());\n      } else {\n        // 在 children 中查找\n        var parentChildren = parent.children; // children 中存在多个 AsyncComponent 时，只循环一遍，为所有 AsyncComponent 的 parentIndex 赋值\n\n        if (this.parentIndex == null || parentChildren[this.parentIndex] !== this) {\n          each(parentChildren, function (child, index) {\n            if (child instanceof AsyncComponent) {\n              child.parentIndex = index;\n            }\n          });\n        }\n\n        parentChildren[this.parentIndex] = component;\n      }\n    }\n\n    this.dispose();\n  };\n  /**\n   * 视图更新函数\n   *\n   * @param {Array} changes 数据变化信息\n   */\n\n\n  AsyncComponent.prototype._update = function (changes) {\n    this.children[0] && this.children[0]._update(changes);\n  }; // exports = module.exports = AsyncComponent;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 通过组件反解创建节点的工厂方法\n   */\n  // var Element = require('./element');\n  // var AsyncComponent = require('./async-component');\n  // #[begin] reverse\n\n  /**\n   * 通过组件反解创建节点\n   *\n   * @param {ANode} aNode 抽象节点\n   * @param {Node} parent 父亲节点\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @param {DOMChildrenWalker} reverseWalker 子元素遍历对象\n   * @return {Node}\n   */\n\n\n  function createReverseNode(aNode, parent, scope, owner, reverseWalker, componentName) {\n    if (aNode.Clazz) {\n      return new aNode.Clazz(aNode, parent, scope, owner, reverseWalker);\n    }\n\n    var ComponentOrLoader = owner.components[componentName || aNode.tagName];\n\n    if (ComponentOrLoader) {\n      return typeof ComponentOrLoader === 'function' ? new ComponentOrLoader({\n        source: aNode,\n        owner: owner,\n        scope: scope,\n        parent: parent,\n        reverseWalker: reverseWalker\n      }) : new AsyncComponent({\n        source: aNode,\n        owner: owner,\n        scope: scope,\n        parent: parent,\n        reverseWalker: reverseWalker\n      }, ComponentOrLoader);\n    }\n\n    return new Element(aNode, parent, scope, owner, reverseWalker);\n  } // #[end]\n  // exports = module.exports = createReverseNode;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 对元素的子节点进行反解\n   */\n  // var each = require('../util/each');\n  // var DOMChildrenWalker = require('./dom-children-walker');\n  // var createReverseNode = require('./create-reverse-node');\n  // #[begin] reverse\n\n  /**\n   * 对元素的子节点进行反解\n   *\n   * @param {Object} element 元素\n   */\n\n\n  function reverseElementChildren(element, scope, owner) {\n    var htmlDirective = element.aNode.directives.html;\n\n    if (!htmlDirective) {\n      var reverseWalker = new DOMChildrenWalker(element.el);\n      var aNodeChildren = element.aNode.children;\n\n      for (var i = 0, l = aNodeChildren.length; i < l; i++) {\n        element.children.push(createReverseNode(aNodeChildren[i], element, scope, owner, reverseWalker));\n      }\n    }\n  } // #[end]\n  // exports = module.exports = reverseElementChildren;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 创建节点的工厂方法\n   */\n  // var evalExpr = require('../runtime/eval-expr');\n  // var Element = require('./element');\n  // var AsyncComponent = require('./async-component');\n\n  /**\n   * 创建节点\n   *\n   * @param {ANode} aNode 抽象节点\n   * @param {Node} parent 父亲节点\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @return {Node}\n   */\n\n\n  function createNode(aNode, parent, scope, owner, componentName) {\n    if (aNode.Clazz) {\n      return new aNode.Clazz(aNode, parent, scope, owner);\n    }\n\n    var ComponentOrLoader = owner.components[componentName || aNode.tagName];\n\n    if (ComponentOrLoader) {\n      return typeof ComponentOrLoader === 'function' ? new ComponentOrLoader({\n        source: aNode,\n        owner: owner,\n        scope: scope,\n        parent: parent\n      }) : new AsyncComponent({\n        source: aNode,\n        owner: owner,\n        scope: scope,\n        parent: parent\n      }, ComponentOrLoader);\n    }\n\n    aNode.Clazz = Element;\n    return new Element(aNode, parent, scope, owner);\n  } // exports = module.exports = createNode;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 获取 element 的 transition 控制对象\n   */\n  // var evalArgs = require('../runtime/eval-args');\n  // var findMethod = require('../runtime/find-method');\n  // var NodeType = require('./node-type');\n\n  /**\n   * 获取 element 的 transition 控制对象\n   *\n   * @param {Object} element 元素\n   * @return {Object?}\n   */\n\n\n  function elementGetTransition(element) {\n    var directive = element.aNode.directives.transition;\n    var owner = element.owner;\n\n    if (element.nodeType === 5) {\n      var cmptGivenTransition = element.source && element.source.directives.transition;\n\n      if (cmptGivenTransition) {\n        directive = cmptGivenTransition;\n      } else {\n        owner = element;\n      }\n    }\n\n    var transition;\n\n    if (directive && owner) {\n      transition = findMethod(owner, directive.value.name);\n\n      if (typeof transition === 'function') {\n        transition = transition.apply(owner, evalArgs(directive.value.args, element.scope, owner));\n      }\n    }\n\n    return transition || element.transition;\n  } // exports = module.exports = elementGetTransition;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 将元素从页面上移除\n   */\n  // var elementGetTransition = require('./element-get-transition');\n\n  /**\n   * 将元素从页面上移除\n   */\n\n\n  function elementOwnDetach() {\n    var lifeCycle = this.lifeCycle;\n\n    if (lifeCycle.leaving) {\n      return;\n    }\n\n    if (!this.disposeNoTransition) {\n      var transition = elementGetTransition(this);\n\n      if (transition && transition.leave) {\n        if (this._toPhase) {\n          this._toPhase('leaving');\n        } else {\n          this.lifeCycle = LifeCycle.leaving;\n        }\n\n        var me = this;\n        transition.leave(this.el, function () {\n          me._leave();\n        });\n        return;\n      }\n    }\n\n    this._leave();\n  } // exports = module.exports = elementOwnDetach;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 销毁释放元素\n   */\n\n  /**\n   * 销毁释放元素\n   *\n   * @param {boolean=} noDetach 是否不要把节点从dom移除\n   * @param {boolean=} noTransition 是否不显示过渡动画效果\n   */\n\n\n  function elementOwnDispose(noDetach, noTransition) {\n    this.leaveDispose = 1;\n    this.disposeNoDetach = noDetach;\n    this.disposeNoTransition = noTransition;\n    this.detach();\n  } // exports = module.exports = elementOwnDispose;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 为元素的 el 绑定事件\n   */\n  // var on = require('../browser/on');\n\n  /**\n   * 为元素的 el 绑定事件\n   *\n   * @param {string} name 事件名\n   * @param {Function} listener 监听器\n   * @param {boolean} capture 是否是捕获阶段触发\n   */\n\n\n  function elementOwnOnEl(name, listener, capture) {\n    capture = !!capture;\n\n    this._elFns.push([name, listener, capture]);\n\n    on(this.el, name, listener, capture);\n  } // exports = module.exports = elementOwnOnEl;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 是否浏览器环境\n   */\n\n\n  var isBrowser = typeof window !== 'undefined'; // exports = module.exports = isBrowser;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 开发时的警告提示\n   */\n  // #[begin] error\n\n  /**\n   * 开发时的警告提示\n   *\n   * @param {string} message 警告信息\n   */\n\n  function warn(message) {\n    message = '[SAN WARNING] ' + message;\n    /* eslint-disable no-console */\n\n    /* istanbul ignore next */\n\n    if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === 'object' && console.warn) {\n      console.warn(message);\n    } else {\n      // 防止警告中断调用堆栈\n      setTimeout(function () {\n        throw new Error(message);\n      }, 0);\n    }\n    /* eslint-enable no-console */\n\n  } // #[end]\n  // exports = module.exports = warn;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file  事件绑定不存在的 warning\n   */\n  // var each = require('../util/each');\n  // var warn = require('../util/warn');\n  // #[begin] error\n\n  /**\n   * 事件绑定不存在的 warning\n   *\n   * @param {Object} eventBind 事件绑定对象\n   * @param {Component} owner 所属的组件对象\n   */\n\n\n  function warnEventListenMethod(eventBind, owner) {\n    var valid = true;\n    var method = owner;\n    each(eventBind.expr.name.paths, function (path) {\n      method = method[path.value];\n      valid = !!method;\n      return valid;\n    });\n\n    if (!valid) {\n      var paths = [];\n      each(eventBind.expr.name.paths, function (path) {\n        paths.push(path.value);\n      });\n      warn(eventBind.name + ' listen fail,\"' + paths.join('.') + '\" not exist');\n    }\n  } // #[end]\n  // exports = module.exports = warnEventListenMethod;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 完成元素 attached 后的行为\n   */\n  // var empty = require('../util/empty');\n  // var isBrowser = require('../browser/is-browser');\n  // var trigger = require('../browser/trigger');\n  // var NodeType = require('./node-type');\n  // var elementGetTransition = require('./element-get-transition');\n  // var getEventListener = require('./get-event-listener');\n  // var warnEventListenMethod = require('./warn-event-listen-method');\n\n  /**\n   * 双绑输入框CompositionEnd事件监听函数\n   *\n   * @inner\n   */\n\n\n  function inputOnCompositionEnd() {\n    if (!this.composing) {\n      return;\n    }\n\n    this.composing = 0;\n    trigger(this, 'input');\n  }\n  /**\n   * 双绑输入框CompositionStart事件监听函数\n   *\n   * @inner\n   */\n\n\n  function inputOnCompositionStart() {\n    this.composing = 1;\n  }\n\n  function getXPropOutputer(element, xProp, data) {\n    return function () {\n      xPropOutput(element, xProp, data);\n    };\n  }\n\n  function getInputXPropOutputer(element, xProp, data) {\n    return function () {\n      // #[begin] allua\n\n      /* istanbul ignore if */\n      if (element.__bkph) {\n        element.__bkph = false;\n        return;\n      } // #[end]\n\n\n      if (!this.composing) {\n        xPropOutput(element, xProp, data);\n      }\n    };\n  } // #[begin] allua\n\n  /* istanbul ignore next */\n\n\n  function getInputFocusXPropHandler(element, xProp, data) {\n    return function () {\n      element._inputTimer = setInterval(function () {\n        xPropOutput(element, xProp, data);\n      }, 16);\n    };\n  }\n  /* istanbul ignore next */\n\n\n  function getInputBlurXPropHandler(element) {\n    return function () {\n      clearInterval(element._inputTimer);\n      element._inputTimer = null;\n    };\n  } // #[end]\n\n\n  function xPropOutput(element, bindInfo, data) {\n    /* istanbul ignore if */\n    if (!element.lifeCycle.created) {\n      return;\n    }\n\n    var el = element.el;\n\n    if (element.tagName === 'input' && bindInfo.name === 'checked') {\n      var bindValue = getANodeProp(element.aNode, 'value');\n      var bindType = getANodeProp(element.aNode, 'type');\n\n      if (bindValue && bindType) {\n        switch (el.type.toLowerCase()) {\n          case 'checkbox':\n            data[el.checked ? 'push' : 'remove'](bindInfo.expr, el.value);\n            return;\n\n          case 'radio':\n            el.checked && data.set(bindInfo.expr, el.value, {\n              target: {\n                node: element,\n                prop: bindInfo.name\n              }\n            });\n            return;\n        }\n      }\n    }\n\n    data.set(bindInfo.expr, el[bindInfo.name], {\n      target: {\n        node: element,\n        prop: bindInfo.name\n      }\n    });\n  }\n  /**\n   * 完成元素 attached 后的行为\n   *\n   * @param {Object} element 元素节点\n   */\n\n\n  function elementOwnAttached() {\n    if (this._rootNode) {\n      return;\n    }\n\n    var isComponent = this.nodeType === 5;\n    var data = isComponent ? this.data : this.scope;\n    /* eslint-disable no-redeclare */\n    // 处理自身变化时双向绑定的逻辑\n\n    var xProps = this.aNode.hotspot.xProps;\n\n    for (var i = 0, l = xProps.length; i < l; i++) {\n      var xProp = xProps[i];\n\n      switch (xProp.name) {\n        case 'value':\n          switch (this.tagName) {\n            case 'input':\n            case 'textarea':\n              if (isBrowser && window.CompositionEvent) {\n                this._onEl('change', inputOnCompositionEnd);\n\n                this._onEl('compositionstart', inputOnCompositionStart);\n\n                this._onEl('compositionend', inputOnCompositionEnd);\n              } // #[begin] allua\n\n              /* istanbul ignore else */\n\n\n              if ('oninput' in this.el) {\n                // #[end]\n                this._onEl('input', getInputXPropOutputer(this, xProp, data)); // #[begin] allua\n\n              } else {\n                this._onEl('focusin', getInputFocusXPropHandler(this, xProp, data));\n\n                this._onEl('focusout', getInputBlurXPropHandler(this));\n              } // #[end]\n\n\n              break;\n\n            case 'select':\n              this._onEl('change', getXPropOutputer(this, xProp, data));\n\n              break;\n          }\n\n          break;\n\n        case 'checked':\n          switch (this.tagName) {\n            case 'input':\n              switch (this.el.type) {\n                case 'checkbox':\n                case 'radio':\n                  this._onEl('click', getXPropOutputer(this, xProp, data));\n\n              }\n\n          }\n\n          break;\n      }\n    }\n\n    var owner = isComponent ? this : this.owner;\n\n    for (var i = 0, l = this.aNode.events.length; i < l; i++) {\n      var eventBind = this.aNode.events[i]; // #[begin] error\n\n      warnEventListenMethod(eventBind, owner); // #[end]\n\n      this._onEl(eventBind.name, getEventListener(eventBind, owner, data, eventBind.modifier), eventBind.modifier.capture);\n    }\n\n    if (isComponent) {\n      for (var i = 0, l = this.nativeEvents.length; i < l; i++) {\n        var eventBind = this.nativeEvents[i]; // #[begin] error\n\n        warnEventListenMethod(eventBind, this.owner); // #[end]\n\n        this._onEl(eventBind.name, getEventListener(eventBind, this.owner, this.scope), eventBind.modifier.capture);\n      }\n    }\n\n    var transition = elementGetTransition(this);\n\n    if (transition && transition.enter) {\n      transition.enter(this.el, empty);\n    }\n  } // exports = module.exports = elementOwnAttached;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 初始化节点的 s-bind 数据\n   */\n  // var evalExpr = require('../runtime/eval-expr');\n\n  /**\n   * 初始化节点的 s-bind 数据\n   *\n   * @param {Object} sBind bind指令对象\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @return {boolean}\n   */\n\n\n  function nodeSBindInit(sBind, scope, owner) {\n    if (sBind && scope) {\n      return evalExpr(sBind.value, scope, owner);\n    }\n  } // exports = module.exports = nodeSBindInit;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 计算两个对象 key 的并集\n   */\n\n  /**\n   * 计算两个对象 key 的并集\n   *\n   * @param {Object} obj1 目标对象\n   * @param {Object} obj2 源对象\n   * @return {Array}\n   */\n\n\n  function unionKeys(obj1, obj2) {\n    var result = [];\n    var key;\n\n    for (key in obj1) {\n      /* istanbul ignore else  */\n      if (obj1.hasOwnProperty(key)) {\n        result.push(key);\n      }\n    }\n\n    for (key in obj2) {\n      /* istanbul ignore else  */\n      if (obj2.hasOwnProperty(key)) {\n        !obj1[key] && result.push(key);\n      }\n    }\n\n    return result;\n  } // exports = module.exports = unionKeys;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 更新节点的 s-bind 数据\n   */\n  // var unionKeys = require('../util/union-keys');\n  // var evalExpr = require('../runtime/eval-expr');\n  // var changeExprCompare = require('../runtime/change-expr-compare');\n\n  /**\n   * 更新节点的 s-bind 数据\n   *\n   * @param {Object} sBind bind指令对象\n   * @param {Object} oldBindData 当前s-bind数据\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @param {Array} changes 变更数组\n   * @param {Function} updater 绑定对象子项变更的更新函数\n   */\n\n\n  function nodeSBindUpdate(sBind, oldBindData, scope, owner, changes, updater) {\n    if (sBind) {\n      var len = changes.length;\n\n      while (len--) {\n        if (changeExprCompare(changes[len].expr, sBind.value, scope)) {\n          var newBindData = evalExpr(sBind.value, scope, owner);\n          var keys = unionKeys(newBindData, oldBindData);\n\n          for (var i = 0, l = keys.length; i < l; i++) {\n            var key = keys[i];\n            var value = newBindData[key];\n\n            if (value !== oldBindData[key]) {\n              updater(key, value);\n            }\n          }\n\n          return newBindData;\n        }\n      }\n\n      return oldBindData;\n    }\n  } // exports = module.exports = nodeSBindUpdate;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 判断元素是否不允许设置HTML\n   */\n  // some html elements cannot set innerHTML in old ie\n  // see: https://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx\n\n  /**\n   * 判断元素是否不允许设置HTML\n   *\n   * @param {HTMLElement} el 要判断的元素\n   * @return {boolean}\n   */\n\n\n  function noSetHTML(el) {\n    return /^(col|colgroup|frameset|style|table|tbody|tfoot|thead|tr|select)$/i.test(el.tagName);\n  } // exports = module.exports = noSetHTML;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file  获取节点 stump 的 comment\n   */\n  // var noSetHTML = require('../browser/no-set-html');\n  // var warn = require('../util/warn');\n  // #[begin] error\n\n  /**\n   * 获取节点 stump 的 comment\n   *\n   * @param {HTMLElement} el HTML元素\n   */\n\n\n  function warnSetHTML(el) {\n    // dont warn if not in browser runtime\n\n    /* istanbul ignore if */\n    if (!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document)) {\n      return;\n    } // some html elements cannot set innerHTML in old ie\n    // see: https://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx\n\n\n    if (noSetHTML(el)) {\n      warn('set html for element \"' + el.tagName + '\" may cause an error in old IE');\n    }\n  } // #[end]\n  // exports = module.exports = warnSetHTML;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 获取节点在组件树中的路径\n   */\n  // var NodeType = require('./node-type');\n  // #[begin] reverse\n\n  /**\n   * 获取节点在组件树中的路径\n   *\n   * @param {Node} node 节点对象\n   * @return {Array}\n   */\n\n  /* istanbul ignore next */\n\n\n  function getNodePath(node) {\n    var nodePaths = [];\n    var nodeParent = node;\n\n    while (nodeParent) {\n      switch (nodeParent.nodeType) {\n        case 4:\n          nodePaths.unshift(nodeParent.tagName);\n          break;\n\n        case 2:\n          nodePaths.unshift('if');\n          break;\n\n        case 3:\n          nodePaths.unshift('for[' + nodeParent.aNode.directives['for'].item + ']'); // eslint-disable-line dot-notation\n\n          break;\n\n        case 6:\n          nodePaths.unshift('slot[' + (nodeParent.name || 'default') + ']');\n          break;\n\n        case 7:\n          nodePaths.unshift('template');\n          break;\n\n        case 5:\n          nodePaths.unshift('component[' + (nodeParent.source ? nodeParent.source.tagName : 'root') + ']');\n          break;\n\n        case 1:\n          nodePaths.unshift('text');\n          break;\n      }\n\n      nodeParent = nodeParent.parent;\n    }\n\n    return nodePaths;\n  } // #[end]\n  // exports = module.exports = getNodePath;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 解压缩 ANode\n   */\n  // var ExprType = require('./expr-type');\n\n  /**\n   * 解压缩 ANode\n   *\n   * @param {Array} packed ANode压缩数据\n   * @return {Object}\n   */\n\n\n  function unpackANode(packed) {\n    var root;\n    var nodeStack = [];\n    var typeStack = [];\n    var stateStack = [];\n    var targetStack = [];\n    var stackIndex = -1;\n\n    for (var i = 0, l = packed.length; i < l; i++) {\n      var current = nodeStack[stackIndex];\n      var currentType = typeStack[stackIndex];\n      var currentState = stateStack[stackIndex];\n      var currentTarget = targetStack[stackIndex];\n\n      while (current) {\n        if (currentState === -3) {\n          currentState = stateStack[stackIndex] = packed[i++] || -1;\n        }\n\n        if (currentState === -1) {\n          current = nodeStack[--stackIndex];\n          currentType = typeStack[stackIndex];\n          currentState = stateStack[stackIndex];\n          currentTarget = targetStack[stackIndex];\n        } else {\n          break;\n        }\n      }\n\n      var type = packed[i];\n      var node;\n      var state = -1;\n      var target = false;\n\n      switch (type) {\n        // Node: Tag\n        case 1:\n          node = {\n            directives: {},\n            props: [],\n            events: [],\n            children: []\n          };\n          var tagName = packed[++i];\n          tagName && (node.tagName = tagName);\n          state = packed[++i] || -1;\n          break;\n\n        case 3:\n          node = {\n            type: 1,\n            value: packed[++i]\n          };\n          break;\n\n        case 4:\n          node = {\n            type: 2,\n            value: packed[++i]\n          };\n          break;\n\n        case 5:\n          node = {\n            type: 3,\n            value: !!packed[++i]\n          };\n          break;\n\n        case 19:\n          node = {\n            type: 13\n          };\n          break;\n\n        case 6:\n          target = [];\n          node = {\n            type: 4,\n            paths: target\n          };\n          state = packed[++i] || -1;\n          break;\n\n        case 7:\n          target = [];\n          node = {\n            type: 5,\n            filters: target\n          };\n          packed[++i] && (node.original = 1);\n          state = -2;\n          break;\n\n        case 8:\n          target = [];\n          node = {\n            type: 6,\n            args: target\n          };\n          state = -2;\n          break;\n\n        case 9:\n          target = [];\n          node = {\n            type: 7,\n            segs: target\n          };\n          packed[++i] && (node.original = 1);\n          state = packed[++i] || -1;\n          break;\n\n        case 10:\n          target = [];\n          node = {\n            type: 8,\n            operator: packed[++i],\n            segs: target\n          };\n          state = 2;\n          break;\n\n        case 11:\n          node = {\n            type: 9,\n            operator: packed[++i]\n          };\n          state = -2;\n          break;\n\n        case 12:\n          target = [];\n          node = {\n            type: 10,\n            segs: target\n          };\n          state = 3;\n          break;\n\n        case 13:\n          target = [];\n          node = {\n            type: 11,\n            items: target\n          };\n          state = packed[++i] || -1;\n          break;\n\n        case 14:\n          node = {};\n          state = -2;\n          break;\n\n        case 15:\n          node = {\n            spread: true\n          };\n          state = -2;\n          break;\n\n        case 16:\n          target = [];\n          node = {\n            type: 12,\n            items: target\n          };\n          state = packed[++i] || -1;\n          break;\n\n        case 17:\n        case 18:\n          node = type === 18 ? {\n            spread: true\n          } : {};\n          state = -2;\n          break;\n\n        case 2:\n        case 33:\n        case 34:\n          node = {\n            name: packed[++i]\n          };\n          type === 33 && (node.noValue = 1);\n          type === 34 && (node.x = 1);\n          state = -2;\n          break;\n\n        case 35:\n          node = {\n            name: packed[++i],\n            modifier: {}\n          };\n          state = -2;\n          break;\n\n        case 36:\n          node = {\n            name: packed[++i]\n          };\n          state = -2;\n          break;\n\n        case 37:\n          node = {\n            item: packed[++i]\n          };\n          var forIndex = packed[++i];\n          forIndex && (node.index = forIndex);\n          var trackBy = packed[++i];\n\n          if (trackBy) {\n            node.trackByRaw = trackBy;\n            node.trackBy = parseExpr(trackBy);\n          }\n\n          state = -2;\n          break;\n\n        case 38:\n        case 39:\n        case 41:\n        case 42:\n        case 43:\n        case 44:\n        case 45:\n          node = {};\n          state = -2;\n          break;\n        // else\n\n        case 40:\n          node = {\n            value: {}\n          };\n          break;\n        // Node: Text\n        // Event modifier\n\n        default:\n          if (!type) {\n            node = {};\n            state = -2;\n          }\n\n      }\n\n      if (!root) {\n        root = node;\n      }\n\n      if (current) {\n        switch (currentType) {\n          // Node: Tag\n          case 1:\n            if (currentTarget) {\n              current.elses = current.elses || [];\n              current.elses.push(node);\n\n              if (! --stateStack[stackIndex]) {\n                stackIndex--;\n              }\n            } else {\n              switch (type) {\n                case 2:\n                case 33:\n                case 34:\n                  current.props.push(node);\n                  break;\n\n                case 35:\n                  current.events.push(node);\n                  break;\n\n                case 36:\n                  current.vars = current.vars || [];\n                  current.vars.push(node);\n                  break;\n\n                case 37:\n                  current.directives['for'] = node;\n                  break;\n\n                case 38:\n                  current.directives['if'] = node;\n                  break;\n\n                case 39:\n                  current.directives.elif = node;\n                  break;\n\n                case 40:\n                  current.directives['else'] = node;\n                  break;\n\n                case 41:\n                  current.directives.ref = node;\n                  break;\n\n                case 42:\n                  current.directives.bind = node;\n                  break;\n\n                case 43:\n                  current.directives.html = node;\n                  break;\n\n                case 44:\n                  current.directives.transition = node;\n                  break;\n\n                case 45:\n                  current.directives.is = node;\n                  break;\n\n                case 1:\n                default:\n                  current.children.push(node);\n              }\n\n              if (! --stateStack[stackIndex]) {\n                if (current.directives['if']) {\n                  targetStack[stackIndex] = 'elses';\n                  stateStack[stackIndex] = -3;\n                } else {\n                  stackIndex--;\n                }\n              }\n            }\n\n            break;\n          // Expr: Interp\n\n          case 7:\n            if (currentState === -2) {\n              stateStack[stackIndex] = -3;\n              current.expr = node;\n            } else {\n              currentTarget.push(node);\n\n              if (! --stateStack[stackIndex]) {\n                stackIndex--;\n              }\n            }\n\n            break;\n          // Expr: CALL\n\n          case 8:\n            if (currentState === -2) {\n              stateStack[stackIndex] = -3;\n              current.name = node;\n            } else {\n              currentTarget.push(node);\n\n              if (! --stateStack[stackIndex]) {\n                stackIndex--;\n              }\n            }\n\n            break;\n          // Expr: ACCESSOR, TEXT, BINARY, TERTIARY, OBJECT, ARRAY\n\n          case 6:\n          case 9:\n          case 10:\n          case 12:\n          case 13:\n          case 16:\n            currentTarget.push(node);\n\n            if (! --stateStack[stackIndex]) {\n              stackIndex--;\n            }\n\n            break;\n          // Expr: UNARY\n          // Prop\n          // var\n          // Object Spread Item, Array Item\n\n          case 11:\n          case 2:\n          case 33:\n          case 34:\n          case 36:\n          case 15:\n          case 17:\n          case 18:\n            current.expr = node;\n            stackIndex--;\n            break;\n          // Expr: Object Item\n\n          case 14:\n            if (currentState === -2) {\n              stateStack[stackIndex] = -4;\n              current.name = node;\n            } else {\n              current.expr = node;\n              stackIndex--;\n            }\n\n            break;\n          // Event\n\n          case 35:\n            if (currentState === -2) {\n              stateStack[stackIndex] = -3;\n              current.expr = node;\n            } else {\n              current.modifier[type] = true;\n\n              if (! --stateStack[stackIndex]) {\n                stackIndex--;\n              }\n            }\n\n            break;\n          // Directive: for, if, elif, ref, bind, html, transition, is\n\n          case 37:\n          case 38:\n          case 39:\n          case 41:\n          case 42:\n          case 43:\n          case 44:\n          case 45:\n            current.value = node;\n            stackIndex--;\n            break;\n          // Node: Text\n\n          default:\n            current.textExpr = node;\n            stackIndex--;\n        }\n      }\n\n      if (state !== -1) {\n        nodeStack[++stackIndex] = node;\n        typeStack[stackIndex] = type;\n        stateStack[stackIndex] = state;\n        targetStack[stackIndex] = target;\n      }\n    }\n\n    return root;\n  }\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 给 devtool 发通知消息\n   */\n  // var isBrowser = require('../browser/is-browser');\n  // #[begin] devtool\n\n\n  var san4devtool;\n  /**\n   * 给 devtool 发通知消息\n   *\n   * @param {string} name 消息名称\n   * @param {*} arg 消息参数\n   */\n\n  function emitDevtool(name, arg) {\n    /* istanbul ignore if */\n    if (isBrowser && san4devtool && san4devtool.debug && window.__san_devtool__) {\n      window.__san_devtool__.emit(name, arg);\n    }\n  }\n\n  emitDevtool.start = function (main) {\n    san4devtool = main;\n    emitDevtool('san', main);\n  }; // #[end]\n  // exports = module.exports = emitDevtool;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 组件类\n   */\n  // var bind = require('../util/bind');\n  // var each = require('../util/each');\n  // var guid = require('../util/guid');\n  // var extend = require('../util/extend');\n  // var nextTick = require('../util/next-tick');\n  // var emitDevtool = require('../util/emit-devtool');\n  // var ExprType = require('../parser/expr-type');\n  // var parseExpr = require('../parser/parse-expr');\n  // var parseTemplate = require('../parser/parse-template');\n  // var unpackANode = require('../parser/unpack-anode');\n  // var removeEl = require('../browser/remove-el');\n  // var Data = require('../runtime/data');\n  // var evalExpr = require('../runtime/eval-expr');\n  // var changeExprCompare = require('../runtime/change-expr-compare');\n  // var DataChangeType = require('../runtime/data-change-type');\n  // var insertBefore = require('../browser/insert-before');\n  // var un = require('../browser/un');\n  // var defineComponent = require('./define-component');\n  // var ComponentLoader = require('./component-loader');\n  // var createNode = require('./create-node');\n  // var parseComponentTemplate = require('./parse-component-template');\n  // var preheatANode = require('./preheat-a-node');\n  // var LifeCycle = require('./life-cycle');\n  // var getANodeProp = require('./get-a-node-prop');\n  // var isDataChangeByElement = require('./is-data-change-by-element');\n  // var getEventListener = require('./get-event-listener');\n  // var reverseElementChildren = require('./reverse-element-children');\n  // var NodeType = require('./node-type');\n  // var nodeSBindInit = require('./node-s-bind-init');\n  // var nodeSBindUpdate = require('./node-s-bind-update');\n  // var elementOwnAttached = require('./element-own-attached');\n  // var elementOwnOnEl = require('./element-own-on-el');\n  // var elementOwnDetach = require('./element-own-detach');\n  // var elementOwnDispose = require('./element-own-dispose');\n  // var warnEventListenMethod = require('./warn-event-listen-method');\n  // var elementDisposeChildren = require('./element-dispose-children');\n  // var createDataTypesChecker = require('../util/create-data-types-checker');\n  // var warn = require('../util/warn');\n\n  /**\n   * 组件类\n   *\n   * @class\n   * @param {Object} options 初始化参数\n   */\n\n\n  function Component(options) {\n    // eslint-disable-line\n    // #[begin] error\n    for (var key in Component.prototype) {\n      if (this[key] !== Component.prototype[key]) {\n        /* eslint-disable max-len */\n        warn('\\`' + key + '\\` is a reserved key of san components. Overriding this property may cause unknown exceptions.');\n        /* eslint-enable max-len */\n      }\n    } // #[end]\n\n\n    options = options || {};\n    this.lifeCycle = LifeCycle.start;\n    this.id = guid++;\n\n    if (typeof this.construct === 'function') {\n      this.construct(options);\n    }\n\n    this.children = [];\n    this._elFns = [];\n    this.listeners = {};\n    this.slotChildren = [];\n    this.implicitChildren = [];\n    var clazz = this.constructor;\n    this.filters = this.filters || clazz.filters || {};\n    this.computed = this.computed || clazz.computed || {};\n    this.messages = this.messages || clazz.messages || {};\n\n    if (options.transition) {\n      this.transition = options.transition;\n    }\n\n    this.owner = options.owner;\n    this.scope = options.scope;\n    this.el = options.el;\n    var parent = options.parent;\n\n    if (parent) {\n      this.parent = parent;\n      this.parentComponent = parent.nodeType === 5 ? parent : parent && parent.parentComponent;\n    } else if (this.owner) {\n      this.parentComponent = this.owner;\n      this.scope = this.owner.data;\n    }\n\n    this.sourceSlotNameProps = [];\n    this.sourceSlots = {\n      named: {}\n    }; // #[begin] devtool\n\n    this._toPhase('beforeCompile'); // #[end]\n\n\n    var proto = clazz.prototype; // pre define components class\n\n    /* istanbul ignore else  */\n\n    if (!proto.hasOwnProperty('_cmptReady')) {\n      proto.components = clazz.components || proto.components || {};\n      var components = proto.components;\n\n      for (var key in components) {\n        // eslint-disable-line\n        var cmptClass = components[key];\n\n        if (_typeof(cmptClass) === 'object' && !(cmptClass instanceof ComponentLoader)) {\n          components[key] = defineComponent(cmptClass);\n        } else if (cmptClass === 'self') {\n          components[key] = clazz;\n        }\n      }\n\n      proto._cmptReady = 1;\n    } // compile\n\n\n    if (!proto.hasOwnProperty('aNode')) {\n      var aPack = clazz.aPack || proto.hasOwnProperty('aPack') && proto.aPack;\n\n      if (aPack) {\n        proto.aNode = unpackANode(aPack);\n        clazz.aPack = proto.aPack = null;\n      } else {\n        proto.aNode = parseComponentTemplate(clazz);\n      }\n    }\n\n    preheatANode(proto.aNode, this);\n    this.tagName = proto.aNode.tagName;\n    this.source = typeof options.source === 'string' ? parseTemplate(options.source).children[0] : options.source;\n    preheatANode(this.source); // #[begin] reverse\n    // 组件反解，读取注入的组件数据\n\n    if (this.el) {\n      var firstCommentNode = this.el.firstChild;\n\n      if (firstCommentNode && firstCommentNode.nodeType === 3) {\n        firstCommentNode = firstCommentNode.nextSibling;\n      }\n\n      if (firstCommentNode && firstCommentNode.nodeType === 8) {\n        var stumpMatch = firstCommentNode.data.match(/^\\s*s-data:([\\s\\S]+)?$/);\n\n        if (stumpMatch) {\n          var stumpText = stumpMatch[1]; // fill component data\n\n          options.data = new Function('return ' + stumpText.replace(/^[\\s\\n]*/, '').replace(/\"(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})\\.\\d+Z\"/g, function (match, y, mon, d, h, m, s) {\n            return 'new Date(' + +y + ',' + +mon + ',' + +d + ',' + +h + ',' + +m + ',' + +s + ')';\n          }))();\n\n          if (firstCommentNode.previousSibling) {\n            removeEl(firstCommentNode.previousSibling);\n          }\n\n          removeEl(firstCommentNode);\n        }\n      }\n    } // #[end]\n    // native事件数组\n\n\n    this.nativeEvents = [];\n\n    if (this.source) {\n      // 组件运行时传入的结构，做slot解析\n      this._initSourceSlots(1);\n\n      for (var i = 0, l = this.source.events.length; i < l; i++) {\n        var eventBind = this.source.events[i]; // 保存当前实例的native事件，下面创建aNode时候做合并\n\n        if (eventBind.modifier.native) {\n          this.nativeEvents.push(eventBind);\n        } else {\n          // #[begin] error\n          warnEventListenMethod(eventBind, options.owner); // #[end]\n\n          this.on(eventBind.name, getEventListener(eventBind, options.owner, this.scope, 1), eventBind);\n        }\n      }\n\n      this.tagName = this.tagName || this.source.tagName;\n      this.binds = this.source.hotspot.binds; // init s-bind data\n\n      this._srcSbindData = nodeSBindInit(this.source.directives.bind, this.scope, this.owner);\n    }\n\n    this._toPhase('compiled'); // #[begin] devtool\n\n\n    this._toPhase('beforeInit'); // #[end]\n    // init data\n\n\n    var initData = extend(typeof this.initData === 'function' && this.initData() || {}, options.data || this._srcSbindData);\n\n    if (this.binds && this.scope) {\n      for (var i = 0, l = this.binds.length; i < l; i++) {\n        var bindInfo = this.binds[i];\n        var value = evalExpr(bindInfo.expr, this.scope, this.owner);\n\n        if (typeof value !== 'undefined') {\n          // See: https://github.com/ecomfe/san/issues/191\n          initData[bindInfo.name] = value;\n        }\n      }\n    }\n\n    this.data = new Data(initData);\n    this.tagName = this.tagName || 'div'; // #[begin] allua\n    // ie8- 不支持innerHTML输出自定义标签\n\n    /* istanbul ignore if */\n\n    if (ieOldThan9 && this.tagName.indexOf('-') > 0) {\n      this.tagName = 'div';\n    } // #[end]\n    // #[begin] error\n    // 在初始化 + 数据绑定后，开始数据校验\n    // NOTE: 只在开发版本中进行属性校验\n\n\n    var dataTypes = this.dataTypes || clazz.dataTypes;\n\n    if (dataTypes) {\n      var dataTypeChecker = createDataTypesChecker(dataTypes, this.name || clazz.name);\n      this.data.setTypeChecker(dataTypeChecker);\n      this.data.checkDataTypes();\n    } // #[end]\n\n\n    this.computedDeps = {};\n\n    for (var expr in this.computed) {\n      if (this.computed.hasOwnProperty(expr) && !this.computedDeps[expr]) {\n        this._calcComputed(expr);\n      }\n    }\n\n    this._initDataChanger();\n\n    this._sbindData = nodeSBindInit(this.aNode.directives.bind, this.data, this);\n\n    this._toPhase('inited'); // #[begin] reverse\n\n\n    var reverseWalker = options.reverseWalker;\n\n    if (this.el || reverseWalker) {\n      var RootComponentType = this.components[this.aNode.tagName];\n\n      if (reverseWalker && (this.aNode.hotspot.hasRootNode || RootComponentType)) {\n        this._rootNode = createReverseNode(this.aNode, this, this.data, this, reverseWalker);\n        this._rootNode._getElAsRootNode && (this.el = this._rootNode._getElAsRootNode());\n      } else if (this.el && RootComponentType) {\n        this._rootNode = new RootComponentType({\n          source: this.aNode,\n          owner: this,\n          scope: this.data,\n          parent: this,\n          el: this.el\n        });\n      } else {\n        if (reverseWalker) {\n          var currentNode = reverseWalker.current;\n\n          if (currentNode && currentNode.nodeType === 1) {\n            this.el = currentNode;\n            reverseWalker.goNext();\n          }\n        }\n\n        reverseElementChildren(this, this.data, this);\n      }\n\n      this._toPhase('created');\n\n      this._attached();\n\n      this._toPhase('attached');\n    } // #[end]\n\n  }\n  /**\n   * 初始化创建组件外部传入的插槽对象\n   *\n   * @protected\n   * @param {boolean} isFirstTime 是否初次对sourceSlots进行计算\n   */\n\n\n  Component.prototype._initSourceSlots = function (isFirstTime) {\n    this.sourceSlots.named = {}; // 组件运行时传入的结构，做slot解析\n\n    if (this.source && this.scope) {\n      var sourceChildren = this.source.children;\n\n      for (var i = 0, l = sourceChildren.length; i < l; i++) {\n        var child = sourceChildren[i];\n        var target;\n        var slotBind = !child.textExpr && getANodeProp(child, 'slot');\n\n        if (slotBind) {\n          isFirstTime && this.sourceSlotNameProps.push(slotBind);\n          var slotName = evalExpr(slotBind.expr, this.scope, this.owner);\n          target = this.sourceSlots.named[slotName];\n\n          if (!target) {\n            target = this.sourceSlots.named[slotName] = [];\n          }\n\n          target.push(child);\n        } else if (isFirstTime) {\n          target = this.sourceSlots.noname;\n\n          if (!target) {\n            target = this.sourceSlots.noname = [];\n          }\n\n          target.push(child);\n        }\n      }\n    }\n  };\n  /**\n   * 类型标识\n   *\n   * @type {string}\n   */\n\n\n  Component.prototype.nodeType = 5;\n  /**\n   * 在下一个更新周期运行函数\n   *\n   * @param {Function} fn 要运行的函数\n   */\n\n  Component.prototype.nextTick = nextTick;\n  Component.prototype._ctx = new Date().getTime().toString(16);\n  /* eslint-disable operator-linebreak */\n\n  /**\n   * 使节点到达相应的生命周期\n   *\n   * @protected\n   * @param {string} name 生命周期名称\n   */\n\n  Component.prototype._toPhase = function (name) {\n    if (!this.lifeCycle[name]) {\n      this.lifeCycle = LifeCycle[name] || this.lifeCycle;\n\n      if (typeof this[name] === 'function') {\n        this[name]();\n      }\n\n      this._afterLife = this.lifeCycle; // 通知devtool\n      // #[begin] devtool\n\n      emitDevtool('comp-' + name, this); // #[end]\n    }\n  };\n  /* eslint-enable operator-linebreak */\n\n  /**\n   * 添加事件监听器\n   *\n   * @param {string} name 事件名\n   * @param {Function} listener 监听器\n   * @param {string?} declaration 声明式\n   */\n\n\n  Component.prototype.on = function (name, listener, declaration) {\n    if (typeof listener === 'function') {\n      if (!this.listeners[name]) {\n        this.listeners[name] = [];\n      }\n\n      this.listeners[name].push({\n        fn: listener,\n        declaration: declaration\n      });\n    }\n  };\n  /**\n   * 移除事件监听器\n   *\n   * @param {string} name 事件名\n   * @param {Function=} listener 监听器\n   */\n\n\n  Component.prototype.un = function (name, listener) {\n    var nameListeners = this.listeners[name];\n    var len = nameListeners && nameListeners.length;\n\n    while (len--) {\n      if (!listener || listener === nameListeners[len].fn) {\n        nameListeners.splice(len, 1);\n      }\n    }\n  };\n  /**\n   * 派发事件\n   *\n   * @param {string} name 事件名\n   * @param {Object} event 事件对象\n   */\n\n\n  Component.prototype.fire = function (name, event) {\n    var me = this; // #[begin] devtool\n\n    emitDevtool('comp-event', {\n      name: name,\n      event: event,\n      target: this\n    }); // #[end]\n\n    each(this.listeners[name], function (listener) {\n      listener.fn.call(me, event);\n    });\n  };\n  /**\n   * 计算 computed 属性的值\n   *\n   * @private\n   * @param {string} computedExpr computed表达式串\n   */\n\n\n  Component.prototype._calcComputed = function (computedExpr) {\n    var computedDeps = this.computedDeps[computedExpr];\n\n    if (!computedDeps) {\n      computedDeps = this.computedDeps[computedExpr] = {};\n    }\n\n    var me = this;\n    this.data.set(computedExpr, this.computed[computedExpr].call({\n      data: {\n        get: function get(expr) {\n          // #[begin] error\n          if (!expr) {\n            throw new Error('[SAN ERROR] call get method in computed need argument');\n          } // #[end]\n\n\n          if (!computedDeps[expr]) {\n            computedDeps[expr] = 1;\n\n            if (me.computed[expr] && !me.computedDeps[expr]) {\n              me._calcComputed(expr);\n            }\n\n            me.watch(expr, function () {\n              me._calcComputed(computedExpr);\n            });\n          }\n\n          return me.data.get(expr);\n        }\n      }\n    }));\n  };\n  /**\n   * 派发消息\n   * 组件可以派发消息，消息将沿着组件树向上传递，直到遇上第一个处理消息的组件\n   *\n   * @param {string} name 消息名称\n   * @param {*?} value 消息值\n   */\n\n\n  Component.prototype.dispatch = function (name, value) {\n    var parentComponent = this.parentComponent;\n\n    while (parentComponent) {\n      var handler = parentComponent.messages[name] || parentComponent.messages['*'];\n\n      if (typeof handler === 'function') {\n        // #[begin] devtool\n        emitDevtool('comp-message', {\n          target: this,\n          value: value,\n          name: name,\n          receiver: parentComponent\n        }); // #[end]\n\n        handler.call(parentComponent, {\n          target: this,\n          value: value,\n          name: name\n        });\n        return;\n      }\n\n      parentComponent = parentComponent.parentComponent;\n    } // #[begin] devtool\n\n\n    emitDevtool('comp-message', {\n      target: this,\n      value: value,\n      name: name\n    }); // #[end]\n  };\n  /**\n   * 获取组件内部的 slot\n   *\n   * @param {string=} name slot名称，空为default slot\n   * @return {Array}\n   */\n\n\n  Component.prototype.slot = function (name) {\n    var result = [];\n    var me = this;\n\n    function childrenTraversal(children) {\n      each(children, function (child) {\n        if (child.nodeType === 6 && child.owner === me) {\n          if (child.isNamed && child.name === name || !child.isNamed && !name) {\n            result.push(child);\n          }\n        } else {\n          childrenTraversal(child.children);\n        }\n      });\n    }\n\n    childrenTraversal(this.children);\n    return result;\n  };\n  /**\n   * 获取带有 san-ref 指令的子组件引用\n   *\n   * @param {string} name 子组件的引用名\n   * @return {Component}\n   */\n\n\n  Component.prototype.ref = function (name) {\n    var refTarget;\n    var owner = this;\n\n    function childrenTraversal(children) {\n      if (children) {\n        for (var i = 0, l = children.length; i < l; i++) {\n          elementTraversal(children[i]);\n\n          if (refTarget) {\n            return;\n          }\n        }\n      }\n    }\n\n    function elementTraversal(element) {\n      var nodeType = element.nodeType;\n\n      if (nodeType === 1) {\n        return;\n      }\n\n      if (element.owner === owner) {\n        var ref;\n\n        switch (element.nodeType) {\n          case 4:\n            ref = element.aNode.directives.ref;\n\n            if (ref && evalExpr(ref.value, element.scope, owner) === name) {\n              refTarget = element.el;\n            }\n\n            break;\n\n          case 5:\n            ref = element.source.directives.ref;\n\n            if (ref && evalExpr(ref.value, element.scope, owner) === name) {\n              refTarget = element;\n            }\n\n        }\n\n        if (refTarget) {\n          return;\n        }\n\n        childrenTraversal(element.slotChildren);\n      }\n\n      if (refTarget) {\n        return;\n      }\n\n      childrenTraversal(element.children);\n    }\n\n    this._rootNode ? elementTraversal(this._rootNode) : childrenTraversal(this.children);\n    return refTarget;\n  };\n  /**\n   * 视图更新函数\n   *\n   * @param {Array?} changes 数据变化信息\n   */\n\n\n  Component.prototype._update = function (changes) {\n    if (this.lifeCycle.disposed) {\n      return;\n    }\n\n    var me = this;\n    var needReloadForSlot = false;\n\n    this._notifyNeedReload = function () {\n      needReloadForSlot = true;\n    };\n\n    if (changes) {\n      if (this.source) {\n        this._srcSbindData = nodeSBindUpdate(this.source.directives.bind, this._srcSbindData, this.scope, this.owner, changes, function (name, value) {\n          if (name in me.source.hotspot.props) {\n            return;\n          }\n\n          me.data.set(name, value, {\n            target: {\n              node: me.owner\n            }\n          });\n        });\n      }\n\n      each(changes, function (change) {\n        var changeExpr = change.expr;\n        each(me.binds, function (bindItem) {\n          var relation;\n          var setExpr = bindItem.name;\n          var updateExpr = bindItem.expr;\n\n          if (!isDataChangeByElement(change, me, setExpr) && (relation = changeExprCompare(changeExpr, updateExpr, me.scope))) {\n            if (relation > 2) {\n              setExpr = {\n                type: 4,\n                paths: [{\n                  type: 1,\n                  value: setExpr\n                }].concat(changeExpr.paths.slice(updateExpr.paths.length))\n              };\n              updateExpr = changeExpr;\n            }\n\n            if (relation >= 2 && change.type === 2) {\n              me.data.splice(setExpr, [change.index, change.deleteCount].concat(change.insertions), {\n                target: {\n                  node: me.owner\n                }\n              });\n            } else {\n              me.data.set(setExpr, evalExpr(updateExpr, me.scope, me.owner), {\n                target: {\n                  node: me.owner\n                }\n              });\n            }\n          }\n        });\n        each(me.sourceSlotNameProps, function (bindItem) {\n          needReloadForSlot = needReloadForSlot || changeExprCompare(changeExpr, bindItem.expr, me.scope);\n          return !needReloadForSlot;\n        });\n      });\n\n      if (needReloadForSlot) {\n        this._initSourceSlots();\n\n        this._repaintChildren();\n      } else {\n        var slotChildrenLen = this.slotChildren.length;\n\n        while (slotChildrenLen--) {\n          var slotChild = this.slotChildren[slotChildrenLen];\n\n          if (slotChild.lifeCycle.disposed) {\n            this.slotChildren.splice(slotChildrenLen, 1);\n          } else if (slotChild.isInserted) {\n            slotChild._update(changes, 1);\n          }\n        }\n      }\n    }\n\n    var dataChanges = this._dataChanges;\n\n    if (dataChanges) {\n      // #[begin] devtool\n      this._toPhase('beforeUpdate'); // #[end]\n\n\n      this._dataChanges = null;\n      this._sbindData = nodeSBindUpdate(this.aNode.directives.bind, this._sbindData, this.data, this, dataChanges, function (name, value) {\n        if (me._rootNode || name in me.aNode.hotspot.props) {\n          return;\n        }\n\n        getPropHandler(me.tagName, name)(me.el, value, name, me);\n      });\n\n      if (this._rootNode) {\n        this._rootNode._update(dataChanges);\n\n        this._rootNode._getElAsRootNode && (this.el = this._rootNode._getElAsRootNode());\n      } else {\n        var dynamicProps = this.aNode.hotspot.dynamicProps;\n\n        for (var i = 0; i < dynamicProps.length; i++) {\n          var prop = dynamicProps[i];\n\n          for (var j = 0; j < dataChanges.length; j++) {\n            var change = dataChanges[j];\n\n            if (changeExprCompare(change.expr, prop.expr, this.data) || prop.hintExpr && changeExprCompare(change.expr, prop.hintExpr, this.data)) {\n              prop.handler(this.el, evalExpr(prop.expr, this.data, this), prop.name, this);\n              break;\n            }\n          }\n        }\n\n        for (var i = 0; i < this.children.length; i++) {\n          this.children[i]._update(dataChanges);\n        }\n      }\n\n      if (needReloadForSlot) {\n        this._initSourceSlots();\n\n        this._repaintChildren();\n      }\n\n      for (var i = 0; i < this.implicitChildren.length; i++) {\n        this.implicitChildren[i]._update(dataChanges);\n      }\n\n      if (typeof this.updated === 'function') {\n        this.updated();\n      }\n\n      if (this.owner && this._updateBindxOwner(dataChanges)) {\n        this.owner._update();\n      }\n    }\n\n    this._notifyNeedReload = null;\n  };\n\n  Component.prototype._updateBindxOwner = function (dataChanges) {\n    var me = this;\n    var xbindUped;\n    each(dataChanges, function (change) {\n      each(me.binds, function (bindItem) {\n        var changeExpr = change.expr;\n\n        if (bindItem.x && !isDataChangeByElement(change, me.owner) && changeExprCompare(changeExpr, parseExpr(bindItem.name), me.data)) {\n          var updateScopeExpr = bindItem.expr;\n\n          if (changeExpr.paths.length > 1) {\n            updateScopeExpr = {\n              type: 4,\n              paths: bindItem.expr.paths.concat(changeExpr.paths.slice(1))\n            };\n          }\n\n          xbindUped = 1;\n          me.scope.set(updateScopeExpr, evalExpr(changeExpr, me.data, me), {\n            target: {\n              node: me,\n              prop: bindItem.name\n            }\n          });\n        }\n      });\n    });\n    return xbindUped;\n  };\n  /**\n   * 重新绘制组件的内容\n   * 当 dynamic slot name 发生变更或 slot 匹配发生变化时，重新绘制\n   * 在组件级别重绘有点粗暴，但是能保证视图结果正确性\n   */\n\n\n  Component.prototype._repaintChildren = function () {\n    // TODO: repaint once?\n    if (this._rootNode) {\n      var parentEl = this._rootNode.el.parentNode;\n      var beforeEl = this._rootNode.el.nextSibling;\n\n      this._rootNode.dispose(0, 1);\n\n      this.slotChildren = [];\n      this._rootNode = createNode(this.aNode, this, this.data, this);\n\n      this._rootNode.attach(parentEl, beforeEl);\n\n      this._rootNode._getElAsRootNode && (this.el = this._rootNode._getElAsRootNode());\n    } else {\n      elementDisposeChildren(this.children, 0, 1);\n      this.children = [];\n      this.slotChildren = [];\n\n      for (var i = 0, l = this.aNode.children.length; i < l; i++) {\n        var child = createNode(this.aNode.children[i], this, this.data, this);\n        this.children.push(child);\n        child.attach(this.el);\n      }\n    }\n  };\n  /**\n   * 初始化组件内部监听数据变化\n   *\n   * @private\n   * @param {Object} change 数据变化信息\n   */\n\n\n  Component.prototype._initDataChanger = function (change) {\n    var me = this;\n\n    this._dataChanger = function (change) {\n      if (me._afterLife.created) {\n        if (!me._dataChanges) {\n          nextTick(me._update, me);\n          me._dataChanges = [];\n        }\n\n        me._dataChanges.push(change);\n      } else if (me.lifeCycle.inited && me.owner) {\n        me._updateBindxOwner([change]);\n      }\n    };\n\n    this.data.listen(this._dataChanger);\n  };\n  /**\n   * 监听组件的数据变化\n   *\n   * @param {string} dataName 变化的数据项\n   * @param {Function} listener 监听函数\n   */\n\n\n  Component.prototype.watch = function (dataName, listener) {\n    var dataExpr = parseExpr(dataName);\n    this.data.listen(bind(function (change) {\n      if (changeExprCompare(change.expr, dataExpr, this.data)) {\n        listener.call(this, evalExpr(dataExpr, this.data, this), change);\n      }\n    }, this));\n  };\n\n  Component.prototype._getElAsRootNode = function () {\n    return this.el;\n  };\n  /**\n   * 将组件attach到页面\n   *\n   * @param {HTMLElement} parentEl 要添加到的父元素\n   * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n   */\n\n\n  Component.prototype.attach = function (parentEl, beforeEl) {\n    if (!this.lifeCycle.attached) {\n      // #[begin] devtool\n      this._toPhase('beforeAttach'); // #[end]\n\n\n      if (this.aNode.hotspot.hasRootNode || this.components[this.aNode.tagName]) {\n        // #[begin] devtool\n        this._toPhase('beforeCreate'); // #[end]\n\n\n        this._rootNode = this._rootNode || createNode(this.aNode, this, this.data, this);\n\n        this._rootNode.attach(parentEl, beforeEl);\n\n        this._rootNode._getElAsRootNode && (this.el = this._rootNode._getElAsRootNode());\n\n        this._toPhase('created');\n      } else {\n        if (!this.el) {\n          // #[begin] devtool\n          this._toPhase('beforeCreate'); // #[end]\n\n\n          var sourceNode = this.aNode.hotspot.sourceNode;\n          var props = this.aNode.props;\n\n          if (sourceNode) {\n            this.el = sourceNode.cloneNode(false);\n            props = this.aNode.hotspot.dynamicProps;\n          } else {\n            this.el = createEl(this.tagName);\n          }\n\n          if (this._sbindData) {\n            for (var key in this._sbindData) {\n              if (this._sbindData.hasOwnProperty(key)) {\n                getPropHandler(this.tagName, key)(this.el, this._sbindData[key], key, this);\n              }\n            }\n          }\n\n          for (var i = 0, l = props.length; i < l; i++) {\n            var prop = props[i];\n            var value = evalExpr(prop.expr, this.data, this);\n\n            if (value || !baseProps[prop.name]) {\n              prop.handler(this.el, value, prop.name, this);\n            }\n          }\n\n          this._toPhase('created');\n        }\n\n        insertBefore(this.el, parentEl, beforeEl);\n\n        if (!this._contentReady) {\n          for (var i = 0, l = this.aNode.children.length; i < l; i++) {\n            var childANode = this.aNode.children[i];\n            var child = childANode.Clazz ? new childANode.Clazz(childANode, this, this.data, this) : createNode(childANode, this, this.data, this);\n            this.children.push(child);\n            child.attach(this.el);\n          }\n\n          this._contentReady = 1;\n        }\n\n        this._attached();\n      }\n\n      this._toPhase('attached'); // element 都是内部创建的，只有动态创建的 component 才会进入这个分支\n\n\n      if (this.owner && !this.parent) {\n        this.owner.implicitChildren.push(this);\n      }\n    }\n  };\n\n  Component.prototype.detach = elementOwnDetach;\n  Component.prototype.dispose = elementOwnDispose;\n  Component.prototype._onEl = elementOwnOnEl;\n  Component.prototype._attached = elementOwnAttached;\n\n  Component.prototype._leave = function () {\n    if (this.leaveDispose) {\n      if (!this.lifeCycle.disposed) {\n        // #[begin] devtool\n        this._toPhase('beforeDetach'); // #[end]\n\n\n        this.data.unlisten();\n        this.dataChanger = null;\n        this._dataChanges = null;\n        var len = this.implicitChildren.length;\n\n        while (len--) {\n          this.implicitChildren[len].dispose(0, 1);\n        }\n\n        this.implicitChildren = null;\n        this.source = null;\n        this.sourceSlots = null;\n        this.sourceSlotNameProps = null; // 这里不用挨个调用 dispose 了，因为 children 释放链会调用的\n\n        this.slotChildren = null;\n\n        if (this._rootNode) {\n          // 如果没有parent，说明是一个root component，一定要从dom树中remove\n          this._rootNode.dispose(this.disposeNoDetach && this.parent);\n        } else {\n          var len = this.children.length;\n\n          while (len--) {\n            this.children[len].dispose(1, 1);\n          }\n\n          len = this._elFns.length;\n\n          while (len--) {\n            var fn = this._elFns[len];\n            un(this.el, fn[0], fn[1], fn[2]);\n          }\n\n          this._elFns = null; // #[begin] allua\n\n          /* istanbul ignore if */\n\n          if (this._inputTimer) {\n            clearInterval(this._inputTimer);\n            this._inputTimer = null;\n          } // #[end]\n          // 如果没有parent，说明是一个root component，一定要从dom树中remove\n\n\n          if (!this.disposeNoDetach || !this.parent) {\n            removeEl(this.el);\n          }\n        }\n\n        this._toPhase('detached'); // #[begin] devtool\n\n\n        this._toPhase('beforeDispose'); // #[end]\n\n\n        this._rootNode = null;\n        this.el = null;\n        this.owner = null;\n        this.scope = null;\n        this.children = null;\n\n        this._toPhase('disposed');\n\n        if (this._ondisposed) {\n          this._ondisposed();\n        }\n      }\n    } else if (this.lifeCycle.attached) {\n      // #[begin] devtool\n      this._toPhase('beforeDetach'); // #[end]\n\n\n      if (this._rootNode) {\n        if (this._rootNode.detach) {\n          this._rootNode.detach();\n        } else {\n          this._rootNode.dispose();\n\n          this._rootNode = null;\n        }\n      } else {\n        removeEl(this.el);\n      }\n\n      this._toPhase('detached');\n    }\n  }; // exports = module.exports = Component;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 创建组件类\n   */\n  // var Component = require('./component');\n  // var inherits = require('../util/inherits');\n\n  /**\n   * 创建组件类\n   *\n   * @param {Object} proto 组件类的方法表\n   * @param {Function=} SuperComponent 父组件类\n   * @return {Function}\n   */\n\n\n  function defineComponent(proto, SuperComponent) {\n    // 如果传入一个不是 san component 的 constructor，直接返回不是组件构造函数\n    // 这种场景导致的错误 san 不予考虑\n    if (typeof proto === 'function') {\n      return proto;\n    } // #[begin] error\n\n\n    if (_typeof(proto) !== 'object') {\n      throw new Error('[SAN FATAL] defineComponent need a plain object.');\n    } // #[end]\n\n\n    function ComponentClass(option) {\n      // eslint-disable-line\n      Component.call(this, option);\n    }\n\n    ComponentClass.prototype = proto;\n    inherits(ComponentClass, SuperComponent || Component);\n    return ComponentClass;\n  } // exports = module.exports = defineComponent;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 组件Loader类\n   */\n  // var nextTick = require('../util/next-tick');\n  // var each = require('../util/each');\n\n  /**\n   * 组件Loader类\n   *\n   * @class\n   *\n   * @param {Function} load load方法\n   * @param {Function=} placeholder loading过程中渲染的组件\n   * @param {Function=} fallback load失败时渲染的组件\n   */\n\n\n  function ComponentLoader(load, placeholder, fallback) {\n    this.load = load;\n    this.placeholder = placeholder;\n    this.fallback = fallback;\n    this.listeners = [];\n  }\n  /**\n   * 开始加载组件\n   *\n   * @param {Function} onload 组件加载完成监听函数\n   */\n\n\n  ComponentLoader.prototype.start = function (onload) {\n    var me = this;\n\n    switch (this.state) {\n      case 2:\n        nextTick(function () {\n          onload(me.Component);\n        });\n        break;\n\n      case 1:\n        this.listeners.push(onload);\n        break;\n\n      default:\n        this.listeners.push(onload);\n        this.state = 1;\n        var startLoad = this.load();\n\n        var done = function done(RealComponent) {\n          me.done(RealComponent);\n        };\n\n        if (startLoad && typeof startLoad.then === 'function') {\n          startLoad.then(done, done);\n        }\n\n    }\n  };\n  /**\n   * 完成组件加载\n   *\n   * @param {Function=} ComponentClass 组件类\n   */\n\n\n  ComponentLoader.prototype.done = function (ComponentClass) {\n    this.state = 2;\n    ComponentClass = ComponentClass || this.fallback;\n    this.Component = ComponentClass;\n    each(this.listeners, function (listener) {\n      listener(ComponentClass);\n    });\n  }; // exports = module.exports = ComponentLoader;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 解析组件的模板\n   */\n  // var warn = require('../util/warn');\n  // var parseTemplate = require('../parser/parse-template');\n  // var ExprType = require('../parser/expr-type');\n\n  /**\n   * 解析组件的模板\n   *\n   * @param {Function} ComponentClass 组件类\n   * @return {ANode}\n   */\n\n\n  function parseComponentTemplate(ComponentClass) {\n    var proto = ComponentClass.prototype;\n    var tplANode = parseTemplate(ComponentClass.template || proto.template, {\n      trimWhitespace: proto.trimWhitespace || ComponentClass.trimWhitespace,\n      delimiters: proto.delimiters || ComponentClass.delimiters\n    });\n    var aNode = tplANode.children[0];\n\n    if (aNode && aNode.textExpr) {\n      aNode = null;\n    } // #[begin] error\n\n\n    if (tplANode.children.length !== 1 || !aNode) {\n      warn('Component template must have a root element.');\n    } // #[end]\n\n\n    aNode = aNode || {\n      directives: {},\n      props: [],\n      events: [],\n      children: []\n    };\n\n    if (aNode.tagName === 'template') {\n      delete aNode.tagName;\n    }\n\n    if (proto.autoFillStyleAndId !== false && ComponentClass.autoFillStyleAndId !== false) {\n      var extraPropExists = {};\n      var len = aNode.props.length;\n\n      while (len--) {\n        var prop = aNode.props[len];\n\n        switch (prop.name) {\n          case 'class':\n          case 'style':\n            extraPropExists[prop.name] = true;\n            prop.expr = {\n              type: 5,\n              expr: {\n                type: 4,\n                paths: [{\n                  type: 1,\n                  value: prop.name\n                }]\n              },\n              filters: [{\n                type: 6,\n                args: [prop.expr],\n                name: {\n                  type: 4,\n                  paths: [{\n                    type: 1,\n                    value: '_x' + prop.name\n                  }]\n                }\n              }]\n            };\n            break;\n\n          case 'id':\n            extraPropExists[prop.name] = true;\n        }\n      }\n\n      if (!extraPropExists['class']) {\n        aNode.props.push({\n          name: 'class',\n          expr: {\n            type: 5,\n            expr: {\n              type: 4,\n              paths: [{\n                type: 1,\n                value: 'class'\n              }]\n            },\n            filters: [{\n              type: 6,\n              args: [],\n              name: {\n                type: 4,\n                paths: [{\n                  type: 1,\n                  value: '_class'\n                }]\n              }\n            }]\n          }\n        });\n      }\n\n      if (!extraPropExists.style) {\n        aNode.props.push({\n          name: 'style',\n          expr: {\n            type: 5,\n            expr: {\n              type: 4,\n              paths: [{\n                type: 1,\n                value: 'style'\n              }]\n            },\n            filters: [{\n              type: 6,\n              args: [],\n              name: {\n                type: 4,\n                paths: [{\n                  type: 1,\n                  value: '_style'\n                }]\n              }\n            }]\n          }\n        });\n      }\n\n      if (!extraPropExists.id) {\n        aNode.props.push({\n          name: 'id',\n          expr: {\n            type: 4,\n            paths: [{\n              type: 1,\n              value: 'id'\n            }]\n          }\n        });\n      }\n    }\n\n    return aNode;\n  } // exports = module.exports = parseComponentTemplate;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 常用标签表，用于 element 创建优化\n   */\n  // var splitStr2Obj = require('../util/split-str-2-obj');\n\n  /**\n   * 常用标签表\n   *\n   * @type {Object}\n   */\n\n\n  var hotTags = splitStr2Obj('div,span,img,ul,ol,li,dl,dt,dd,a,b,u,hr,' + 'form,input,textarea,button,label,select,option,' + 'table,tbody,th,tr,td,thead,main,aside,header,footer,nav'); // exports = module.exports = hotTags;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 判断是否结束桩\n   */\n  // #[begin] reverse\n\n  /**\n   * 判断是否结束桩\n   *\n   * @param {HTMLElement|HTMLComment} target 要判断的元素\n   * @param {string} type 桩类型\n   * @return {boolean}\n   */\n\n  function isEndStump(target, type) {\n    return target.nodeType === 8 && target.data === '/s-' + type;\n  } // #[end]\n  // exports = module.exports = isEndStump;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file text 节点类\n   */\n  // var guid = require('../util/guid');\n  // var isBrowser = require('../browser/is-browser');\n  // var removeEl = require('../browser/remove-el');\n  // var insertBefore = require('../browser/insert-before');\n  // var changeExprCompare = require('../runtime/change-expr-compare');\n  // var evalExpr = require('../runtime/eval-expr');\n  // var NodeType = require('./node-type');\n  // var warnSetHTML = require('./warn-set-html');\n  // var isEndStump = require('./is-end-stump');\n  // var getNodePath = require('./get-node-path');\n\n  /**\n   * text 节点类\n   *\n   * @class\n   * @param {Object} aNode 抽象节点\n   * @param {Node} parent 父亲节点\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n   */\n\n\n  function TextNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent; // #[begin] reverse\n\n    if (reverseWalker) {\n      var currentNode = reverseWalker.current;\n\n      if (currentNode) {\n        switch (currentNode.nodeType) {\n          case 8:\n            if (currentNode.data === 's-text') {\n              this.id = this.id || guid++;\n              this.sel = currentNode;\n              currentNode.data = this.id;\n              reverseWalker.goNext();\n\n              while (1) {\n                // eslint-disable-line\n                currentNode = reverseWalker.current;\n                /* istanbul ignore if */\n\n                if (!currentNode) {\n                  throw new Error('[SAN REVERSE ERROR] Text end flag not found. \\nPaths: ' + getNodePath(this).join(' > '));\n                }\n\n                if (isEndStump(currentNode, 'text')) {\n                  this.el = currentNode;\n                  reverseWalker.goNext();\n                  currentNode.data = this.id;\n                  break;\n                }\n\n                reverseWalker.goNext();\n              }\n            }\n\n            break;\n\n          case 3:\n            reverseWalker.goNext();\n\n            if (!this.aNode.textExpr.original) {\n              this.el = currentNode;\n            }\n\n            break;\n        }\n      } else {\n        this.el = document.createTextNode('');\n        insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n      }\n    } // #[end]\n\n  }\n\n  TextNode.prototype.nodeType = 1;\n  /**\n   * 将text attach到页面\n   *\n   * @param {HTMLElement} parentEl 要添加到的父元素\n   * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n   */\n\n  TextNode.prototype.attach = function (parentEl, beforeEl) {\n    this.content = evalExpr(this.aNode.textExpr, this.scope, this.owner);\n\n    if (this.content == null) {\n      this.content = '';\n    }\n\n    if (this.aNode.textExpr.original) {\n      this.id = this.id || guid++;\n      this.sel = document.createComment(this.id);\n      insertBefore(this.sel, parentEl, beforeEl);\n      this.el = document.createComment(this.id);\n      insertBefore(this.el, parentEl, beforeEl);\n      var tempFlag = document.createElement('script');\n      parentEl.insertBefore(tempFlag, this.el);\n      tempFlag.insertAdjacentHTML('beforebegin', this.content);\n      parentEl.removeChild(tempFlag);\n    } else {\n      this.el = document.createTextNode(this.content);\n      insertBefore(this.el, parentEl, beforeEl);\n    }\n  };\n  /**\n   * 销毁 text 节点\n   *\n   * @param {boolean=} noDetach 是否不要把节点从dom移除\n   */\n\n\n  TextNode.prototype.dispose = function (noDetach) {\n    if (!noDetach) {\n      removeEl(this.el);\n      removeEl(this.sel);\n    }\n\n    this.el = null;\n    this.sel = null;\n  };\n\n  var textUpdateProp = isBrowser && (typeof document.createTextNode('').textContent === 'string' ? 'textContent' : 'data');\n  /**\n   * 更新 text 节点的视图\n   *\n   * @param {Array} changes 数据变化信息\n   */\n\n  TextNode.prototype._update = function (changes) {\n    if (this.aNode.textExpr.value) {\n      return;\n    }\n\n    var len = changes.length;\n\n    while (len--) {\n      if (changeExprCompare(changes[len].expr, this.aNode.textExpr, this.scope)) {\n        var text = evalExpr(this.aNode.textExpr, this.scope, this.owner);\n\n        if (text == null) {\n          text = '';\n        }\n\n        if (text !== this.content) {\n          this.content = text;\n\n          if (this.aNode.textExpr.original) {\n            var startRemoveEl = this.sel.nextSibling;\n            var parentEl = this.el.parentNode;\n\n            while (startRemoveEl !== this.el) {\n              var removeTarget = startRemoveEl;\n              startRemoveEl = startRemoveEl.nextSibling;\n              removeEl(removeTarget);\n            } // #[begin] error\n\n\n            warnSetHTML(parentEl); // #[end]\n\n            var tempFlag = document.createElement('script');\n            parentEl.insertBefore(tempFlag, this.el);\n            tempFlag.insertAdjacentHTML('beforebegin', text);\n            parentEl.removeChild(tempFlag);\n          } else {\n            this.el[textUpdateProp] = text;\n          }\n        }\n\n        return;\n      }\n    }\n  }; // exports = module.exports = TextNode;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 将没有 root 只有 children 的元素 attach 到页面\n   */\n  // var insertBefore = require('../browser/insert-before');\n  // var LifeCycle = require('./life-cycle');\n  // var createNode = require('./create-node');\n\n  /**\n   * 将没有 root 只有 children 的元素 attach 到页面\n   * 主要用于 slot 和 template\n   *\n   * @param {HTMLElement} parentEl 要添加到的父元素\n   * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n   */\n\n\n  function nodeOwnOnlyChildrenAttach(parentEl, beforeEl) {\n    this.sel = document.createComment(this.id);\n    insertBefore(this.sel, parentEl, beforeEl);\n\n    for (var i = 0; i < this.aNode.children.length; i++) {\n      var child = createNode(this.aNode.children[i], this, this.childScope || this.scope, this.childOwner || this.owner);\n      this.children.push(child);\n      child.attach(parentEl, beforeEl);\n    }\n\n    this.el = document.createComment(this.id);\n    insertBefore(this.el, parentEl, beforeEl);\n    this.lifeCycle = LifeCycle.attached;\n  } // exports = module.exports = nodeOwnOnlyChildrenAttach;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file slot 节点类\n   */\n  // var each = require('../util/each');\n  // var guid = require('../util/guid');\n  // var extend = require('../util/extend');\n  // var ExprType = require('../parser/expr-type');\n  // var evalExpr = require('../runtime/eval-expr');\n  // var Data = require('../runtime/data');\n  // var DataChangeType = require('../runtime/data-change-type');\n  // var changeExprCompare = require('../runtime/change-expr-compare');\n  // var removeEl = require('../browser/remove-el');\n  // var NodeType = require('./node-type');\n  // var LifeCycle = require('./life-cycle');\n  // var getANodeProp = require('./get-a-node-prop');\n  // var nodeSBindInit = require('./node-s-bind-init');\n  // var nodeSBindUpdate = require('./node-s-bind-update');\n  // var createReverseNode = require('./create-reverse-node');\n  // var elementDisposeChildren = require('./element-dispose-children');\n  // var nodeOwnOnlyChildrenAttach = require('./node-own-only-children-attach');\n\n  /**\n   * slot 节点类\n   *\n   * @class\n   * @param {Object} aNode 抽象节点\n   * @param {Node} parent 父亲节点\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n   */\n\n\n  function SlotNode(aNode, parent, scope, owner, reverseWalker) {\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === 5 ? parent : parent.parentComponent;\n    this.id = guid++;\n    this.lifeCycle = LifeCycle.start;\n    this.children = []; // calc slot name\n\n    this.nameBind = getANodeProp(aNode, 'name');\n\n    if (this.nameBind) {\n      this.isNamed = true;\n      this.name = evalExpr(this.nameBind.expr, this.scope, this.owner);\n    } // calc aNode children\n\n\n    var sourceSlots = owner.sourceSlots;\n    var matchedSlots;\n\n    if (sourceSlots) {\n      matchedSlots = this.isNamed ? sourceSlots.named[this.name] : sourceSlots.noname;\n    }\n\n    if (matchedSlots) {\n      this.isInserted = true;\n    }\n\n    this.aNode = {\n      directives: aNode.directives,\n      props: [],\n      events: [],\n      children: matchedSlots || aNode.children.slice(0),\n      vars: aNode.vars\n    };\n    this._sbindData = nodeSBindInit(aNode.directives.bind, this.scope, this.owner); // calc scoped slot vars\n\n    var initData;\n\n    if (this._sbindData) {\n      initData = extend({}, this._sbindData);\n    }\n\n    if (aNode.vars) {\n      initData = initData || {};\n      each(aNode.vars, function (varItem) {\n        initData[varItem.name] = evalExpr(varItem.expr, scope, owner);\n      });\n    } // child owner & child scope\n\n\n    if (this.isInserted) {\n      this.childOwner = owner.owner;\n      this.childScope = owner.scope;\n    }\n\n    if (initData) {\n      this.isScoped = true;\n      this.childScope = new Data(initData, this.childScope || this.scope);\n    }\n\n    owner.slotChildren.push(this); // #[begin] reverse\n\n    if (reverseWalker) {\n      var hasFlagComment; // start flag\n\n      if (reverseWalker.current && reverseWalker.current.nodeType === 8) {\n        this.sel = reverseWalker.current;\n        hasFlagComment = 1;\n        reverseWalker.goNext();\n      } else {\n        this.sel = document.createComment(this.id);\n        reverseWalker.current ? reverseWalker.target.insertBefore(this.sel, reverseWalker.current) : reverseWalker.target.appendChild(this.sel);\n      }\n\n      var aNodeChildren = this.aNode.children;\n\n      for (var i = 0, l = aNodeChildren.length; i < l; i++) {\n        this.children.push(createReverseNode(aNodeChildren[i], this, this.childScope || this.scope, this.childOwner || this.owner, reverseWalker));\n      } // end flag\n\n\n      if (hasFlagComment) {\n        this.el = reverseWalker.current;\n        reverseWalker.goNext();\n      } else {\n        this.el = document.createComment(this.id);\n        reverseWalker.current ? reverseWalker.target.insertBefore(this.el, reverseWalker.current) : reverseWalker.target.appendChild(this.el);\n      }\n\n      this.lifeCycle = LifeCycle.attached;\n    } // #[end]\n\n  }\n\n  SlotNode.prototype.nodeType = 6;\n  /**\n   * 销毁释放 slot\n   *\n   * @param {boolean=} noDetach 是否不要把节点从dom移除\n   * @param {boolean=} noTransition 是否不显示过渡动画效果\n   */\n\n  SlotNode.prototype.dispose = function (noDetach, noTransition) {\n    this.childOwner = null;\n    this.childScope = null;\n    elementDisposeChildren(this.children, noDetach, noTransition);\n\n    if (!noDetach) {\n      removeEl(this.el);\n      removeEl(this.sel);\n    }\n\n    this.sel = null;\n    this.el = null;\n    this.owner = null;\n    this.scope = null;\n    this.children = null;\n    this.lifeCycle = LifeCycle.disposed;\n\n    if (this._ondisposed) {\n      this._ondisposed();\n    }\n  };\n\n  SlotNode.prototype.attach = nodeOwnOnlyChildrenAttach;\n  /**\n   * 视图更新函数\n   *\n   * @param {Array} changes 数据变化信息\n   * @param {boolean=} isFromOuter 变化信息是否来源于父组件之外的组件\n   * @return {boolean}\n   */\n\n  SlotNode.prototype._update = function (changes, isFromOuter) {\n    var me = this;\n\n    if (this.nameBind && evalExpr(this.nameBind.expr, this.scope, this.owner) !== this.name) {\n      this.owner._notifyNeedReload();\n\n      return false;\n    }\n\n    if (isFromOuter) {\n      if (this.isInserted) {\n        for (var i = 0; i < this.children.length; i++) {\n          this.children[i]._update(changes);\n        }\n      }\n    } else {\n      if (this.isScoped) {\n        var varKeys = {};\n        each(this.aNode.vars, function (varItem) {\n          varKeys[varItem.name] = 1;\n          me.childScope.set(varItem.name, evalExpr(varItem.expr, me.scope, me.owner));\n        });\n        var scopedChanges = [];\n        this._sbindData = nodeSBindUpdate(this.aNode.directives.bind, this._sbindData, this.scope, this.owner, changes, function (name, value) {\n          if (varKeys[name]) {\n            return;\n          }\n\n          me.childScope.set(name, value);\n          scopedChanges.push({\n            type: 1,\n            expr: {\n              type: 4,\n              paths: [{\n                type: 1,\n                value: name\n              }]\n            },\n            value: value,\n            option: {}\n          });\n        });\n        each(changes, function (change) {\n          if (!me.isInserted) {\n            scopedChanges.push(change);\n          }\n\n          each(me.aNode.vars, function (varItem) {\n            var name = varItem.name;\n            var relation = changeExprCompare(change.expr, varItem.expr, me.scope);\n\n            if (relation < 1) {\n              return;\n            }\n\n            if (change.type !== 2) {\n              scopedChanges.push({\n                type: 1,\n                expr: {\n                  type: 4,\n                  paths: [{\n                    type: 1,\n                    value: name\n                  }]\n                },\n                value: me.childScope.get(name),\n                option: change.option\n              });\n            } else if (relation === 2) {\n              scopedChanges.push({\n                expr: {\n                  type: 4,\n                  paths: [{\n                    type: 1,\n                    value: name\n                  }]\n                },\n                type: 2,\n                index: change.index,\n                deleteCount: change.deleteCount,\n                value: change.value,\n                insertions: change.insertions,\n                option: change.option\n              });\n            }\n          });\n        });\n\n        for (var i = 0; i < this.children.length; i++) {\n          this.children[i]._update(scopedChanges);\n        }\n      } else if (!this.isInserted) {\n        for (var i = 0; i < this.children.length; i++) {\n          this.children[i]._update(changes);\n        }\n      }\n    }\n  }; // exports = module.exports = SlotNode;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file for 指令节点类\n   */\n  // var inherits = require('../util/inherits');\n  // var each = require('../util/each');\n  // var guid = require('../util/guid');\n  // var ExprType = require('../parser/expr-type');\n  // var parseExpr = require('../parser/parse-expr');\n  // var Data = require('../runtime/data');\n  // var DataChangeType = require('../runtime/data-change-type');\n  // var changeExprCompare = require('../runtime/change-expr-compare');\n  // var evalExpr = require('../runtime/eval-expr');\n  // var changesIsInDataRef = require('../runtime/changes-is-in-data-ref');\n  // var insertBefore = require('../browser/insert-before');\n  // var NodeType = require('./node-type');\n  // var createNode = require('./create-node');\n  // var createReverseNode = require('./create-reverse-node');\n  // var nodeOwnSimpleDispose = require('./node-own-simple-dispose');\n  // var nodeOwnCreateStump = require('./node-own-create-stump');\n\n  /**\n   * 循环项的数据容器类\n   *\n   * @inner\n   * @class\n   * @param {Object} forElement for元素对象\n   * @param {*} item 当前项的数据\n   * @param {number} index 当前项的索引\n   */\n\n\n  function ForItemData(forElement, item, index) {\n    this.parent = forElement.scope;\n    this.raw = {};\n    this.listeners = [];\n    this.directive = forElement.aNode.directives['for']; // eslint-disable-line dot-notation\n\n    this.indexName = this.directive.index || '$index';\n    this.raw[this.directive.item] = item;\n    this.raw[this.indexName] = index;\n  }\n  /**\n   * 将数据操作的表达式，转换成为对parent数据操作的表达式\n   * 主要是对item和index进行处理\n   *\n   * @param {Object} expr 表达式\n   * @return {Object}\n   */\n\n\n  ForItemData.prototype.exprResolve = function (expr) {\n    var directive = this.directive;\n\n    if (expr.type === 4 && expr.paths[0].value === directive.item) {\n      expr = {\n        type: 4,\n        paths: directive.value.paths.concat({\n          type: 2,\n          value: this.raw[this.indexName]\n        }, expr.paths.slice(1))\n      };\n    }\n\n    var resolvedPaths = [];\n\n    for (var i = 0, l = expr.paths.length; i < l; i++) {\n      var pathSeg = expr.paths[i];\n\n      if (pathSeg.type === 4) {\n        switch (pathSeg.paths[0].value) {\n          case directive.item:\n            pathSeg = {\n              type: 4,\n              paths: directive.value.paths.concat({\n                type: 2,\n                value: this.raw[this.indexName]\n              }, pathSeg.paths.slice(1))\n            };\n            break;\n\n          case this.indexName:\n            pathSeg = {\n              type: 2,\n              value: this.raw[this.indexName]\n            };\n            break;\n        }\n      }\n\n      resolvedPaths.push(pathSeg);\n    }\n\n    return {\n      type: 4,\n      paths: resolvedPaths\n    };\n  }; // 代理数据操作方法\n\n\n  inherits(ForItemData, Data);\n  each(['set', 'remove', 'unshift', 'shift', 'push', 'pop', 'splice'], function (method) {\n    ForItemData.prototype['_' + method] = Data.prototype[method];\n\n    ForItemData.prototype[method] = function (expr) {\n      expr = this.exprResolve(parseExpr(expr));\n      this.parent[method].apply(this.parent, [expr].concat(Array.prototype.slice.call(arguments, 1)));\n    };\n  });\n  /**\n   * for 指令节点类\n   *\n   * @class\n   * @param {Object} aNode 抽象节点\n   * @param {Node} parent 父亲节点\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n   */\n\n  function ForNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === 5 ? parent : parent.parentComponent;\n    this.id = guid++;\n    this.children = [];\n    this.param = aNode.directives['for']; // eslint-disable-line dot-notation\n\n    this.itemPaths = [{\n      type: 1,\n      value: this.param.item\n    }];\n    this.itemExpr = {\n      type: 4,\n      paths: this.itemPaths,\n      raw: this.param.item\n    };\n\n    if (this.param.index) {\n      this.indexExpr = {\n        type: 4,\n        paths: [{\n          type: 1,\n          value: '' + this.param.index\n        }]\n      };\n    } // #[begin] reverse\n\n\n    if (reverseWalker) {\n      this.listData = evalExpr(this.param.value, this.scope, this.owner);\n\n      if (this.listData instanceof Array) {\n        for (var i = 0; i < this.listData.length; i++) {\n          this.children.push(createReverseNode(this.aNode.forRinsed, this, new ForItemData(this, this.listData[i], i), this.owner, reverseWalker));\n        }\n      } else if (this.listData && _typeof(this.listData) === 'object') {\n        for (var i in this.listData) {\n          if (this.listData.hasOwnProperty(i) && this.listData[i] != null) {\n            this.children.push(createReverseNode(this.aNode.forRinsed, this, new ForItemData(this, this.listData[i], i), this.owner, reverseWalker));\n          }\n        }\n      }\n\n      this._create();\n\n      insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n    } // #[end]\n\n  }\n\n  ForNode.prototype.nodeType = 3;\n  ForNode.prototype._create = nodeOwnCreateStump;\n  ForNode.prototype.dispose = nodeOwnSimpleDispose;\n  /**\n   * 将元素attach到页面的行为\n   *\n   * @param {HTMLElement} parentEl 要添加到的父元素\n   * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n   */\n\n  ForNode.prototype.attach = function (parentEl, beforeEl) {\n    this._create();\n\n    insertBefore(this.el, parentEl, beforeEl);\n    this.listData = evalExpr(this.param.value, this.scope, this.owner);\n\n    this._createChildren();\n  };\n  /**\n   * 创建子元素\n   */\n\n\n  ForNode.prototype._createChildren = function () {\n    var parentEl = this.el.parentNode;\n    var listData = this.listData;\n\n    if (listData instanceof Array) {\n      for (var i = 0; i < listData.length; i++) {\n        var childANode = this.aNode.forRinsed;\n        var child = childANode.Clazz ? new childANode.Clazz(childANode, this, new ForItemData(this, listData[i], i), this.owner) : createNode(childANode, this, new ForItemData(this, listData[i], i), this.owner);\n        this.children.push(child);\n        child.attach(parentEl, this.el);\n      }\n    } else if (listData && _typeof(listData) === 'object') {\n      for (var i in listData) {\n        if (listData.hasOwnProperty(i) && listData[i] != null) {\n          var childANode = this.aNode.forRinsed;\n          var child = childANode.Clazz ? new childANode.Clazz(childANode, this, new ForItemData(this, listData[i], i), this.owner) : createNode(childANode, this, new ForItemData(this, listData[i], i), this.owner);\n          this.children.push(child);\n          child.attach(parentEl, this.el);\n        }\n      }\n    }\n  };\n  /* eslint-disable fecs-max-statements */\n\n  /**\n   * 视图更新函数\n   *\n   * @param {Array} changes 数据变化信息\n   */\n\n\n  ForNode.prototype._update = function (changes) {\n    var listData = evalExpr(this.param.value, this.scope, this.owner);\n    var oldIsArr = this.listData instanceof Array;\n    var newIsArr = listData instanceof Array;\n\n    if (this.children.length) {\n      if (!listData || newIsArr && listData.length === 0) {\n        this._disposeChildren();\n\n        this.listData = listData;\n      } else if (oldIsArr !== newIsArr || !newIsArr) {\n        // 就是这么暴力\n        // 不推荐使用for遍历object，用的话自己负责\n        this.listData = listData;\n        var isListChanged;\n\n        for (var cIndex = 0; !isListChanged && cIndex < changes.length; cIndex++) {\n          isListChanged = changeExprCompare(changes[cIndex].expr, this.param.value, this.scope);\n        }\n\n        var dataHotspot = this.aNode.hotspot.data;\n\n        if (isListChanged || dataHotspot && changesIsInDataRef(changes, dataHotspot)) {\n          var me = this;\n\n          this._disposeChildren(null, function () {\n            me._createChildren();\n          });\n        }\n      } else {\n        this._updateArray(changes, listData);\n\n        this.listData = listData;\n      }\n    } else {\n      this.listData = listData;\n\n      this._createChildren();\n    }\n  };\n  /**\n   * 销毁释放子元素\n   *\n   * @param {Array?} children 要销毁的子元素，默认为自身的children\n   * @param {Function} callback 释放完成的回调函数\n   */\n\n\n  ForNode.prototype._disposeChildren = function (children, callback) {\n    var parentEl = this.el.parentNode;\n    var parentFirstChild = parentEl.firstChild;\n    var parentLastChild = parentEl.lastChild;\n    var len = this.children.length;\n    var violentClear = !this.aNode.directives.transition && !children // 是否 parent 的唯一 child\n    && len && parentFirstChild === this.children[0].el && parentLastChild === this.el;\n\n    if (!children) {\n      children = this.children;\n      this.children = [];\n    }\n\n    var disposedChildCount = 0;\n    len = children.length; // 调用入口处已保证此处必有需要被删除的 child\n\n    for (var i = 0; i < len; i++) {\n      var disposeChild = children[i];\n\n      if (violentClear) {\n        disposeChild && disposeChild.dispose(violentClear, violentClear);\n      } else if (disposeChild) {\n        disposeChild._ondisposed = childDisposed;\n        disposeChild.dispose();\n      } else {\n        childDisposed();\n      }\n    }\n\n    if (violentClear) {\n      // #[begin] allua\n\n      /* istanbul ignore next */\n      if (ie) {\n        parentEl.innerHTML = '';\n      } else {\n        // #[end]\n        parentEl.textContent = ''; // #[begin] allua\n      } // #[end]\n\n\n      this.el = document.createComment(this.id);\n      parentEl.appendChild(this.el);\n      callback && callback();\n    }\n\n    function childDisposed() {\n      disposedChildCount++;\n\n      if (disposedChildCount >= len) {\n        callback && callback();\n      }\n    }\n  };\n\n  ForNode.prototype.opti = typeof navigator !== 'undefined' && /chrome\\/[0-9]+/i.test(navigator.userAgent);\n  /**\n   * 数组类型的视图更新\n   *\n   * @param {Array} changes 数据变化信息\n   * @param {Array} newList 新数组数据\n   */\n\n  ForNode.prototype._updateArray = function (changes, newList) {\n    var oldChildrenLen = this.children.length;\n    var childrenChanges = new Array(oldChildrenLen);\n    var childIsElem = this.children[0].nodeType === 4;\n\n    function pushToChildrenChanges(change) {\n      for (var i = 0, l = childrenChanges.length; i < l; i++) {\n        (childrenChanges[i] = childrenChanges[i] || []).push(change);\n      }\n\n      childrenNeedUpdate = null;\n      isOnlyDispose = false;\n    }\n\n    var disposeChildren = []; // 控制列表是否整体更新的变量\n\n    var isChildrenRebuild; //\n\n    var isOnlyDispose = true;\n    var childrenNeedUpdate = {};\n    var newLen = newList.length;\n    var getItemKey = this.aNode.hotspot.getForKey;\n    /* eslint-disable no-redeclare */\n\n    for (var cIndex = 0; cIndex < changes.length; cIndex++) {\n      var change = changes[cIndex];\n      var relation = changeExprCompare(change.expr, this.param.value, this.scope);\n\n      if (!relation) {\n        // 无关时，直接传递给子元素更新，列表本身不需要动\n        pushToChildrenChanges(change);\n      } else {\n        if (relation > 2) {\n          // 变更表达式是list绑定表达式的子项\n          // 只需要对相应的子项进行更新\n          var changePaths = change.expr.paths;\n          var forLen = this.param.value.paths.length;\n          var changeIndex = +evalExpr(changePaths[forLen], this.scope, this.owner);\n\n          if (isNaN(changeIndex)) {\n            pushToChildrenChanges(change);\n          } else if (!isChildrenRebuild) {\n            isOnlyDispose = false;\n            childrenNeedUpdate && (childrenNeedUpdate[changeIndex] = 1);\n            childrenChanges[changeIndex] = childrenChanges[changeIndex] || [];\n\n            if (this.param.index) {\n              childrenChanges[changeIndex].push(change);\n            }\n\n            change = change.type === 1 ? {\n              type: change.type,\n              expr: {\n                type: 4,\n                paths: this.itemPaths.concat(changePaths.slice(forLen + 1))\n              },\n              value: change.value,\n              option: change.option\n            } : {\n              index: change.index,\n              deleteCount: change.deleteCount,\n              insertions: change.insertions,\n              type: change.type,\n              expr: {\n                type: 4,\n                paths: this.itemPaths.concat(changePaths.slice(forLen + 1))\n              },\n              value: change.value,\n              option: change.option\n            };\n            childrenChanges[changeIndex].push(change);\n\n            if (change.type === 1) {\n              if (this.children[changeIndex]) {\n                this.children[changeIndex].scope._set(change.expr, change.value, {\n                  silent: 1\n                });\n              } else {\n                // 设置数组项的索引可能超出数组长度，此时需要新增\n                // 比如当前数组只有2项，但是set list[4]\n                this.children[changeIndex] = 0;\n              }\n            } else if (this.children[changeIndex]) {\n              this.children[changeIndex].scope._splice(change.expr, [].concat(change.index, change.deleteCount, change.insertions), {\n                silent: 1\n              });\n            }\n          }\n        } else if (isChildrenRebuild) {\n          continue;\n        } else if (relation === 2 && change.type === 2 && (this.owner.updateMode !== 'optimized' || !this.opti || this.aNode.directives.transition)) {\n          childrenNeedUpdate = null; // 变更表达式是list绑定表达式本身数组的splice操作\n          // 此时需要删除部分项，创建部分项\n\n          var changeStart = change.index;\n          var deleteCount = change.deleteCount;\n          var insertionsLen = change.insertions.length;\n          var newCount = insertionsLen - deleteCount;\n\n          if (newCount) {\n            var indexChange = this.param.index ? {\n              type: 1,\n              option: change.option,\n              expr: this.indexExpr\n            } : null;\n\n            for (var i = changeStart + deleteCount; i < this.children.length; i++) {\n              if (indexChange) {\n                isOnlyDispose = false;\n                (childrenChanges[i] = childrenChanges[i] || []).push(indexChange);\n              }\n\n              var child = this.children[i];\n\n              if (child) {\n                child.scope.raw[child.scope.indexName] = i - deleteCount + insertionsLen;\n              }\n            }\n          }\n\n          var deleteLen = deleteCount;\n\n          while (deleteLen--) {\n            if (deleteLen < insertionsLen) {\n              isOnlyDispose = false;\n              var i = changeStart + deleteLen; // update\n\n              (childrenChanges[i] = childrenChanges[i] || []).push({\n                type: 1,\n                option: change.option,\n                expr: this.itemExpr,\n                value: change.insertions[deleteLen]\n              });\n\n              if (this.children[i]) {\n                this.children[i].scope.raw[this.param.item] = change.insertions[deleteLen];\n              }\n            }\n          }\n\n          if (newCount < 0) {\n            disposeChildren = disposeChildren.concat(this.children.splice(changeStart + insertionsLen, -newCount));\n            childrenChanges.splice(changeStart + insertionsLen, -newCount);\n          } else if (newCount > 0) {\n            isOnlyDispose = false;\n            var spliceArgs = [changeStart + deleteCount, 0].concat(new Array(newCount));\n            this.children.splice.apply(this.children, spliceArgs);\n            childrenChanges.splice.apply(childrenChanges, spliceArgs);\n          }\n        } else {\n          childrenNeedUpdate = null;\n          isOnlyDispose = false;\n          isChildrenRebuild = 1; // 变更表达式是list绑定表达式本身或母项的重新设值\n          // 此时需要更新整个列表\n\n          if (getItemKey && newLen && oldChildrenLen) {\n            // 如果设置了trackBy，用lis更新。开始 ====\n            var newListKeys = [];\n            var oldListKeys = [];\n            var newListKeysMap = {};\n            var oldListInNew = [];\n            var oldListKeyIndex = {};\n\n            for (var i = 0; i < newList.length; i++) {\n              var itemKey = getItemKey(newList[i]);\n              newListKeys.push(itemKey);\n              newListKeysMap[itemKey] = i;\n            }\n\n            ;\n\n            for (var i = 0; i < this.listData.length; i++) {\n              var itemKey = getItemKey(this.listData[i]);\n              oldListKeys.push(itemKey);\n              oldListKeyIndex[itemKey] = i;\n\n              if (newListKeysMap[itemKey] != null) {\n                oldListInNew[i] = newListKeysMap[itemKey];\n              } else {\n                oldListInNew[i] = -1;\n                disposeChildren.push(this.children[i]);\n              }\n            }\n\n            ;\n            var newIndexStart = 0;\n            var newIndexEnd = newLen;\n            var oldIndexStart = 0;\n            var oldIndexEnd = oldChildrenLen; // 优化：从头开始比对新旧 list 项是否相同\n\n            while (newIndexStart < newLen && oldIndexStart < oldChildrenLen && newListKeys[newIndexStart] === oldListKeys[oldIndexStart]) {\n              if (this.listData[oldIndexStart] !== newList[newIndexStart]) {\n                this.children[oldIndexStart].scope.raw[this.param.item] = newList[newIndexStart];\n                (childrenChanges[oldIndexStart] = childrenChanges[oldIndexStart] || []).push({\n                  type: 1,\n                  option: change.option,\n                  expr: this.itemExpr,\n                  value: newList[newIndexStart]\n                });\n              } // 对list更上级数据的直接设置\n\n\n              if (relation < 2) {\n                (childrenChanges[oldIndexStart] = childrenChanges[oldIndexStart] || []).push(change);\n              }\n\n              newIndexStart++;\n              oldIndexStart++;\n            }\n\n            var indexChange = this.param.index ? {\n              type: 1,\n              option: change.option,\n              expr: this.indexExpr\n            } : null; // 优化：从尾开始比对新旧 list 项是否相同\n\n            while (newIndexEnd > newIndexStart && oldIndexEnd > oldIndexStart && newListKeys[newIndexEnd - 1] === oldListKeys[oldIndexEnd - 1]) {\n              newIndexEnd--;\n              oldIndexEnd--;\n\n              if (this.listData[oldIndexEnd] !== newList[newIndexEnd]) {\n                // refresh item\n                this.children[oldIndexEnd].scope.raw[this.param.item] = newList[newIndexEnd];\n                (childrenChanges[oldIndexEnd] = childrenChanges[oldIndexEnd] || []).push({\n                  type: 1,\n                  option: change.option,\n                  expr: this.itemExpr,\n                  value: newList[newIndexEnd]\n                });\n              } // refresh index\n\n\n              if (newIndexEnd !== oldIndexEnd) {\n                this.children[oldIndexEnd].scope.raw[this.children[oldIndexEnd].scope.indexName] = newIndexEnd;\n\n                if (indexChange) {\n                  (childrenChanges[oldIndexEnd] = childrenChanges[oldIndexEnd] || []).push(indexChange);\n                }\n              } // 对list更上级数据的直接设置\n\n\n              if (relation < 2) {\n                (childrenChanges[oldIndexEnd] = childrenChanges[oldIndexEnd] || []).push(change);\n              }\n            }\n\n            var oldListLIS = [];\n            var lisIdx = [];\n            var lisPos = -1;\n            var lisSource = oldListInNew.slice(oldIndexStart, oldIndexEnd);\n            var len = oldIndexEnd - oldIndexStart;\n            var preIdx = new Array(len);\n\n            for (var i = 0; i < len; i++) {\n              var oldItemInNew = lisSource[i];\n\n              if (oldItemInNew === -1) {\n                continue;\n              }\n\n              var rePos = -1;\n              var rePosEnd = oldListLIS.length;\n\n              if (rePosEnd > 0 && oldListLIS[rePosEnd - 1] <= oldItemInNew) {\n                rePos = rePosEnd - 1;\n              } else {\n                while (rePosEnd - rePos > 1) {\n                  var mid = Math.floor((rePos + rePosEnd) / 2);\n\n                  if (oldListLIS[mid] > oldItemInNew) {\n                    rePosEnd = mid;\n                  } else {\n                    rePos = mid;\n                  }\n                }\n              }\n\n              if (rePos !== -1) {\n                preIdx[i] = lisIdx[rePos];\n              }\n\n              if (rePos === lisPos) {\n                lisPos++;\n                oldListLIS[lisPos] = oldItemInNew;\n                lisIdx[lisPos] = i;\n              } else if (oldItemInNew < oldListLIS[rePos + 1]) {\n                oldListLIS[rePos + 1] = oldItemInNew;\n                lisIdx[rePos + 1] = i;\n              }\n            }\n\n            for (var i = lisIdx[lisPos]; lisPos >= 0; i = preIdx[i], lisPos--) {\n              oldListLIS[lisPos] = i;\n            }\n\n            var oldListLISPos = oldListLIS.length;\n            var staticPos = oldListLISPos ? oldListInNew[oldListLIS[--oldListLISPos] + oldIndexStart] : -1;\n            var newChildren = [];\n            var newChildrenChanges = [];\n            var beforeEl = this.el;\n            var parentEl = childIsElem && beforeEl.parentNode;\n\n            for (var i = newLen - 1; i >= 0; i--) {\n              if (i >= newIndexEnd) {\n                newChildren[i] = this.children[oldChildrenLen - newLen + i];\n                newChildrenChanges[i] = childrenChanges[oldChildrenLen - newLen + i];\n\n                if (childIsElem) {\n                  beforeEl = newChildren[i].el;\n                }\n              } else if (i < newIndexStart) {\n                newChildren[i] = this.children[i];\n                newChildrenChanges[i] = childrenChanges[i];\n              } else {\n                var oldListIndex = oldListKeyIndex[newListKeys[i]];\n                var oldListNode = this.children[oldListIndex];\n\n                if (oldListNode && (childIsElem || i === staticPos)) {\n                  var oldScope = oldListNode.scope; // 如果数据本身引用发生变化，设置变更\n\n                  if (this.listData[oldListIndex] !== newList[i]) {\n                    oldScope.raw[this.param.item] = newList[i];\n                    (childrenChanges[oldListIndex] = childrenChanges[oldListIndex] || []).push({\n                      type: 1,\n                      option: change.option,\n                      expr: this.itemExpr,\n                      value: newList[i]\n                    });\n                  } // refresh index\n\n\n                  if (indexChange && i !== oldListIndex) {\n                    oldScope.raw[oldScope.indexName] = i;\n\n                    if (indexChange) {\n                      (childrenChanges[oldListIndex] = childrenChanges[oldListIndex] || []).push(indexChange);\n                    }\n                  } // 对list更上级数据的直接设置\n\n\n                  if (relation < 2) {\n                    (childrenChanges[oldListIndex] = childrenChanges[oldListIndex] || []).push(change);\n                  }\n\n                  newChildren[i] = oldListNode;\n                  newChildrenChanges[i] = childrenChanges[oldListIndex];\n\n                  if (i === staticPos) {\n                    staticPos = oldListLISPos ? oldListInNew[oldListLIS[--oldListLISPos] + oldIndexStart] : -1;\n                  } else {\n                    parentEl.insertBefore(oldListNode.el, beforeEl);\n                  }\n\n                  if (childIsElem) {\n                    beforeEl = oldListNode.el;\n                  }\n                } else {\n                  oldListNode && disposeChildren.push(oldListNode);\n                  newChildren[i] = 0;\n                  newChildrenChanges[i] = 0;\n                }\n              }\n            }\n\n            this.children = newChildren;\n            childrenChanges = newChildrenChanges; // 如果设置了trackBy，用lis更新。结束 ====\n          } else {\n            // 老的比新的多的部分，标记需要dispose\n            if (oldChildrenLen > newLen) {\n              disposeChildren = disposeChildren.concat(this.children.slice(newLen));\n              childrenChanges = childrenChanges.slice(0, newLen);\n              this.children = this.children.slice(0, newLen);\n            } // 剩下的部分整项变更\n\n\n            for (var i = 0; i < newLen; i++) {\n              // 对list更上级数据的直接设置\n              if (relation < 2) {\n                (childrenChanges[i] = childrenChanges[i] || []).push(change);\n              }\n\n              if (this.children[i]) {\n                if (this.children[i].scope.raw[this.param.item] !== newList[i]) {\n                  this.children[i].scope.raw[this.param.item] = newList[i];\n                  (childrenChanges[i] = childrenChanges[i] || []).push({\n                    type: 1,\n                    option: change.option,\n                    expr: this.itemExpr,\n                    value: newList[i]\n                  });\n                }\n              } else {\n                this.children[i] = 0;\n              }\n            }\n          }\n        }\n      }\n    } // 标记 length 是否发生变化\n\n\n    if (newLen !== oldChildrenLen && this.param.value.paths) {\n      var lengthChange = {\n        type: 1,\n        option: {},\n        expr: {\n          type: 4,\n          paths: this.param.value.paths.concat({\n            type: 1,\n            value: 'length'\n          })\n        }\n      };\n\n      if (changesIsInDataRef([lengthChange], this.aNode.hotspot.data)) {\n        pushToChildrenChanges(lengthChange);\n      }\n    } // 执行视图更新，先删再刷新\n\n\n    this._doCreateAndUpdate = doCreateAndUpdate;\n    var me = this;\n\n    if (disposeChildren.length === 0) {\n      doCreateAndUpdate();\n    } else {\n      this._disposeChildren(disposeChildren, function () {\n        if (doCreateAndUpdate === me._doCreateAndUpdate) {\n          doCreateAndUpdate();\n        }\n      });\n    }\n\n    function doCreateAndUpdate() {\n      me._doCreateAndUpdate = null;\n\n      if (isOnlyDispose) {\n        return;\n      }\n\n      var beforeEl = me.el;\n      var parentEl = beforeEl.parentNode; // 对相应的项进行更新\n      // 如果不attached则直接创建，如果存在则调用更新函数\n\n      var j = -1;\n\n      for (var i = 0; i < newLen; i++) {\n        var child = me.children[i];\n\n        if (child) {\n          if (childrenChanges[i] && (!childrenNeedUpdate || childrenNeedUpdate[i])) {\n            child._update(childrenChanges[i]);\n          }\n        } else {\n          if (j < i) {\n            j = i + 1;\n            beforeEl = null;\n\n            while (j < newLen) {\n              var nextChild = me.children[j];\n\n              if (nextChild) {\n                beforeEl = nextChild.sel || nextChild.el;\n                break;\n              }\n\n              j++;\n            }\n          }\n\n          me.children[i] = createNode(me.aNode.forRinsed, me, new ForItemData(me, newList[i], i), me.owner);\n          me.children[i].attach(parentEl, beforeEl || me.el);\n        }\n      }\n    }\n  }; // exports = module.exports = ForNode;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file if 指令节点类\n   */\n  // var each = require('../util/each');\n  // var guid = require('../util/guid');\n  // var insertBefore = require('../browser/insert-before');\n  // var evalExpr = require('../runtime/eval-expr');\n  // var NodeType = require('./node-type');\n  // var createNode = require('./create-node');\n  // var createReverseNode = require('./create-reverse-node');\n  // var nodeOwnCreateStump = require('./node-own-create-stump');\n  // var nodeOwnSimpleDispose = require('./node-own-simple-dispose');\n\n  /**\n   * if 指令节点类\n   *\n   * @class\n   * @param {Object} aNode 抽象节点\n   * @param {Node} parent 父亲节点\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n   */\n\n\n  function IfNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === 5 ? parent : parent.parentComponent;\n    this.id = guid++;\n    this.children = []; // #[begin] reverse\n\n    if (reverseWalker) {\n      if (evalExpr(this.aNode.directives['if'].value, this.scope, this.owner)) {\n        // eslint-disable-line dot-notation\n        this.elseIndex = -1;\n        this.children[0] = createReverseNode(this.aNode.ifRinsed, this, this.scope, this.owner, reverseWalker);\n      } else {\n        var me = this;\n        each(aNode.elses, function (elseANode, index) {\n          var elif = elseANode.directives.elif;\n\n          if (!elif || elif && evalExpr(elif.value, me.scope, me.owner)) {\n            me.elseIndex = index;\n            me.children[0] = createReverseNode(elseANode, me, me.scope, me.owner, reverseWalker);\n            return false;\n          }\n        });\n      }\n\n      this._create();\n\n      insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n    } // #[end]\n\n  }\n\n  IfNode.prototype.nodeType = 2;\n  IfNode.prototype._create = nodeOwnCreateStump;\n  IfNode.prototype.dispose = nodeOwnSimpleDispose;\n  /**\n   * attach到页面\n   *\n   * @param {HTMLElement} parentEl 要添加到的父元素\n   * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n   */\n\n  IfNode.prototype.attach = function (parentEl, beforeEl) {\n    var me = this;\n    var elseIndex;\n    var child;\n\n    if (evalExpr(this.aNode.directives['if'].value, this.scope, this.owner)) {\n      // eslint-disable-line dot-notation\n      child = createNode(this.aNode.ifRinsed, this, this.scope, this.owner);\n      elseIndex = -1;\n    } else {\n      each(this.aNode.elses, function (elseANode, index) {\n        var elif = elseANode.directives.elif;\n\n        if (!elif || elif && evalExpr(elif.value, me.scope, me.owner)) {\n          child = createNode(elseANode, me, me.scope, me.owner);\n          elseIndex = index;\n          return false;\n        }\n      });\n    }\n\n    if (child) {\n      this.children[0] = child;\n      child.attach(parentEl, beforeEl);\n      this.elseIndex = elseIndex;\n    }\n\n    this._create();\n\n    insertBefore(this.el, parentEl, beforeEl);\n  };\n  /**\n   * 视图更新函数\n   *\n   * @param {Array} changes 数据变化信息\n   */\n\n\n  IfNode.prototype._update = function (changes) {\n    var me = this;\n    var childANode = this.aNode.ifRinsed;\n    var elseIndex;\n\n    if (evalExpr(this.aNode.directives['if'].value, this.scope, this.owner)) {\n      // eslint-disable-line dot-notation\n      elseIndex = -1;\n    } else {\n      each(this.aNode.elses, function (elseANode, index) {\n        var elif = elseANode.directives.elif;\n\n        if (elif && evalExpr(elif.value, me.scope, me.owner) || !elif) {\n          elseIndex = index;\n          childANode = elseANode;\n          return false;\n        }\n      });\n    }\n\n    var child = this.children[0];\n\n    if (elseIndex === this.elseIndex) {\n      child && child._update(changes);\n    } else {\n      this.children = [];\n\n      if (child) {\n        child._ondisposed = newChild;\n        child.dispose();\n      } else {\n        newChild();\n      }\n\n      this.elseIndex = elseIndex;\n    }\n\n    function newChild() {\n      if (typeof elseIndex !== 'undefined') {\n        (me.children[0] = createNode(childANode, me, me.scope, me.owner)).attach(me.el.parentNode, me.el);\n      }\n    }\n  };\n\n  IfNode.prototype._getElAsRootNode = function () {\n    var child = this.children[0];\n    return child && child.el || this.el;\n  }; // exports = module.exports = IfNode;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file is 指令节点类\n   */\n  // var guid = require('../util/guid');\n  // var evalExpr = require('../runtime/eval-expr');\n  // var NodeType = require('./node-type');\n  // var createNode = require('./create-node');\n  // var createReverseNode = require('./create-reverse-node');\n  // var nodeOwnSimpleDispose = require('./node-own-simple-dispose');\n\n  /**\n   * is 指令节点类\n   *\n   * @class\n   * @param {Object} aNode 抽象节点\n   * @param {Node} parent 父亲节点\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n   */\n\n\n  function IsNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === 5 ? parent : parent.parentComponent;\n    this.id = guid++;\n    this.children = [];\n    this.tagName = this.aNode.tagName; // #[begin] reverse\n\n    if (reverseWalker) {\n      this.cmpt = evalExpr(this.aNode.directives.is.value, this.scope) || this.tagName;\n      this.children[0] = createReverseNode(this.aNode.isRinsed, this, this.scope, this.owner, reverseWalker, this.cmpt);\n    } // #[end]\n\n  }\n\n  IsNode.prototype.nodeType = 9;\n  IsNode.prototype.dispose = nodeOwnSimpleDispose;\n  /**\n   * attach到页面\n   *\n   * @param {HTMLElement} parentEl 要添加到的父元素\n   * @param {HTMLElement＝} beforeEl 要添加到哪个元素之前\n   */\n\n  IsNode.prototype.attach = function (parentEl, beforeEl) {\n    this.cmpt = evalExpr(this.aNode.directives.is.value, this.scope) || this.tagName;\n    var child = createNode(this.aNode.isRinsed, this, this.scope, this.owner, this.cmpt);\n    this.children[0] = child;\n    child.attach(parentEl, beforeEl);\n  };\n  /**\n   * 视图更新函数\n   *\n   * @param {Array} changes 数据变化信息\n   */\n\n\n  IsNode.prototype._update = function (changes) {\n    var childANode = this.aNode.isRinsed;\n    var child = this.children[0];\n    var cmpt = evalExpr(this.aNode.directives.is.value, this.scope) || this.tagName;\n\n    if (cmpt === this.cmpt) {\n      child._update(changes);\n    } else {\n      this.cmpt = cmpt;\n      var newChild = createNode(childANode, this, this.scope, this.owner, this.cmpt);\n      var el = child.el;\n      newChild.attach(el.parentNode, el);\n      child.dispose();\n      this.children[0] = newChild;\n    }\n  };\n\n  IsNode.prototype._getElAsRootNode = function () {\n    return this.children[0].el;\n  }; // exports = module.exports = IsNode;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file template 节点类\n   */\n  // var guid = require('../util/guid');\n  // var insertBefore = require('../browser/insert-before');\n  // var removeEl = require('../browser/remove-el');\n  // var NodeType = require('./node-type');\n  // var LifeCycle = require('./life-cycle');\n  // var createReverseNode = require('./create-reverse-node');\n  // var elementDisposeChildren = require('./element-dispose-children');\n  // var nodeOwnOnlyChildrenAttach = require('./node-own-only-children-attach');\n\n  /**\n   * template 节点类\n   *\n   * @class\n   * @param {Object} aNode 抽象节点\n   * @param {Node} parent 父亲节点\n   * @param {Model} scope 所属数据环境\n   * @param {Component} owner 所属组件环境\n   * @param {DOMChildrenWalker?} reverseWalker 子元素遍历对象\n   */\n\n\n  function TemplateNode(aNode, parent, scope, owner, reverseWalker) {\n    this.aNode = aNode;\n    this.owner = owner;\n    this.scope = scope;\n    this.parent = parent;\n    this.parentComponent = parent.nodeType === 5 ? parent : parent.parentComponent;\n    this.id = guid++;\n    this.lifeCycle = LifeCycle.start;\n    this.children = []; // #[begin] reverse\n\n    if (reverseWalker) {\n      var hasFlagComment; // start flag\n\n      if (reverseWalker.current && reverseWalker.current.nodeType === 8) {\n        this.sel = reverseWalker.current;\n        hasFlagComment = 1;\n        reverseWalker.goNext();\n      } else {\n        this.sel = document.createComment(this.id);\n        insertBefore(this.sel, reverseWalker.target, reverseWalker.current);\n      } // content\n\n\n      var aNodeChildren = this.aNode.children;\n\n      for (var i = 0, l = aNodeChildren.length; i < l; i++) {\n        this.children.push(createReverseNode(aNodeChildren[i], this, this.scope, this.owner, reverseWalker));\n      } // end flag\n\n\n      if (hasFlagComment) {\n        this.el = reverseWalker.current;\n        reverseWalker.goNext();\n      } else {\n        this.el = document.createComment(this.id);\n        insertBefore(this.el, reverseWalker.target, reverseWalker.current);\n      }\n\n      this.lifeCycle = LifeCycle.attached;\n    } // #[end]\n\n  }\n\n  TemplateNode.prototype.nodeType = 7;\n  TemplateNode.prototype.attach = nodeOwnOnlyChildrenAttach;\n  /**\n   * 销毁释放\n   *\n   * @param {boolean=} noDetach 是否不要把节点从dom移除\n   * @param {boolean=} noTransition 是否不显示过渡动画效果\n   */\n\n  TemplateNode.prototype.dispose = function (noDetach, noTransition) {\n    elementDisposeChildren(this.children, noDetach, noTransition);\n\n    if (!noDetach) {\n      removeEl(this.el);\n      removeEl(this.sel);\n    }\n\n    this.sel = null;\n    this.el = null;\n    this.owner = null;\n    this.scope = null;\n    this.children = null;\n    this.lifeCycle = LifeCycle.disposed;\n\n    if (this._ondisposed) {\n      this._ondisposed();\n    }\n  };\n  /**\n   * 视图更新函数\n   *\n   * @param {Array} changes 数据变化信息\n   */\n\n\n  TemplateNode.prototype._update = function (changes) {\n    for (var i = 0; i < this.children.length; i++) {\n      this.children[i]._update(changes);\n    }\n  }; // exports = module.exports = TemplateNode;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file ANode预热\n   */\n  // var ExprType = require('../parser/expr-type');\n  // var each = require('../util/each');\n  // var extend = require('../util/extend');\n  // var kebab2camel = require('../util/kebab2camel');\n  // var hotTags = require('../browser/hot-tags');\n  // var createEl = require('../browser/create-el');\n  // var getPropHandler = require('./get-prop-handler');\n  // var getANodeProp = require('./get-a-node-prop');\n  // var isBrowser = require('../browser/is-browser');\n  // var TextNode = require('./text-node');\n  // var SlotNode = require('./slot-node');\n  // var ForNode = require('./for-node');\n  // var IfNode = require('./if-node');\n  // var IsNode = require('./is-node');\n  // var TemplateNode = require('./template-node');\n  // var Element = require('./element');\n\n  /**\n   * ANode预热，分析的数据引用等信息\n   *\n   * @param {Object} aNode 要预热的ANode\n   */\n\n\n  function preheatANode(aNode, componentInstance) {\n    var stack = [];\n\n    function recordHotspotData(expr, notContentData) {\n      var refs = analyseExprDataHotspot(expr);\n\n      if (refs.length) {\n        for (var i = 0, len = stack.length; i < len; i++) {\n          if (!notContentData || i !== len - 1) {\n            var data = stack[i].hotspot.data;\n\n            if (!data) {\n              data = stack[i].hotspot.data = {};\n            }\n\n            each(refs, function (ref) {\n              data[ref] = 1;\n            });\n          }\n        }\n      }\n    }\n\n    function analyseANodeHotspot(aNode) {\n      if (!aNode.hotspot) {\n        stack.push(aNode);\n\n        if (aNode.textExpr) {\n          aNode.hotspot = {};\n          aNode.Clazz = TextNode;\n          recordHotspotData(aNode.textExpr);\n        } else {\n          var sourceNode;\n\n          if (isBrowser && aNode.tagName && aNode.tagName.indexOf('-') < 0 && !/^(template|slot|select|input|option|button|video|audio|canvas|img|embed|object|iframe)$/i.test(aNode.tagName)) {\n            sourceNode = createEl(aNode.tagName);\n          }\n\n          aNode.hotspot = {\n            dynamicProps: [],\n            xProps: [],\n            props: {},\n            binds: [],\n            sourceNode: sourceNode\n          }; // === analyse hotspot data: start\n\n          each(aNode.vars, function (varItem) {\n            recordHotspotData(varItem.expr);\n          });\n          each(aNode.props, function (prop) {\n            aNode.hotspot.binds.push({\n              name: kebab2camel(prop.name),\n              expr: prop.noValue != null ? {\n                type: 3,\n                value: true\n              } : prop.expr,\n              x: prop.x,\n              noValue: prop.noValue\n            });\n            recordHotspotData(prop.expr);\n          });\n\n          for (var key in aNode.directives) {\n            /* istanbul ignore else  */\n            if (aNode.directives.hasOwnProperty(key)) {\n              var directive = aNode.directives[key];\n              recordHotspotData(directive.value, !/^(html|bind)$/.test(key)); // init trackBy getKey function\n\n              if (key === 'for') {\n                var trackBy = directive.trackBy;\n\n                if (trackBy && trackBy.type === 4 && trackBy.paths[0].value === directive.item) {\n                  aNode.hotspot.getForKey = new Function(directive.item, 'return ' + directive.trackByRaw);\n                }\n              }\n            }\n          }\n\n          each(aNode.elses, function (child) {\n            analyseANodeHotspot(child);\n          });\n          each(aNode.children, function (child) {\n            analyseANodeHotspot(child);\n          }); // === analyse hotspot data: end\n          // === analyse hotspot props: start\n\n          each(aNode.props, function (prop, index) {\n            aNode.hotspot.props[prop.name] = index;\n            prop.handler = getPropHandler(aNode.tagName, prop.name);\n\n            if (prop.expr.value != null) {\n              if (sourceNode) {\n                prop.handler(sourceNode, prop.expr.value, prop.name, aNode);\n              }\n            } else {\n              if (prop.x) {\n                aNode.hotspot.xProps.push(prop);\n              }\n\n              aNode.hotspot.dynamicProps.push(prop);\n            }\n          }); // ie 下，如果 option 没有 value 属性，select.value = xx 操作不会选中 option\n          // 所以没有设置 value 时，默认把 option 的内容作为 value\n\n          if (aNode.tagName === 'option' && !getANodeProp(aNode, 'value') && aNode.children[0]) {\n            var valueProp = {\n              name: 'value',\n              expr: aNode.children[0].textExpr,\n              handler: getPropHandler(aNode.tagName, 'value')\n            };\n            aNode.props.push(valueProp);\n            aNode.hotspot.dynamicProps.push(valueProp);\n            aNode.hotspot.props.value = aNode.props.length - 1;\n          }\n\n          if (aNode.directives['if']) {\n            // eslint-disable-line dot-notation\n            aNode.ifRinsed = {\n              children: aNode.children,\n              props: aNode.props,\n              events: aNode.events,\n              tagName: aNode.tagName,\n              vars: aNode.vars,\n              hotspot: aNode.hotspot,\n              directives: aNode.directives\n            };\n            aNode.hotspot.hasRootNode = true;\n            aNode.Clazz = IfNode;\n            aNode = aNode.ifRinsed;\n          }\n\n          if (aNode.directives['for']) {\n            // eslint-disable-line dot-notation\n            aNode.forRinsed = {\n              children: aNode.children,\n              props: aNode.props,\n              events: aNode.events,\n              tagName: aNode.tagName,\n              vars: aNode.vars,\n              hotspot: aNode.hotspot,\n              directives: aNode.directives\n            };\n            aNode.hotspot.hasRootNode = true;\n            aNode.Clazz = ForNode;\n            aNode = aNode.forRinsed;\n          }\n\n          if (aNode.directives.is) {\n            aNode.isRinsed = {\n              children: aNode.children,\n              props: aNode.props,\n              events: aNode.events,\n              tagName: aNode.tagName,\n              vars: aNode.vars,\n              hotspot: aNode.hotspot,\n              directives: aNode.directives\n            };\n            aNode.hotspot.hasRootNode = true;\n            aNode.Clazz = IsNode;\n            aNode = aNode.isRinsed;\n          }\n\n          switch (aNode.tagName) {\n            case 'slot':\n              aNode.Clazz = SlotNode;\n              break;\n\n            case 'template':\n            case 'fragment':\n              aNode.hotspot.hasRootNode = true;\n              aNode.Clazz = TemplateNode;\n              break;\n\n            default:\n              if (hotTags[aNode.tagName]) {\n                if (!aNode.directives.is && (!componentInstance || !componentInstance.components[aNode.tagName])) {\n                  aNode.Clazz = Element;\n                } // #[begin] error\n\n\n                if (componentInstance && componentInstance.components[aNode.tagName]) {\n                  warn('\\`' + aNode.tagName + '\\` as sub-component tag is a bad practice.');\n                } // #[end]\n\n              }\n\n          } // === analyse hotspot props: end\n\n        }\n\n        stack.pop();\n      }\n    }\n\n    if (aNode) {\n      analyseANodeHotspot(aNode);\n    }\n  }\n  /**\n   * 分析表达式的数据引用\n   *\n   * @param {Object} expr 要分析的表达式\n   * @return {Array}\n   */\n\n\n  function analyseExprDataHotspot(expr, accessorMeanDynamic) {\n    var refs = [];\n    var isDynamic;\n\n    function analyseExprs(exprs, accessorMeanDynamic) {\n      for (var i = 0, l = exprs.length; i < l; i++) {\n        refs = refs.concat(analyseExprDataHotspot(exprs[i], accessorMeanDynamic));\n        isDynamic = isDynamic || exprs[i].dynamic;\n      }\n    }\n\n    switch (expr.type) {\n      case 4:\n        isDynamic = accessorMeanDynamic;\n        var paths = expr.paths;\n        refs.push(paths[0].value);\n\n        if (paths.length > 1) {\n          refs.push(paths[0].value + '.' + (paths[1].value || '*'));\n        }\n\n        analyseExprs(paths.slice(1), 1);\n        break;\n\n      case 9:\n        refs = analyseExprDataHotspot(expr.expr, accessorMeanDynamic);\n        isDynamic = expr.expr.dynamic;\n        break;\n\n      case 7:\n      case 8:\n      case 10:\n        analyseExprs(expr.segs, accessorMeanDynamic);\n        break;\n\n      case 5:\n        refs = analyseExprDataHotspot(expr.expr);\n        isDynamic = expr.expr.dynamic;\n        each(expr.filters, function (filter) {\n          analyseExprs(filter.name.paths);\n          analyseExprs(filter.args);\n        });\n        break;\n\n      case 6:\n        analyseExprs(expr.name.paths);\n        analyseExprs(expr.args);\n        break;\n\n      case 12:\n      case 11:\n        for (var i = 0; i < expr.items.length; i++) {\n          refs = refs.concat(analyseExprDataHotspot(expr.items[i].expr));\n          isDynamic = isDynamic || expr.items[i].expr.dynamic;\n        }\n\n        break;\n    }\n\n    isDynamic && (expr.dynamic = true);\n    return refs;\n  } // exports = module.exports = preheatANode;\n\n  /**\n   * Copyright (c) Baidu Inc. All rights reserved.\n   *\n   * This source code is licensed under the MIT license.\n   * See LICENSE file in the project root for license information.\n   *\n   * @file 创建组件Loader\n   */\n  // var ComponentLoader = require('./component-loader');\n\n  /**\n   * 创建组件Loader\n   *\n   * @param {Object|Function} options 创建组件Loader的参数。为Object时参考下方描述，为Function时代表load方法。\n   * @param {Function} options.load load方法\n   * @param {Function=} options.placeholder loading过程中渲染的占位组件\n   * @param {Function=} options.fallback load失败时渲染的组件\n   * @return {ComponentLoader}\n   */\n\n\n  function createComponentLoader(options) {\n    var placeholder = options.placeholder;\n    var fallback = options.fallback;\n    var load = typeof options === 'function' ? options : options.load;\n    return new ComponentLoader(load, placeholder, fallback);\n  } // exports = module.exports = createComponentLoader;\n\n  /* eslint-disable no-unused-vars */\n  //     var nextTick = require('./util/next-tick');\n  //     var inherits = require('./util/inherits');\n  //     var parseTemplate = require('./parser/parse-template');\n  //     var parseExpr = require('./parser/parse-expr');\n  //     var ExprType = require('./parser/expr-type');\n  //     var unpackANode = require('./parser/unpack-anode');\n  //     var LifeCycle = require('./view/life-cycle');\n  //     var NodeType = require('./view/node-type');\n  //     var Component = require('./view/component');\n  //     var parseComponentTemplate = require('./view/parse-component-template');\n  //     var defineComponent = require('./view/define-component');\n  //     var createComponentLoader = require('./view/create-component-loader');\n  //     var emitDevtool = require('./util/emit-devtool');\n  //     var Data = require('./runtime/data');\n  //     var evalExpr = require('./runtime/eval-expr');\n  //     var DataTypes = require('./util/data-types');\n\n\n  var san = {\n    /**\n     * san版本号\n     *\n     * @type {string}\n     */\n    version: '3.10.5',\n    // #[begin] devtool\n\n    /**\n     * 是否开启调试。开启调试时 devtool 会工作\n     *\n     * @type {boolean}\n     */\n    debug: true,\n    // #[end]\n\n    /**\n     * 组件基类\n     *\n     * @type {Function}\n     */\n    Component: Component,\n\n    /**\n     * 创建组件类\n     *\n     * @param {Object} proto 组件类的方法表\n     * @return {Function}\n     */\n    defineComponent: defineComponent,\n\n    /**\n     * 创建组件Loader\n     *\n     * @param {Object|Function} options 创建组件Loader的参数。为Object时参考下方描述，为Function时代表load方法。\n     * @param {Function} options.load load方法\n     * @param {Function=} options.placeholder loading过程中渲染的占位组件\n     * @param {Function=} options.fallback load失败时渲染的组件\n     * @return {ComponentLoader}\n     */\n    createComponentLoader: createComponentLoader,\n\n    /**\n     * 解析组件 template\n     *\n     * @param {Function} ComponentClass 组件类\n     * @return {ANode}\n     */\n    parseComponentTemplate: parseComponentTemplate,\n\n    /**\n     * 解压缩 ANode\n     *\n     * @param {Array} source ANode 压缩数据\n     * @return {Object}\n     */\n    unpackANode: unpackANode,\n\n    /**\n     * 解析 template\n     *\n     * @inner\n     * @param {string} source template 源码\n     * @return {ANode}\n     */\n    parseTemplate: parseTemplate,\n\n    /**\n     * 解析表达式\n     *\n     * @param {string} source 源码\n     * @return {Object}\n     */\n    parseExpr: parseExpr,\n\n    /**\n     * 表达式类型枚举\n     *\n     * @const\n     * @type {Object}\n     */\n    ExprType: ExprType,\n\n    /**\n     * 生命周期\n     */\n    LifeCycle: LifeCycle,\n\n    /**\n     * 节点类型\n     *\n     * @const\n     * @type {Object}\n     */\n    NodeType: NodeType,\n\n    /**\n     * 在下一个更新周期运行函数\n     *\n     * @param {Function} fn 要运行的函数\n     */\n    nextTick: nextTick,\n\n    /**\n     * 数据类\n     *\n     * @class\n     * @param {Object?} data 初始数据\n     * @param {Data?} parent 父级数据对象\n     */\n    Data: Data,\n\n    /**\n     * 计算表达式的值\n     *\n     * @param {Object} expr 表达式对象\n     * @param {Data} data 数据对象\n     * @param {Component=} owner 组件对象，用于表达式中filter的执行\n     * @return {*}\n     */\n    evalExpr: evalExpr,\n\n    /**\n     * 构建类之间的继承关系\n     *\n     * @param {Function} subClass 子类函数\n     * @param {Function} superClass 父类函数\n     */\n    inherits: inherits,\n\n    /**\n     * DataTypes\n     *\n     * @type {Object}\n     */\n    DataTypes: DataTypes\n  }; // export\n\n  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') {\n    // For CommonJS\n    exports = module.exports = san;\n  } else if (true) {\n    // For AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (san),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {} // #[begin] devtool\n\n\n  emitDevtool.start(san); // #[end]\n})(this);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/san/dist/san.dev.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n  \"use strict\";\n\n  if (global.setImmediate) {\n    return;\n  }\n\n  var nextHandle = 1; // Spec says greater than zero\n\n  var tasksByHandle = {};\n  var currentlyRunningATask = false;\n  var doc = global.document;\n  var registerImmediate;\n\n  function setImmediate(callback) {\n    // Callback can either be a function or a string\n    if (typeof callback !== \"function\") {\n      callback = new Function(\"\" + callback);\n    } // Copy function arguments\n\n\n    var args = new Array(arguments.length - 1);\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i + 1];\n    } // Store and register the task\n\n\n    var task = {\n      callback: callback,\n      args: args\n    };\n    tasksByHandle[nextHandle] = task;\n    registerImmediate(nextHandle);\n    return nextHandle++;\n  }\n\n  function clearImmediate(handle) {\n    delete tasksByHandle[handle];\n  }\n\n  function run(task) {\n    var callback = task.callback;\n    var args = task.args;\n\n    switch (args.length) {\n      case 0:\n        callback();\n        break;\n\n      case 1:\n        callback(args[0]);\n        break;\n\n      case 2:\n        callback(args[0], args[1]);\n        break;\n\n      case 3:\n        callback(args[0], args[1], args[2]);\n        break;\n\n      default:\n        callback.apply(undefined, args);\n        break;\n    }\n  }\n\n  function runIfPresent(handle) {\n    // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // \"too much recursion\" error.\n      setTimeout(runIfPresent, 0, handle);\n    } else {\n      var task = tasksByHandle[handle];\n\n      if (task) {\n        currentlyRunningATask = true;\n\n        try {\n          run(task);\n        } finally {\n          clearImmediate(handle);\n          currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  function installNextTickImplementation() {\n    registerImmediate = function registerImmediate(handle) {\n      process.nextTick(function () {\n        runIfPresent(handle);\n      });\n    };\n  }\n\n  function canUsePostMessage() {\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `global.postMessage` means something completely different and can't be used for this purpose.\n    if (global.postMessage && !global.importScripts) {\n      var postMessageIsAsynchronous = true;\n      var oldOnMessage = global.onmessage;\n\n      global.onmessage = function () {\n        postMessageIsAsynchronous = false;\n      };\n\n      global.postMessage(\"\", \"*\");\n      global.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n  }\n\n  function installPostMessageImplementation() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\n    var onGlobalMessage = function onGlobalMessage(event) {\n      if (event.source === global && typeof event.data === \"string\" && event.data.indexOf(messagePrefix) === 0) {\n        runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n\n    if (global.addEventListener) {\n      global.addEventListener(\"message\", onGlobalMessage, false);\n    } else {\n      global.attachEvent(\"onmessage\", onGlobalMessage);\n    }\n\n    registerImmediate = function registerImmediate(handle) {\n      global.postMessage(messagePrefix + handle, \"*\");\n    };\n  }\n\n  function installMessageChannelImplementation() {\n    var channel = new MessageChannel();\n\n    channel.port1.onmessage = function (event) {\n      var handle = event.data;\n      runIfPresent(handle);\n    };\n\n    registerImmediate = function registerImmediate(handle) {\n      channel.port2.postMessage(handle);\n    };\n  }\n\n  function installReadyStateChangeImplementation() {\n    var html = doc.documentElement;\n\n    registerImmediate = function registerImmediate(handle) {\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var script = doc.createElement(\"script\");\n\n      script.onreadystatechange = function () {\n        runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n\n      html.appendChild(script);\n    };\n  }\n\n  function installSetTimeoutImplementation() {\n    registerImmediate = function registerImmediate(handle) {\n      setTimeout(runIfPresent, 0, handle);\n    };\n  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\n\n  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.\n\n  if ({}.toString.call(global.process) === \"[object process]\") {\n    // For Node.js before 0.9\n    installNextTickImplementation();\n  } else if (canUsePostMessage()) {\n    // For non-IE10 modern browsers\n    installPostMessageImplementation();\n  } else if (global.MessageChannel) {\n    // For web workers, where supported\n    installMessageChannelImplementation();\n  } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n    // For IE 6–8\n    installReadyStateChangeImplementation();\n  } else {\n    // For older browsers\n    installSetTimeoutImplementation();\n  }\n\n  attachTo.setImmediate = setImmediate;\n  attachTo.clearImmediate = clearImmediate;\n})(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== \"undefined\" && global || typeof self !== \"undefined\" && self || window;\nvar apply = Function.prototype.apply; // DOM APIs, for completeness\n\nexports.setTimeout = function () {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\n\nexports.setInterval = function () {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\n\nexports.clearTimeout = exports.clearInterval = function (timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\n\nTimeout.prototype.unref = Timeout.prototype.ref = function () {};\n\nTimeout.prototype.close = function () {\n  this._clearFn.call(scope, this._id);\n}; // Does not start the time, just sets up the members needed.\n\n\nexports.enroll = function (item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function (item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function (item) {\n  clearTimeout(item._idleTimeoutId);\n  var msecs = item._idleTimeout;\n\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout) item._onTimeout();\n    }, msecs);\n  }\n}; // setimmediate attaches itself to the global object\n\n\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\"); // On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\n\n\nexports.setImmediate = typeof self !== \"undefined\" && self.setImmediate || typeof global !== \"undefined\" && global.setImmediate || this && this.setImmediate;\nexports.clearImmediate = typeof self !== \"undefined\" && self.clearImmediate || typeof global !== \"undefined\" && global.clearImmediate || this && this.clearImmediate;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/timers-browserify/main.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (module) {\n  if (!module.webpackPolyfill) {\n    module.deprecate = function () {};\n\n    module.paths = []; // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, \"loaded\", {\n      enumerable: true,\n      get: function get() {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, \"id\", {\n      enumerable: true,\n      get: function get() {\n        return module.i;\n      }\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),

/***/ "./test/case2/App.san":
/*!****************************!*\
  !*** ./test/case2/App.san ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var normalize = __webpack_require__(/*! ../../node_modules/san-loader/lib/runtime/normalize.js */ \"./node_modules/san-loader/lib/runtime/normalize.js\");\n        var injectStyles = [];\n\n        var template = __webpack_require__(/*! ./test/case2/App.san?lang=pug&san=&type=template */ \"./test/case2/App.san?lang=pug&san=&type=template\");\n        \n        var script = __webpack_require__(/*! ./test/case2/App.san?lang=js&san=&type=script */ \"./test/case2/App.san?lang=js&san=&type=script\").default;\n        module.exports = __webpack_require__(/*! ./test/case2/App.san?lang=js&san=&type=script */ \"./test/case2/App.san?lang=js&san=&type=script\");\n    \n        module.exports.default = normalize(script, template, injectStyles);\n        /* san-hmr component */\n    \n    if (false) { var __HMR_ID__, __SAN_COMPONENT__, __HOT_UTILS__, __HOT_API__; }\n    \n\n//# sourceURL=webpack:///./test/case2/App.san?");

/***/ }),

/***/ "./test/case2/App.san?lang=js&san=&type=script":
/*!*****************************************************!*\
  !*** ./test/case2/App.san?lang=js&san=&type=script ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  initData: function initData() {\n    return {\n      name: 'San anode loader!'\n    };\n  }\n});\n/* san-hmr disable */\n\n//# sourceURL=webpack:///./test/case2/App.san?");

/***/ }),

/***/ "./test/case2/App.san?lang=pug&san=&type=template":
/*!********************************************************!*\
  !*** ./test/case2/App.san?lang=pug&san=&type=template ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Module\nvar code = {\"directives\":{},\"props\":[],\"events\":[],\"children\":[{\"directives\":{},\"props\":[{\"name\":\"class\",\"expr\":{\"type\":1,\"value\":\"app\"}}],\"events\":[],\"children\":[{\"directives\":{},\"props\":[],\"events\":[],\"children\":[{\"textExpr\":{\"type\":7,\"segs\":[{\"type\":1,\"value\":\"Hello \"},{\"type\":5,\"expr\":{\"type\":4,\"paths\":[{\"type\":1,\"value\":\"name\"}]},\"filters\":[]},{\"type\":1,\"value\":\"!\"}]}}],\"tagName\":\"h1\"}],\"tagName\":\"div\"}]};\n// Exports\nmodule.exports = code;\n\n//# sourceURL=webpack:///./test/case2/App.san?");

/***/ }),

/***/ "./test/case2/index.js":
/*!*****************************!*\
  !*** ./test/case2/index.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App */ \"./test/case2/App.san\");\n/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_App__WEBPACK_IMPORTED_MODULE_0__);\n\nnew _App__WEBPACK_IMPORTED_MODULE_0___default.a();\n\n//# sourceURL=webpack:///./test/case2/index.js?");

/***/ })

/******/ });